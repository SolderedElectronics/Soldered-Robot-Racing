
USB_WheeL_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009868  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1ec  0800a1ec  0001a1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  0800a1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d4  20000090  0800a280  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000864  0800a280  00020864  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020e86  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003cc2  00000000  00000000  00040f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001128  00000000  00000000  00044c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fb0  00000000  00000000  00045d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009d9b  00000000  00000000  00046ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006098  00000000  00000000  00050a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00056b13  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e64  00000000  00000000  00056b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a00 	.word	0x08009a00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08009a00 	.word	0x08009a00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <USBH_HID_EventCallback>:
static void MX_LPUART1_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0a0      	sub	sp, #128	; 0x80
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
	// Try to get the data from the USB device. Used USB Steering Wheel is "BOXSTER PRO Steering Wheel" and PS2 to USB is some no-name device.
	HID_KEYBD_Info_TypeDef *key;
	key = USBH_HID_GetKeybdInfo(phost);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f005 fed9 	bl	8006370 <USBH_HID_GetKeybdInfo>
 80005be:	66f8      	str	r0, [r7, #108]	; 0x6c

	// If data is sent by the USB Steering Wheel, send it to the serial with ID = 31 (randomly picked number).
	// VID and PID is used to know what device is connected to the STM32 USB.
	if ((phost->device.DevDesc.idProduct == 0x0005) && (phost->device.DevDesc.idVendor == 0x0c12))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80005c6:	2b05      	cmp	r3, #5
 80005c8:	d12a      	bne.n	8000620 <USBH_HID_EventCallback+0x70>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80005d0:	f640 4212 	movw	r2, #3090	; 0xc12
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d123      	bne.n	8000620 <USBH_HID_EventCallback+0x70>
	{
		char tmp[100];

		// Make a formated string of data from the USB Wheel.
		sprintf(tmp, "%d,%d,%d,%d,%d,%d\n\r", 31, 1, key->keys[2], key->keys[3], key->keys[4], key->keys[5]);
 80005d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005da:	7adb      	ldrb	r3, [r3, #11]
 80005dc:	461a      	mov	r2, r3
 80005de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005e0:	7b1b      	ldrb	r3, [r3, #12]
 80005e2:	4619      	mov	r1, r3
 80005e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005e6:	7b5b      	ldrb	r3, [r3, #13]
 80005e8:	461c      	mov	r4, r3
 80005ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005ec:	7b9b      	ldrb	r3, [r3, #14]
 80005ee:	f107 0008 	add.w	r0, r7, #8
 80005f2:	9303      	str	r3, [sp, #12]
 80005f4:	9402      	str	r4, [sp, #8]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	221f      	movs	r2, #31
 80005fe:	4923      	ldr	r1, [pc, #140]	; (800068c <USBH_HID_EventCallback+0xdc>)
 8000600:	f008 f9da 	bl	80089b8 <siprintf>

		// Send it to the UART.
		HAL_UART_Transmit(&hlpuart1, tmp, strlen(tmp), 1000);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fdf1 	bl	80001f0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <USBH_HID_EventCallback+0xe0>)
 800061c:	f003 fdb8 	bl	8004190 <HAL_UART_Transmit>
	}

	// If data is sent by the PS2 to USB Controller, send it to the serial with ID = 63 (again, randomly picked number so these two can be easy recognised)
	if ((phost->device.DevDesc.idProduct == 0x0001) && (phost->device.DevDesc.idVendor == 0x0810))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8000626:	2b01      	cmp	r3, #1
 8000628:	d12c      	bne.n	8000684 <USBH_HID_EventCallback+0xd4>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8000630:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8000634:	d126      	bne.n	8000684 <USBH_HID_EventCallback+0xd4>
	{
		char tmp[100];

		// Make a formated string of data from the PS2 to USB controller.
		sprintf(tmp, "%d,%d,%d,%d,%d,%d\n\r", 63, key->keys[0], key->keys[3], key->keys[4], key->keys[5], key->keys[6]);
 8000636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	461d      	mov	r5, r3
 800063c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800063e:	7b1b      	ldrb	r3, [r3, #12]
 8000640:	461a      	mov	r2, r3
 8000642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000644:	7b5b      	ldrb	r3, [r3, #13]
 8000646:	4619      	mov	r1, r3
 8000648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800064a:	7b9b      	ldrb	r3, [r3, #14]
 800064c:	461c      	mov	r4, r3
 800064e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000650:	7bdb      	ldrb	r3, [r3, #15]
 8000652:	f107 0008 	add.w	r0, r7, #8
 8000656:	9303      	str	r3, [sp, #12]
 8000658:	9402      	str	r4, [sp, #8]
 800065a:	9101      	str	r1, [sp, #4]
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	462b      	mov	r3, r5
 8000660:	223f      	movs	r2, #63	; 0x3f
 8000662:	490a      	ldr	r1, [pc, #40]	; (800068c <USBH_HID_EventCallback+0xdc>)
 8000664:	f008 f9a8 	bl	80089b8 <siprintf>

		// Send it to the UART.
		HAL_UART_Transmit(&hlpuart1, tmp, strlen(tmp), 1000);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fdbf 	bl	80001f0 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	f107 0108 	add.w	r1, r7, #8
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <USBH_HID_EventCallback+0xe0>)
 8000680:	f003 fd86 	bl	8004190 <HAL_UART_Transmit>
	}

}
 8000684:	bf00      	nop
 8000686:	3770      	adds	r7, #112	; 0x70
 8000688:	46bd      	mov	sp, r7
 800068a:	bdb0      	pop	{r4, r5, r7, pc}
 800068c:	08009a18 	.word	0x08009a18
 8000690:	200000bc 	.word	0x200000bc

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fabc 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f814 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f8a2 	bl	80007e8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006a4:	f000 f874 	bl	8000790 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80006a8:	f007 fcea 	bl	8008080 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&hlpuart1, helloMessage, sizeof(helloMessage), 1000);
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	2215      	movs	r2, #21
 80006b2:	4903      	ldr	r1, [pc, #12]	; (80006c0 <main+0x2c>)
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <main+0x30>)
 80006b6:	f003 fd6b 	bl	8004190 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006ba:	f007 fd07 	bl	80080cc <MX_USB_HOST_Process>
 80006be:	e7fc      	b.n	80006ba <main+0x26>
 80006c0:	08009fc8 	.word	0x08009fc8
 80006c4:	200000bc 	.word	0x200000bc

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b096      	sub	sp, #88	; 0x58
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2244      	movs	r2, #68	; 0x44
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 f87e 	bl	80087d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ee:	f002 f97f 	bl	80029f0 <HAL_PWREx_ControlVoltageScaling>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f8:	f000 f942 	bl	8000980 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006fc:	f002 f95a 	bl	80029b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemClock_Config+0xc4>)
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xc4>)
 8000704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000708:	f023 0318 	bic.w	r3, r3, #24
 800070c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000710:	2314      	movs	r3, #20
 8000712:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000720:	2390      	movs	r3, #144	; 0x90
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000728:	2301      	movs	r3, #1
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800072c:	2305      	movs	r3, #5
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000730:	2347      	movs	r3, #71	; 0x47
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800073c:	2306      	movs	r3, #6
 800073e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9c9 	bl	8002adc <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000750:	f000 f916 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2303      	movs	r3, #3
 800075a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800075c:	2390      	movs	r3, #144	; 0x90
 800075e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fdcc 	bl	800330c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800077a:	f000 f901 	bl	8000980 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800077e:	f003 fadf 	bl	8003d40 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000782:	bf00      	nop
 8000784:	3758      	adds	r7, #88	; 0x58
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_LPUART1_UART_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_LPUART1_UART_Init+0x50>)
 80007ce:	f003 fc91 	bl	80040f4 <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f8d2 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000bc 	.word	0x200000bc
 80007e4:	40008000 	.word	0x40008000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4a43      	ldr	r2, [pc, #268]	; (800090c <MX_GPIO_Init+0x124>)
 8000800:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x124>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <MX_GPIO_Init+0x124>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4a3d      	ldr	r2, [pc, #244]	; (800090c <MX_GPIO_Init+0x124>)
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <MX_GPIO_Init+0x124>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b3a      	ldr	r3, [pc, #232]	; (800090c <MX_GPIO_Init+0x124>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4a37      	ldr	r2, [pc, #220]	; (800090c <MX_GPIO_Init+0x124>)
 8000830:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_GPIO_Init+0x124>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0x124>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <MX_GPIO_Init+0x124>)
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_GPIO_Init+0x124>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_GPIO_Init+0x124>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800085e:	f002 f92d 	bl	8002abc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0x124>)
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_GPIO_Init+0x124>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_GPIO_Init+0x124>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000880:	4823      	ldr	r0, [pc, #140]	; (8000910 <MX_GPIO_Init+0x128>)
 8000882:	f000 fcff 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 800088c:	4821      	ldr	r0, [pc, #132]	; (8000914 <MX_GPIO_Init+0x12c>)
 800088e:	f000 fcf9 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_GPIO_Init+0x130>)
 80008aa:	f000 fb59 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ae:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4812      	ldr	r0, [pc, #72]	; (8000910 <MX_GPIO_Init+0x128>)
 80008c8:	f000 fb4a 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80008cc:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_GPIO_Init+0x12c>)
 80008e2:	f000 fb3d 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80008e6:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0x12c>)
 8000900:	f000 fb2e 	bl	8000f60 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	48001800 	.word	0x48001800
 8000918:	48000800 	.word	0x48000800

0800091c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&hlpuart1, &*c, 1, 10);
 800092a:	f107 010c 	add.w	r1, r7, #12
 800092e:	230a      	movs	r3, #10
 8000930:	2201      	movs	r2, #1
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <__io_putchar+0x28>)
 8000934:	f003 fc2c 	bl	8004190 <HAL_UART_Transmit>
	return ch;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000bc 	.word	0x200000bc

08000948 <_write>:

int _write(int file, char *ptr, int len) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e009      	b.n	800096e <_write+0x26>
		__io_putchar(*ptr++);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffda 	bl	800091c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf1      	blt.n	800095a <_write+0x12>
	}
	return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000986:	e7fe      	b.n	8000986 <Error_Handler+0x6>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0ac      	sub	sp, #176	; 0xb0
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	228c      	movs	r2, #140	; 0x8c
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fef1 	bl	80087d8 <memset>
  if(huart->Instance==LPUART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_UART_MspInit+0xb4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d13d      	bne.n	8000a7c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a00:	2320      	movs	r3, #32
 8000a02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fe9f 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff ffb2 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0xb8>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a4c:	f002 f836 	bl	8002abc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a50:	230c      	movs	r3, #12
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fa72 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	37b0      	adds	r7, #176	; 0xb0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40008000 	.word	0x40008000
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8f0 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <OTG_FS_IRQHandler+0x10>)
 8000ae6:	f000 fe4b 	bl	8001780 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000055c 	.word	0x2000055c

08000af4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b06:	68bc      	ldr	r4, [r7, #8]
 8000b08:	1c63      	adds	r3, r4, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	f3af 8000 	nop.w
 8000b10:	4603      	mov	r3, r0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
	}

return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
	...

08000b30 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x50>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x16>
		heap_end = &end;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <_sbrk+0x50>)
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <_sbrk+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <_sbrk+0x50>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <_sbrk+0x50>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	466a      	mov	r2, sp
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d907      	bls.n	8000b6a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000b5a:	f007 fe03 	bl	8008764 <__errno>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	230c      	movs	r3, #12
 8000b62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	e006      	b.n	8000b78 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <_sbrk+0x50>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <_sbrk+0x50>)
 8000b74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	20000864 	.word	0x20000864

08000b88 <_close>:

int _close(int file)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_isatty>:

int _isatty(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
	return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 f95c 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f80d 	bl	8000c44 <HAL_InitTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fea7 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f969 	bl	8000f46 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f933 	bl	8000ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000140 	.word	0x20000140

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000140 	.word	0x20000140

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_Delay+0x40>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad2      	subs	r2, r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3f7      	bcc.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000008 	.word	0x20000008

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	4909      	ldr	r1, [pc, #36]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	095b      	lsrs	r3, r3, #5
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	f002 021f 	and.w	r2, r2, #31
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	490d      	ldr	r1, [pc, #52]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	4909      	ldr	r1, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	1e5a      	subs	r2, r3, #1
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	1e59      	subs	r1, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff90 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff2b 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff40 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff33 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e166      	b.n	800123e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8158 	beq.w	8001238 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d017      	beq.n	800103e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d123      	bne.n	8001092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80b2 	beq.w	8001238 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4a61      	ldr	r2, [pc, #388]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6613      	str	r3, [r2, #96]	; 0x60
 80010e0:	4b5e      	ldr	r3, [pc, #376]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ec:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <HAL_GPIO_Init+0x300>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001116:	d02b      	beq.n	8001170 <HAL_GPIO_Init+0x210>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x304>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d025      	beq.n	800116c <HAL_GPIO_Init+0x20c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x308>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d01f      	beq.n	8001168 <HAL_GPIO_Init+0x208>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x30c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x204>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x310>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x200>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x314>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1fc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x318>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1f8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x31c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1f4>
 8001150:	2307      	movs	r3, #7
 8001152:	e00e      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001154:	2308      	movs	r3, #8
 8001156:	e00c      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001158:	2306      	movs	r3, #6
 800115a:	e00a      	b.n	8001172 <HAL_GPIO_Init+0x212>
 800115c:	2305      	movs	r3, #5
 800115e:	e008      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001160:	2304      	movs	r3, #4
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001164:	2303      	movs	r3, #3
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x212>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001170:	2300      	movs	r3, #0
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x300>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b4:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x320>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae91 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	48001c00 	.word	0x48001c00
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b08f      	sub	sp, #60	; 0x3c
 80012b8:	af0a      	add	r7, sp, #40	; 0x28
 80012ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e054      	b.n	8001370 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f006 ff2b 	bl	800813c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fc47 	bl	8004b98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	687e      	ldr	r6, [r7, #4]
 8001312:	466d      	mov	r5, sp
 8001314:	f106 0410 	add.w	r4, r6, #16
 8001318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001324:	e885 0003 	stmia.w	r5, {r0, r1}
 8001328:	1d33      	adds	r3, r6, #4
 800132a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f003 fbf6 	bl	8004b1e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2101      	movs	r1, #1
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fc3e 	bl	8004bba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	687e      	ldr	r6, [r7, #4]
 8001346:	466d      	mov	r5, sp
 8001348:	f106 0410 	add.w	r4, r6, #16
 800134c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001358:	e885 0003 	stmia.w	r5, {r0, r1}
 800135c:	1d33      	adds	r3, r6, #4
 800135e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f003 fdc1 	bl	8004ee8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001378 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af04      	add	r7, sp, #16
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4603      	mov	r3, r0
 8001388:	70fb      	strb	r3, [r7, #3]
 800138a:	460b      	mov	r3, r1
 800138c:	70bb      	strb	r3, [r7, #2]
 800138e:	4613      	mov	r3, r2
 8001390:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_HCD_HC_Init+0x28>
 800139c:	2302      	movs	r3, #2
 800139e:	e076      	b.n	800148e <HAL_HCD_HC_Init+0x116>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	212c      	movs	r1, #44	; 0x2c
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	333d      	adds	r3, #61	; 0x3d
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	212c      	movs	r1, #44	; 0x2c
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	3338      	adds	r3, #56	; 0x38
 80013c8:	787a      	ldrb	r2, [r7, #1]
 80013ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	3340      	adds	r3, #64	; 0x40
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	212c      	movs	r1, #44	; 0x2c
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	3339      	adds	r3, #57	; 0x39
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	212c      	movs	r1, #44	; 0x2c
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	333f      	adds	r3, #63	; 0x3f
 80013fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	78ba      	ldrb	r2, [r7, #2]
 8001408:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800140c:	b2d0      	uxtb	r0, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	333a      	adds	r3, #58	; 0x3a
 800141a:	4602      	mov	r2, r0
 800141c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800141e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da09      	bge.n	800143a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	212c      	movs	r1, #44	; 0x2c
 800142c:	fb01 f303 	mul.w	r3, r1, r3
 8001430:	4413      	add	r3, r2
 8001432:	333b      	adds	r3, #59	; 0x3b
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e008      	b.n	800144c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	212c      	movs	r1, #44	; 0x2c
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	4413      	add	r3, r2
 8001446:	333b      	adds	r3, #59	; 0x3b
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	212c      	movs	r1, #44	; 0x2c
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	4413      	add	r3, r2
 8001458:	333c      	adds	r3, #60	; 0x3c
 800145a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800145e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	787c      	ldrb	r4, [r7, #1]
 8001466:	78ba      	ldrb	r2, [r7, #2]
 8001468:	78f9      	ldrb	r1, [r7, #3]
 800146a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4623      	mov	r3, r4
 800147c:	f003 fe84 	bl	8005188 <USB_HC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_HCD_HC_Halt+0x1e>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e00f      	b.n	80014d4 <HAL_HCD_HC_Halt+0x3e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 f87e 	bl	80055c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	70fb      	strb	r3, [r7, #3]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70bb      	strb	r3, [r7, #2]
 80014f2:	4613      	mov	r3, r2
 80014f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	333b      	adds	r3, #59	; 0x3b
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	333f      	adds	r3, #63	; 0x3f
 8001516:	787a      	ldrb	r2, [r7, #1]
 8001518:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d112      	bne.n	8001546 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	3342      	adds	r3, #66	; 0x42
 800152e:	2203      	movs	r2, #3
 8001530:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	333d      	adds	r3, #61	; 0x3d
 8001540:	7f3a      	ldrb	r2, [r7, #28]
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e008      	b.n	8001558 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3342      	adds	r3, #66	; 0x42
 8001554:	2202      	movs	r2, #2
 8001556:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b03      	cmp	r3, #3
 800155c:	f200 80c6 	bhi.w	80016ec <HAL_HCD_HC_SubmitRequest+0x210>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001579 	.word	0x08001579
 800156c:	080016d9 	.word	0x080016d9
 8001570:	080015dd 	.word	0x080015dd
 8001574:	0800165b 	.word	0x0800165b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001578:	7c3b      	ldrb	r3, [r7, #16]
 800157a:	2b01      	cmp	r3, #1
 800157c:	f040 80b8 	bne.w	80016f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001580:	78bb      	ldrb	r3, [r7, #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80b4 	bne.w	80016f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001588:	8b3b      	ldrh	r3, [r7, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3355      	adds	r3, #85	; 0x55
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3355      	adds	r3, #85	; 0x55
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	3342      	adds	r3, #66	; 0x42
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80015c6:	e093      	b.n	80016f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	212c      	movs	r1, #44	; 0x2c
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	3342      	adds	r3, #66	; 0x42
 80015d6:	2202      	movs	r2, #2
 80015d8:	701a      	strb	r2, [r3, #0]
      break;
 80015da:	e089      	b.n	80016f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80015dc:	78bb      	ldrb	r3, [r7, #2]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11d      	bne.n	800161e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	3355      	adds	r3, #85	; 0x55
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3342      	adds	r3, #66	; 0x42
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001608:	e073      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	212c      	movs	r1, #44	; 0x2c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	3342      	adds	r3, #66	; 0x42
 8001618:	2202      	movs	r2, #2
 800161a:	701a      	strb	r2, [r3, #0]
      break;
 800161c:	e069      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	3354      	adds	r3, #84	; 0x54
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	3342      	adds	r3, #66	; 0x42
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
      break;
 8001644:	e055      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	3342      	adds	r3, #66	; 0x42
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
      break;
 8001658:	e04b      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800165a:	78bb      	ldrb	r3, [r7, #2]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11d      	bne.n	800169c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	3355      	adds	r3, #85	; 0x55
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	212c      	movs	r1, #44	; 0x2c
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3342      	adds	r3, #66	; 0x42
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001686:	e034      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3342      	adds	r3, #66	; 0x42
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	e02a      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	3354      	adds	r3, #84	; 0x54
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	3342      	adds	r3, #66	; 0x42
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
      break;
 80016c2:	e016      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3342      	adds	r3, #66	; 0x42
 80016d2:	2202      	movs	r2, #2
 80016d4:	701a      	strb	r2, [r3, #0]
      break;
 80016d6:	e00c      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3342      	adds	r3, #66	; 0x42
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80016f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	3344      	adds	r3, #68	; 0x44
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	8b3a      	ldrh	r2, [r7, #24]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	202c      	movs	r0, #44	; 0x2c
 800170c:	fb00 f303 	mul.w	r3, r0, r3
 8001710:	440b      	add	r3, r1
 8001712:	334c      	adds	r3, #76	; 0x4c
 8001714:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3360      	adds	r3, #96	; 0x60
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3350      	adds	r3, #80	; 0x50
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	3339      	adds	r3, #57	; 0x39
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3361      	adds	r3, #97	; 0x61
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	222c      	movs	r2, #44	; 0x2c
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	3338      	adds	r3, #56	; 0x38
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f003 fe1b 	bl	80053ac <USB_HC_StartXfer>
 8001776:	4603      	mov	r3, r0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fb64 	bl	8004e64 <USB_GetMode>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f040 80f6 	bne.w	8001990 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fb48 	bl	8004e3e <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80ec 	beq.w	800198e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fb3f 	bl	8004e3e <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017ca:	d104      	bne.n	80017d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fb2f 	bl	8004e3e <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ea:	d104      	bne.n	80017f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fb1f 	bl	8004e3e <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800180a:	d104      	bne.n	8001816 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001814:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fb0f 	bl	8004e3e <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b02      	cmp	r3, #2
 8001828:	d103      	bne.n	8001832 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2202      	movs	r2, #2
 8001830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fb01 	bl	8004e3e <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001846:	d11c      	bne.n	8001882 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001850:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001862:	2110      	movs	r1, #16
 8001864:	6938      	ldr	r0, [r7, #16]
 8001866:	f003 f9f5 	bl	8004c54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800186a:	6938      	ldr	r0, [r7, #16]
 800186c:	f003 fa26 	bl	8004cbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fbba 	bl	8004ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f006 fd1d 	bl	80082bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fad9 	bl	8004e3e <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001896:	d102      	bne.n	800189e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f001 f818 	bl	80028ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 facb 	bl	8004e3e <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d106      	bne.n	80018c0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 fce6 	bl	8008284 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2208      	movs	r2, #8
 80018be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 faba 	bl	8004e3e <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d101      	bne.n	80018d8 <HAL_HCD_IRQHandler+0x158>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_HCD_IRQHandler+0x15a>
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6992      	ldr	r2, [r2, #24]
 80018e8:	f022 0210 	bic.w	r2, r2, #16
 80018ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 ff1c 	bl	800272c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	6992      	ldr	r2, [r2, #24]
 80018fe:	f042 0210 	orr.w	r2, r2, #16
 8001902:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fa98 	bl	8004e3e <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001918:	d13a      	bne.n	8001990 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fe40 	bl	80055a4 <USB_HC_ReadInterrupt>
 8001924:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e025      	b.n	8001978 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d018      	beq.n	8001972 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001956:	d106      	bne.n	8001966 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8ab 	bl	8001aba <HCD_HC_IN_IRQHandler>
 8001964:	e005      	b.n	8001972 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fbda 	bl	8002126 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	429a      	cmp	r2, r3
 8001980:	d8d4      	bhi.n	800192c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	e000      	b.n	8001990 <HAL_HCD_IRQHandler+0x210>
      return;
 800198e:	bf00      	nop
    }
  }
}
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_HCD_Start+0x16>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e013      	b.n	80019d4 <HAL_HCD_Start+0x3e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fb80 	bl	80050c0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f8d6 	bl	8004b76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_HCD_Stop+0x16>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e00d      	b.n	8001a0e <HAL_HCD_Stop+0x32>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fee5 	bl	80057ce <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fb20 	bl	8005068 <USB_ResetPort>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	781b      	ldrb	r3, [r3, #0]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3350      	adds	r3, #80	; 0x50
 8001a74:	681b      	ldr	r3, [r3, #0]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fb68 	bl	8005164 <USB_GetCurrentFrame>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fb43 	bl	8005136 <USB_GetHostSpeed>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d11a      	bne.n	8001b20 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af6:	461a      	mov	r2, r3
 8001af8:	2304      	movs	r3, #4
 8001afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3361      	adds	r3, #97	; 0x61
 8001b0a:	2206      	movs	r2, #6
 8001b0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fd54 	bl	80055c6 <USB_HC_Halt>
 8001b1e:	e0af      	b.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b36:	d11b      	bne.n	8001b70 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	461a      	mov	r2, r3
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3361      	adds	r3, #97	; 0x61
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fd2c 	bl	80055c6 <USB_HC_Halt>
 8001b6e:	e087      	b.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d109      	bne.n	8001b9a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	461a      	mov	r2, r3
 8001b94:	2320      	movs	r3, #32
 8001b96:	6093      	str	r3, [r2, #8]
 8001b98:	e072      	b.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d11a      	bne.n	8001be6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3361      	adds	r3, #97	; 0x61
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fcf1 	bl	80055c6 <USB_HC_Halt>
 8001be4:	e04c      	b.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfc:	d11b      	bne.n	8001c36 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3361      	adds	r3, #97	; 0x61
 8001c20:	2208      	movs	r2, #8
 8001c22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fcc9 	bl	80055c6 <USB_HC_Halt>
 8001c34:	e024      	b.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d119      	bne.n	8001c80 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3361      	adds	r3, #97	; 0x61
 8001c6c:	2206      	movs	r2, #6
 8001c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fca3 	bl	80055c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c96:	d112      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fc8f 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001cbc:	e22f      	b.n	800211e <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 80c3 	bne.w	8001e5c <HCD_HC_IN_IRQHandler+0x3a2>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3361      	adds	r3, #97	; 0x61
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	212c      	movs	r1, #44	; 0x2c
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	335c      	adds	r3, #92	; 0x5c
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	333f      	adds	r3, #63	; 0x3f
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	333f      	adds	r3, #63	; 0x3f
 8001d2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d111      	bne.n	8001d58 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fc41 	bl	80055c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	2310      	movs	r3, #16
 8001d54:	6093      	str	r3, [r2, #8]
 8001d56:	e03c      	b.n	8001dd2 <HCD_HC_IN_IRQHandler+0x318>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	333f      	adds	r3, #63	; 0x3f
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d009      	beq.n	8001d80 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	333f      	adds	r3, #63	; 0x3f
 8001d7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d128      	bne.n	8001dd2 <HCD_HC_IN_IRQHandler+0x318>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001da0:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3360      	adds	r3, #96	; 0x60
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	b2d8      	uxtb	r0, r3
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4601      	mov	r1, r0
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f006 fa83 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12b      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x378>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3348      	adds	r3, #72	; 0x48
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	202c      	movs	r0, #44	; 0x2c
 8001df0:	fb00 f202 	mul.w	r2, r0, r2
 8001df4:	440a      	add	r2, r1
 8001df6:	3240      	adds	r2, #64	; 0x40
 8001df8:	8812      	ldrh	r2, [r2, #0]
 8001dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 818b 	beq.w	800211e <HCD_HC_IN_IRQHandler+0x664>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3354      	adds	r3, #84	; 0x54
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3354      	adds	r3, #84	; 0x54
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	e175      	b.n	800211e <HCD_HC_IN_IRQHandler+0x664>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3354      	adds	r3, #84	; 0x54
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2d8      	uxtb	r0, r3
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	3354      	adds	r3, #84	; 0x54
 8001e56:	4602      	mov	r2, r0
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	e160      	b.n	800211e <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 80f7 	bne.w	8002062 <HCD_HC_IN_IRQHandler+0x5a8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3361      	adds	r3, #97	; 0x61
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d109      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x3e2>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3360      	adds	r3, #96	; 0x60
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e0c9      	b.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d109      	bne.n	8001ec4 <HCD_HC_IN_IRQHandler+0x40a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	212c      	movs	r1, #44	; 0x2c
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3360      	adds	r3, #96	; 0x60
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0b5      	b.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3361      	adds	r3, #97	; 0x61
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d009      	beq.n	8001eec <HCD_HC_IN_IRQHandler+0x432>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3361      	adds	r3, #97	; 0x61
 8001ee6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d150      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x4d4>
      hhcd->hc[ch_num].ErrCnt++;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	335c      	adds	r3, #92	; 0x5c
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	202c      	movs	r0, #44	; 0x2c
 8001f04:	fb00 f303 	mul.w	r3, r0, r3
 8001f08:	440b      	add	r3, r1
 8001f0a:	335c      	adds	r3, #92	; 0x5c
 8001f0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	335c      	adds	r3, #92	; 0x5c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d912      	bls.n	8001f48 <HCD_HC_IN_IRQHandler+0x48e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	335c      	adds	r3, #92	; 0x5c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3360      	adds	r3, #96	; 0x60
 8001f42:	2204      	movs	r2, #4
 8001f44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f46:	e073      	b.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3360      	adds	r3, #96	; 0x60
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f8c:	e050      	b.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3361      	adds	r3, #97	; 0x61
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d122      	bne.n	8001fe8 <HCD_HC_IN_IRQHandler+0x52e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3360      	adds	r3, #96	; 0x60
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e023      	b.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3361      	adds	r3, #97	; 0x61
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d119      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x576>
      hhcd->hc[ch_num].ErrCnt++;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	335c      	adds	r3, #92	; 0x5c
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	202c      	movs	r0, #44	; 0x2c
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	440b      	add	r3, r1
 800201a:	335c      	adds	r3, #92	; 0x5c
 800201c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	2204      	movs	r2, #4
 800202e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	461a      	mov	r2, r3
 800203e:	2302      	movs	r3, #2
 8002040:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	b2d8      	uxtb	r0, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3360      	adds	r3, #96	; 0x60
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4601      	mov	r1, r0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f006 f93c 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002060:	e05d      	b.n	800211e <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d152      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x664>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d111      	bne.n	80020b0 <HCD_HC_IN_IRQHandler+0x5f6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fa8c 	bl	80055c6 <USB_HC_Halt>
 80020ae:	e02d      	b.n	800210c <HCD_HC_IN_IRQHandler+0x652>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	333f      	adds	r3, #63	; 0x3f
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <HCD_HC_IN_IRQHandler+0x61e>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	333f      	adds	r3, #63	; 0x3f
 80020d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d119      	bne.n	800210c <HCD_HC_IN_IRQHandler+0x652>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	335c      	adds	r3, #92	; 0x5c
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3361      	adds	r3, #97	; 0x61
 80020f8:	2203      	movs	r2, #3
 80020fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fa5d 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2310      	movs	r3, #16
 800211c:	6093      	str	r3, [r2, #8]
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d11a      	bne.n	800218c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2304      	movs	r3, #4
 8002166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	2206      	movs	r2, #6
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fa1e 	bl	80055c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800218a:	e2cb      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d12e      	bne.n	8002200 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	333d      	adds	r3, #61	; 0x3d
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 82ad 	bne.w	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
      hhcd->hc[ch_num].do_ping = 0U;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	333d      	adds	r3, #61	; 0x3d
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f9e4 	bl	80055c6 <USB_HC_Halt>
}
 80021fe:	e291      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002216:	d112      	bne.n	800223e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f003 f9c5 	bl	80055c6 <USB_HC_Halt>
}
 800223c:	e272      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d140      	bne.n	80022d6 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	335c      	adds	r3, #92	; 0x5c
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d111      	bne.n	80022a0 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	333d      	adds	r3, #61	; 0x3d
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f979 	bl	80055c6 <USB_HC_Halt>
}
 80022d4:	e226      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d12c      	bne.n	8002346 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3361      	adds	r3, #97	; 0x61
 80022fa:	2204      	movs	r2, #4
 80022fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	333d      	adds	r3, #61	; 0x3d
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f94a 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2340      	movs	r3, #64	; 0x40
 8002342:	6093      	str	r3, [r2, #8]
}
 8002344:	e1ee      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b08      	cmp	r3, #8
 800235a:	d11a      	bne.n	8002392 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	2308      	movs	r3, #8
 800236c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3361      	adds	r3, #97	; 0x61
 800237c:	2205      	movs	r2, #5
 800237e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f003 f91b 	bl	80055c6 <USB_HC_Halt>
}
 8002390:	e1c8      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d123      	bne.n	80023f0 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	335c      	adds	r3, #92	; 0x5c
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3361      	adds	r3, #97	; 0x61
 80023c8:	2203      	movs	r2, #3
 80023ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 f8f5 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	2310      	movs	r3, #16
 80023ec:	6093      	str	r3, [r2, #8]
}
 80023ee:	e199      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d11a      	bne.n	800243c <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3361      	adds	r3, #97	; 0x61
 8002414:	2206      	movs	r2, #6
 8002416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f8cf 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	461a      	mov	r2, r3
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	6093      	str	r3, [r2, #8]
}
 800243a:	e173      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d11b      	bne.n	800248c <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3361      	adds	r3, #97	; 0x61
 8002462:	2208      	movs	r2, #8
 8002464:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f003 f8a8 	bl	80055c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002488:	6093      	str	r3, [r2, #8]
}
 800248a:	e14b      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 8140 	bne.w	8002724 <HCD_HC_OUT_IRQHandler+0x5fe>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3361      	adds	r3, #97	; 0x61
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d17d      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3360      	adds	r3, #96	; 0x60
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	333f      	adds	r3, #63	; 0x3f
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d00a      	beq.n	80024f4 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	333f      	adds	r3, #63	; 0x3f
 80024ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	f040 8100 	bne.w	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d113      	bne.n	8002524 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3355      	adds	r3, #85	; 0x55
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3355      	adds	r3, #85	; 0x55
 8002520:	4602      	mov	r2, r0
 8002522:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 80e3 	bne.w	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	334c      	adds	r3, #76	; 0x4c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80d8 	beq.w	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	334c      	adds	r3, #76	; 0x4c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	202c      	movs	r0, #44	; 0x2c
 800255a:	fb00 f202 	mul.w	r2, r0, r2
 800255e:	440a      	add	r2, r1
 8002560:	3240      	adds	r2, #64	; 0x40
 8002562:	8812      	ldrh	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	3b01      	subs	r3, #1
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	202c      	movs	r0, #44	; 0x2c
 800256e:	fb00 f202 	mul.w	r2, r0, r2
 8002572:	440a      	add	r2, r1
 8002574:	3240      	adds	r2, #64	; 0x40
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	fbb3 f3f2 	udiv	r3, r3, r2
 800257c:	613b      	str	r3, [r7, #16]
          if ((num_packets & 1U) != 0U)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80b5 	beq.w	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3355      	adds	r3, #85	; 0x55
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2d8      	uxtb	r0, r3
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3355      	adds	r3, #85	; 0x55
 80025ae:	4602      	mov	r2, r0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e09f      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3361      	adds	r3, #97	; 0x61
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d109      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3360      	adds	r3, #96	; 0x60
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e08b      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d109      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e077      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d109      	bne.n	800262c <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2205      	movs	r2, #5
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e063      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d009      	beq.n	8002654 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002650:	2b08      	cmp	r3, #8
 8002652:	d14f      	bne.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	202c      	movs	r0, #44	; 0x2c
 800266c:	fb00 f303 	mul.w	r3, r0, r3
 8002670:	440b      	add	r3, r1
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d912      	bls.n	80026b0 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3360      	adds	r3, #96	; 0x60
 80026aa:	2204      	movs	r2, #4
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e021      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3360      	adds	r3, #96	; 0x60
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026d8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e0:	60fb      	str	r3, [r7, #12]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2302      	movs	r3, #2
 8002704:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	b2d8      	uxtb	r0, r3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	; 0x60
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4601      	mov	r1, r0
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f005 fdda 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	0c5b      	lsrs	r3, r3, #17
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002760:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d003      	beq.n	8002770 <HCD_RXQLVL_IRQHandler+0x44>
 8002768:	2b05      	cmp	r3, #5
 800276a:	f000 80a9 	beq.w	80028c0 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800276e:	e0aa      	b.n	80028c6 <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a6 	beq.w	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3344      	adds	r3, #68	; 0x44
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 809b 	beq.w	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3350      	adds	r3, #80	; 0x50
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	441a      	add	r2, r3
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	202c      	movs	r0, #44	; 0x2c
 80027a8:	fb00 f303 	mul.w	r3, r0, r3
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d87a      	bhi.n	80028ac <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3344      	adds	r3, #68	; 0x44
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	b292      	uxth	r2, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f002 fade 	bl	8004d90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3344      	adds	r3, #68	; 0x44
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	441a      	add	r2, r3
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	202c      	movs	r0, #44	; 0x2c
 80027ee:	fb00 f303 	mul.w	r3, r0, r3
 80027f2:	440b      	add	r3, r1
 80027f4:	3344      	adds	r3, #68	; 0x44
 80027f6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3350      	adds	r3, #80	; 0x50
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	441a      	add	r2, r3
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	202c      	movs	r0, #44	; 0x2c
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	440b      	add	r3, r1
 8002818:	3350      	adds	r3, #80	; 0x50
 800281a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	0cdb      	lsrs	r3, r3, #19
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3340      	adds	r3, #64	; 0x40
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	429a      	cmp	r2, r3
 8002848:	d13c      	bne.n	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d039      	beq.n	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002866:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3354      	adds	r3, #84	; 0x54
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2d8      	uxtb	r0, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3354      	adds	r3, #84	; 0x54
 80028a6:	4602      	mov	r2, r0
 80028a8:	701a      	strb	r2, [r3, #0]
      break;
 80028aa:	e00b      	b.n	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3360      	adds	r3, #96	; 0x60
 80028ba:	2204      	movs	r2, #4
 80028bc:	701a      	strb	r2, [r3, #0]
      break;
 80028be:	e001      	b.n	80028c4 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80028c4:	bf00      	nop
  }
}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10b      	bne.n	800291e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f005 fcc5 	bl	80082a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b08      	cmp	r3, #8
 8002926:	d132      	bne.n	800298e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f043 0308 	orr.w	r3, r3, #8
 800292e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d126      	bne.n	8002988 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d113      	bne.n	800296a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800294c:	d106      	bne.n	800295c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fb4b 	bl	8004ff0 <USB_InitFSLSPClkSel>
 800295a:	e011      	b.n	8002980 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fb44 	bl	8004ff0 <USB_InitFSLSPClkSel>
 8002968:	e00a      	b.n	8002980 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d106      	bne.n	8002980 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002978:	461a      	mov	r2, r3
 800297a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800297e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f005 fcb7 	bl	80082f4 <HAL_HCD_PortEnabled_Callback>
 8002986:	e002      	b.n	800298e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 fcc1 	bl	8008310 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b20      	cmp	r3, #32
 8002996:	d103      	bne.n	80029a0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40007000 	.word	0x40007000

080029d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_PWREx_GetVoltageRange+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fe:	d130      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0c:	d038      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0e:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2232      	movs	r2, #50	; 0x32
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a34:	e002      	b.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d102      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5c:	d110      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	d007      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000
 8002a94:	20000000 	.word	0x20000000
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002aa0:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aaa:	6053      	str	r3, [r2, #4]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40007000 	.word	0x40007000

08002abc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6053      	str	r3, [r2, #4]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40007000 	.word	0x40007000

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f000 bc04 	b.w	80032f8 <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af0:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afa:	4b9e      	ldr	r3, [pc, #632]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80e4 	beq.w	8002cda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4c>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	f040 808b 	bne.w	8002c36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 8087 	bne.w	8002c36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x64>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e3db      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RCC_OscConfig+0x7e>
 8002b50:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	e005      	b.n	8002b66 <HAL_RCC_OscConfig+0x8a>
 8002b5a:	4b86      	ldr	r3, [pc, #536]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d923      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fd8e 	bl	8003690 <RCC_SetFlashLatencyFromMSIRange>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e3bc      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7e:	4a7d      	ldr	r2, [pc, #500]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b80:	4b7c      	ldr	r3, [pc, #496]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	497a      	ldr	r1, [pc, #488]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9c:	4975      	ldr	r1, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e025      	b.n	8002bfe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb2:	4a70      	ldr	r2, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	496d      	ldr	r1, [pc, #436]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	4b6c      	ldr	r3, [pc, #432]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd0:	4968      	ldr	r1, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bd2:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fd4e 	bl	8003690 <RCC_SetFlashLatencyFromMSIRange>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e37c      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bfe:	f000 fc85 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8002c02:	4601      	mov	r1, r0
 8002c04:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_RCC_OscConfig+0x29c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_OscConfig+0x2a0>)
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c1e:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <HAL_RCC_OscConfig+0x2a4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f80e 	bl	8000c44 <HAL_InitTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d052      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	e360      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d032      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c3e:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c40:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f84b 	bl	8000ce4 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c52:	f7fe f847 	bl	8000ce4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e349      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c64:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c72:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	493d      	ldr	r1, [pc, #244]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8e:	4939      	ldr	r1, [pc, #228]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c90:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
 8002ca2:	e01a      	b.n	8002cda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ca4:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f818 	bl	8000ce4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f814 	bl	8000ce4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e316      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1dc>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d073      	beq.n	8002dce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x21c>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d10e      	bne.n	8002d10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d063      	beq.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d15f      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e2f3      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x24c>
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0x288>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x270>
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0x288>
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x298>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fd ffba 	bl	8000ce4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d72:	e010      	b.n	8002d96 <HAL_RCC_OscConfig+0x2ba>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08009fe0 	.word	0x08009fe0
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fd ffae 	bl	8000ce4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e2b0      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d96:	4baf      	ldr	r3, [pc, #700]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x2a8>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fd ff9e 	bl	8000ce4 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fd ff9a 	bl	8000ce4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e29c      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dbe:	4ba5      	ldr	r3, [pc, #660]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d0>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d060      	beq.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x310>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d119      	bne.n	8002e1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d116      	bne.n	8002e1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dec:	4b99      	ldr	r3, [pc, #612]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x328>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e279      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4993      	ldr	r1, [pc, #588]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e06:	4b93      	ldr	r3, [pc, #588]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e18:	e040      	b.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d023      	beq.n	8002e6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e22:	4a8c      	ldr	r2, [pc, #560]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e24:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fd ff59 	bl	8000ce4 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fd ff55 	bl	8000ce4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e257      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	4b82      	ldr	r3, [pc, #520]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	497f      	ldr	r1, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e56:	4b7f      	ldr	r3, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
 8002e68:	e018      	b.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fd ff35 	bl	8000ce4 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fd ff31 	bl	8000ce4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e233      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e90:	4b70      	ldr	r3, [pc, #448]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01c      	beq.n	8002eea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb0:	4a68      	ldr	r2, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fd ff10 	bl	8000ce4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fd ff0c 	bl	8000ce4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e20e      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eda:	4b5e      	ldr	r3, [pc, #376]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ef      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x3ec>
 8002ee8:	e01b      	b.n	8002f22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eea:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd fef3 	bl	8000ce4 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fd feef 	bl	8000ce4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1f1      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f14:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ef      	bne.n	8002f02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80a6 	beq.w	800307c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f34:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4a44      	ldr	r2, [pc, #272]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002f42:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_OscConfig+0x57c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d118      	bne.n	8002f9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f68:	4a3b      	ldr	r2, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x57c>)
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x57c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f74:	f7fd feb6 	bl	8000ce4 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fd feb2 	bl	8000ce4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1b4      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCC_OscConfig+0x57c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4d8>
 8002fa2:	4a2c      	ldr	r2, [pc, #176]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb2:	e024      	b.n	8002ffe <HAL_RCC_OscConfig+0x522>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d110      	bne.n	8002fde <HAL_RCC_OscConfig+0x502>
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fdc:	e00f      	b.n	8002ffe <HAL_RCC_OscConfig+0x522>
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fd fe6d 	bl	8000ce4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fd fe69 	bl	8000ce4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e169      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_OscConfig+0x578>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ed      	beq.n	800300e <HAL_RCC_OscConfig+0x532>
 8003032:	e01a      	b.n	800306a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd fe56 	bl	8000ce4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800303a:	e00f      	b.n	800305c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fd fe52 	bl	8000ce4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d906      	bls.n	800305c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e152      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800305c:	4ba8      	ldr	r3, [pc, #672]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e8      	bne.n	800303c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4aa3      	ldr	r2, [pc, #652]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003072:	4ba3      	ldr	r3, [pc, #652]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003090:	4a9b      	ldr	r2, [pc, #620]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003092:	4b9b      	ldr	r3, [pc, #620]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fd fe20 	bl	8000ce4 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a8:	f7fd fe1c 	bl	8000ce4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e11e      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ba:	4b91      	ldr	r3, [pc, #580]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80030bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x5cc>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ca:	4a8d      	ldr	r2, [pc, #564]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80030cc:	4b8c      	ldr	r3, [pc, #560]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80030ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fd fe03 	bl	8000ce4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e2:	f7fd fdff 	bl	8000ce4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e101      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f4:	4b82      	ldr	r3, [pc, #520]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80f5 	beq.w	80032f6 <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	2b02      	cmp	r3, #2
 8003112:	f040 80cb 	bne.w	80032ac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003116:	4b7a      	ldr	r3, [pc, #488]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d12c      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	3b01      	subs	r3, #1
 8003136:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d123      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d11b      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d113      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d109      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d06d      	beq.n	8003260 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d068      	beq.n	800325c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003196:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0a8      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031a6:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80031a8:	4b55      	ldr	r3, [pc, #340]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b2:	f7fd fd97 	bl	8000ce4 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fd93 	bl	8000ce4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e095      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d8:	4849      	ldr	r0, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80031da:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x828>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ea:	3a01      	subs	r2, #1
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f4:	0212      	lsls	r2, r2, #8
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031fc:	0852      	lsrs	r2, r2, #1
 80031fe:	3a01      	subs	r2, #1
 8003200:	0552      	lsls	r2, r2, #21
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003208:	0852      	lsrs	r2, r2, #1
 800320a:	3a01      	subs	r2, #1
 800320c:	0652      	lsls	r2, r2, #25
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003214:	06d2      	lsls	r2, r2, #27
 8003216:	430a      	orrs	r2, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	60c3      	str	r3, [r0, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800321c:	4a38      	ldr	r2, [pc, #224]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003226:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003228:	4a35      	ldr	r2, [pc, #212]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800322a:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003234:	f7fd fd56 	bl	8000ce4 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd fd52 	bl	8000ce4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e054      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325a:	e04c      	b.n	80032f6 <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04b      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d144      	bne.n	80032f6 <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003284:	f7fd fd2e 	bl	8000ce4 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd fd2a 	bl	8000ce4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e02c      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x7b0>
 80032aa:	e024      	b.n	80032f6 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d01f      	beq.n	80032f2 <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4a13      	ldr	r2, [pc, #76]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd fd11 	bl	8000ce4 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fd fd0d 	bl	8000ce4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032e4:	4906      	ldr	r1, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x824>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <HAL_RCC_OscConfig+0x82c>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e001      	b.n	80032f6 <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	019d808c 	.word	0x019d808c
 8003308:	feeefffc 	.word	0xfeeefffc

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0e7      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0207 	and.w	r2, r3, #7
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d210      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4972      	ldr	r1, [pc, #456]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003330:	4b71      	ldr	r3, [pc, #452]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 0207 	bic.w	r2, r3, #7
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b6e      	ldr	r3, [pc, #440]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0207 	and.w	r2, r3, #7
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cf      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003368:	429a      	cmp	r2, r3
 800336a:	d908      	bls.n	800337e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4963      	ldr	r1, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04c      	beq.n	8003424 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d121      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0a6      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d115      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e09a      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033c2:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e08e      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e086      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4946      	ldr	r1, [pc, #280]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 0203 	bic.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fd fc76 	bl	8000ce4 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fd fc72 	bl	8000ce4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e06e      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343c:	429a      	cmp	r2, r3
 800343e:	d208      	bcs.n	8003452 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	492e      	ldr	r1, [pc, #184]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d910      	bls.n	8003482 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003460:	4925      	ldr	r1, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0207 	and.w	r2, r3, #7
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e036      	b.n	80034f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ac:	4913      	ldr	r1, [pc, #76]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c0:	f000 f824 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034c4:	4601      	mov	r1, r0
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCC_ClockConfig+0x1f0>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1f4>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa21 f303 	lsr.w	r3, r1, r3
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1f8>)
 80034de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1fc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fbad 	bl	8000c44 <HAL_InitTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80034ee:	7afb      	ldrb	r3, [r7, #11]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40021000 	.word	0x40021000
 8003500:	08009fe0 	.word	0x08009fe0
 8003504:	20000000 	.word	0x20000000
 8003508:	20000004 	.word	0x20000004

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003524:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x34>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d121      	bne.n	800357e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d11e      	bne.n	800357e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e005      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10d      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d102      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	e004      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d101      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_GetSysClockFreq+0x110>)
 8003592:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d133      	bne.n	8003602 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d002      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80035ae:	e005      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035b2:	617b      	str	r3, [r7, #20]
      break;
 80035b4:	e005      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0x110>)
 80035b8:	617b      	str	r3, [r7, #20]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	617b      	str	r3, [r7, #20]
      break;
 80035c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	3301      	adds	r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	fb02 f203 	mul.w	r2, r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0e5b      	lsrs	r3, r3, #25
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003602:	69bb      	ldr	r3, [r7, #24]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3724      	adds	r7, #36	; 0x24
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40021000 	.word	0x40021000
 8003614:	08009ff8 	.word	0x08009ff8
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4601      	mov	r1, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	08009ff0 	.word	0x08009ff0

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003668:	f7ff ffda 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 800366c:	4601      	mov	r1, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_RCC_GetPCLK2Freq+0x28>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08009ff0 	.word	0x08009ff0

08003690 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036a8:	f7ff f994 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80036ac:	6178      	str	r0, [r7, #20]
 80036ae:	e014      	b.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6593      	str	r3, [r2, #88]	; 0x58
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036c8:	f7ff f984 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80036cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d10b      	bne.n	80036fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d919      	bls.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2ba0      	cmp	r3, #160	; 0xa0
 80036ec:	d902      	bls.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ee:	2302      	movs	r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	e013      	b.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f4:	2301      	movs	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	e010      	b.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d902      	bls.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003700:	2303      	movs	r3, #3
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e00a      	b.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b80      	cmp	r3, #128	; 0x80
 800370a:	d102      	bne.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800370c:	2302      	movs	r3, #2
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	e004      	b.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b70      	cmp	r3, #112	; 0x70
 8003716:	d101      	bne.n	800371c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003718:	2301      	movs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0207 	and.w	r2, r3, #7
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d001      	beq.n	800373e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000
 800374c:	40022000 	.word	0x40022000

08003750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003758:	2300      	movs	r3, #0
 800375a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800375c:	2300      	movs	r3, #0
 800375e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003774:	d01c      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377a:	d802      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003780:	e01f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003788:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800378c:	d01c      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800378e:	e018      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003790:	4a85      	ldr	r2, [pc, #532]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fadb 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fbc2 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	74fb      	strb	r3, [r7, #19]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d0:	4975      	ldr	r1, [pc, #468]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d2:	4b75      	ldr	r3, [pc, #468]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03f      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003800:	d01c      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003806:	d802      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800380c:	e01f      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800380e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003812:	d003      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003818:	d01c      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800381a:	e018      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800381c:	4a62      	ldr	r2, [pc, #392]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003828:	e015      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fa95 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800383a:	e00c      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3320      	adds	r3, #32
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fb7c 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800384c:	e003      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	74fb      	strb	r3, [r7, #19]
      break;
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800385e:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003872:	e001      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a0 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00d      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038bc:	4a3b      	ldr	r2, [pc, #236]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038c8:	f7fd fa0c 	bl	8000ce4 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038ce:	e009      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd fa08 	bl	8000ce4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d902      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	74fb      	strb	r3, [r7, #19]
        break;
 80038e2:	e005      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ef      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d15c      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01f      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	d019      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003920:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fd f9c7 	bl	8000ce4 <HAL_GetTick>
 8003956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003958:	e00b      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fd f9c3 	bl	8000ce4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d902      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	74fb      	strb	r3, [r7, #19]
            break;
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ec      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003986:	4908      	ldr	r1, [pc, #32]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800399e:	e009      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
 80039a4:	e006      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	7c7b      	ldrb	r3, [r7, #17]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4aa6      	ldr	r2, [pc, #664]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039bc:	4ba5      	ldr	r3, [pc, #660]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d2:	49a0      	ldr	r1, [pc, #640]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039d4:	4b9f      	ldr	r3, [pc, #636]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f4:	4997      	ldr	r1, [pc, #604]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039f6:	4b97      	ldr	r3, [pc, #604]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 020c 	bic.w	r2, r3, #12
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a16:	498f      	ldr	r1, [pc, #572]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a18:	4b8e      	ldr	r3, [pc, #568]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a38:	4986      	ldr	r1, [pc, #536]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a3a:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5a:	497e      	ldr	r1, [pc, #504]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a5c:	4b7d      	ldr	r3, [pc, #500]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a7c:	4975      	ldr	r1, [pc, #468]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a7e:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9e:	496d      	ldr	r1, [pc, #436]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ac0:	4964      	ldr	r1, [pc, #400]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac2:	4b64      	ldr	r3, [pc, #400]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae2:	495c      	ldr	r1, [pc, #368]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae4:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b04:	4953      	ldr	r1, [pc, #332]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b06:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b26:	494b      	ldr	r1, [pc, #300]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b48:	4942      	ldr	r1, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b4a:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b50:	f023 0203 	bic.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b6a:	493a      	ldr	r1, [pc, #232]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b88:	d106      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8a:	4a32      	ldr	r2, [pc, #200]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b94:	60d3      	str	r3, [r2, #12]
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f8d9 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bc8:	4922      	ldr	r1, [pc, #136]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f8aa 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c26:	490b      	ldr	r1, [pc, #44]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d108      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c46:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c50:	60d3      	str	r3, [r2, #12]
 8003c52:	e013      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f879 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02f      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c88:	492c      	ldr	r1, [pc, #176]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f856 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d014      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	74bb      	strb	r3, [r7, #18]
 8003cc2:	e011      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f933 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cf4:	4911      	ldr	r1, [pc, #68]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d18:	4908      	ldr	r1, [pc, #32]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d44:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6e:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d7a:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d10d      	bne.n	8003da6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
       ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d044      	beq.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e041      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d00c      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x6e>
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d013      	beq.n	8003de0 <RCCEx_PLLSAI1_Config+0x80>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d120      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11d      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dcc:	e01a      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e013      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10f      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dfc:	e006      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e004      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e14:	4849      	ldr	r0, [pc, #292]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e16:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d17c      	bne.n	8003f30 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e36:	4a41      	ldr	r2, [pc, #260]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e38:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fc ff4f 	bl	8000ce4 <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e48:	e009      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e4a:	f7fc ff4b 	bl	8000ce4 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d902      	bls.n	8003e5e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e5c:	e005      	b.n	8003e6a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d15f      	bne.n	8003f30 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d110      	bne.n	8003e98 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e76:	4831      	ldr	r0, [pc, #196]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	06d2      	lsls	r2, r2, #27
 8003e90:	430a      	orrs	r2, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	6103      	str	r3, [r0, #16]
 8003e96:	e027      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d112      	bne.n	8003ec4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e9e:	4827      	ldr	r0, [pc, #156]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6912      	ldr	r2, [r2, #16]
 8003eb6:	0852      	lsrs	r2, r2, #1
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	0552      	lsls	r2, r2, #21
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	6103      	str	r3, [r0, #16]
 8003ec2:	e011      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec4:	481d      	ldr	r0, [pc, #116]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ece:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6892      	ldr	r2, [r2, #8]
 8003ed6:	0211      	lsls	r1, r2, #8
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6952      	ldr	r2, [r2, #20]
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0652      	lsls	r2, r2, #25
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fc fef6 	bl	8000ce4 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003efa:	e009      	b.n	8003f10 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003efc:	f7fc fef2 	bl	8000ce4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f0e:	e005      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f22:	4906      	ldr	r1, [pc, #24]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4e:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f5a:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10d      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
       ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d044      	beq.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	e041      	b.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00c      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x6e>
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d013      	beq.n	8003fc0 <RCCEx_PLLSAI2_Config+0x80>
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d120      	bne.n	8003fde <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9c:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11d      	bne.n	8003fe4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fac:	e01a      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fae:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbe:	e013      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fdc:	e006      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe2:	e004      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fec:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff4:	483e      	ldr	r0, [pc, #248]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	430b      	orrs	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d166      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004016:	4a36      	ldr	r2, [pc, #216]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fc fe5f 	bl	8000ce4 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004028:	e009      	b.n	800403e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800402a:	f7fc fe5b 	bl	8000ce4 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	73fb      	strb	r3, [r7, #15]
        break;
 800403c:	e005      	b.n	800404a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ef      	bne.n	800402a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d149      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d110      	bne.n	8004078 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004056:	4826      	ldr	r0, [pc, #152]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004060:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	06d2      	lsls	r2, r2, #27
 8004070:	430a      	orrs	r2, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	6143      	str	r3, [r0, #20]
 8004076:	e011      	b.n	800409c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004078:	481d      	ldr	r0, [pc, #116]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	0211      	lsls	r1, r2, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6912      	ldr	r2, [r2, #16]
 8004090:	0852      	lsrs	r2, r2, #1
 8004092:	3a01      	subs	r2, #1
 8004094:	0652      	lsls	r2, r2, #25
 8004096:	430a      	orrs	r2, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fc fe1c 	bl	8000ce4 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ae:	e009      	b.n	80040c4 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b0:	f7fc fe18 	bl	8000ce4 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	73fb      	strb	r3, [r7, #15]
          break;
 80040c2:	e005      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040d6:	4906      	ldr	r1, [pc, #24]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e040      	b.n	8004188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc fc5a 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8c0 	bl	80042b8 <UART_SetConfig>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e022      	b.n	8004188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb38 	bl	80047c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	6852      	ldr	r2, [r2, #4]
 800415a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	6892      	ldr	r2, [r2, #8]
 800416a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fbbf 	bl	8004904 <UART_CheckIdleState>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	f040 8082 	bne.w	80042ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_Transmit+0x26>
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07a      	b.n	80042b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Transmit+0x38>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e073      	b.n	80042b0 <HAL_UART_Transmit+0x120>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041de:	f7fc fd81 	bl	8000ce4 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d108      	bne.n	8004210 <HAL_UART_Transmit+0x80>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e003      	b.n	8004218 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004220:	e02d      	b.n	800427e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fbb2 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e039      	b.n	80042b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	8812      	ldrh	r2, [r2, #0]
 800424a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424e:	b292      	uxth	r2, r2
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3302      	adds	r3, #2
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e008      	b.n	800426c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	b292      	uxth	r2, r2
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3301      	adds	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1cb      	bne.n	8004222 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	2140      	movs	r1, #64	; 0x40
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fb7e 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e005      	b.n	80042b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	4bac      	ldr	r3, [pc, #688]	; (8004598 <UART_SetConfig+0x2e0>)
 80042e8:	400b      	ands	r3, r1
 80042ea:	69f9      	ldr	r1, [r7, #28]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4aa2      	ldr	r2, [pc, #648]	; (800459c <UART_SetConfig+0x2e4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	4313      	orrs	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	6892      	ldr	r2, [r2, #8]
 800432a:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a99      	ldr	r2, [pc, #612]	; (80045a0 <UART_SetConfig+0x2e8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d122      	bne.n	8004384 <UART_SetConfig+0xcc>
 800433e:	4b99      	ldr	r3, [pc, #612]	; (80045a4 <UART_SetConfig+0x2ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b03      	cmp	r3, #3
 800434a:	d817      	bhi.n	800437c <UART_SetConfig+0xc4>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x9c>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	08004371 	.word	0x08004371
 800435c:	0800436b 	.word	0x0800436b
 8004360:	08004377 	.word	0x08004377
 8004364:	2301      	movs	r3, #1
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e0e8      	b.n	800453c <UART_SetConfig+0x284>
 800436a:	2302      	movs	r3, #2
 800436c:	76fb      	strb	r3, [r7, #27]
 800436e:	e0e5      	b.n	800453c <UART_SetConfig+0x284>
 8004370:	2304      	movs	r3, #4
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e0e2      	b.n	800453c <UART_SetConfig+0x284>
 8004376:	2308      	movs	r3, #8
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e0df      	b.n	800453c <UART_SetConfig+0x284>
 800437c:	2310      	movs	r3, #16
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	bf00      	nop
 8004382:	e0db      	b.n	800453c <UART_SetConfig+0x284>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a87      	ldr	r2, [pc, #540]	; (80045a8 <UART_SetConfig+0x2f0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d134      	bne.n	80043f8 <UART_SetConfig+0x140>
 800438e:	4b85      	ldr	r3, [pc, #532]	; (80045a4 <UART_SetConfig+0x2ec>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d829      	bhi.n	80043f0 <UART_SetConfig+0x138>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0xec>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043d9 	.word	0x080043d9
 80043a8:	080043f1 	.word	0x080043f1
 80043ac:	080043f1 	.word	0x080043f1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043e5 	.word	0x080043e5
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043df 	.word	0x080043df
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f1 	.word	0x080043f1
 80043d4:	080043eb 	.word	0x080043eb
 80043d8:	2300      	movs	r3, #0
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e0ae      	b.n	800453c <UART_SetConfig+0x284>
 80043de:	2302      	movs	r3, #2
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e0ab      	b.n	800453c <UART_SetConfig+0x284>
 80043e4:	2304      	movs	r3, #4
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e0a8      	b.n	800453c <UART_SetConfig+0x284>
 80043ea:	2308      	movs	r3, #8
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e0a5      	b.n	800453c <UART_SetConfig+0x284>
 80043f0:	2310      	movs	r3, #16
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	bf00      	nop
 80043f6:	e0a1      	b.n	800453c <UART_SetConfig+0x284>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a6b      	ldr	r2, [pc, #428]	; (80045ac <UART_SetConfig+0x2f4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d120      	bne.n	8004444 <UART_SetConfig+0x18c>
 8004402:	4b68      	ldr	r3, [pc, #416]	; (80045a4 <UART_SetConfig+0x2ec>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800440c:	2b10      	cmp	r3, #16
 800440e:	d00f      	beq.n	8004430 <UART_SetConfig+0x178>
 8004410:	2b10      	cmp	r3, #16
 8004412:	d802      	bhi.n	800441a <UART_SetConfig+0x162>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <UART_SetConfig+0x16c>
 8004418:	e010      	b.n	800443c <UART_SetConfig+0x184>
 800441a:	2b20      	cmp	r3, #32
 800441c:	d005      	beq.n	800442a <UART_SetConfig+0x172>
 800441e:	2b30      	cmp	r3, #48	; 0x30
 8004420:	d009      	beq.n	8004436 <UART_SetConfig+0x17e>
 8004422:	e00b      	b.n	800443c <UART_SetConfig+0x184>
 8004424:	2300      	movs	r3, #0
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	e088      	b.n	800453c <UART_SetConfig+0x284>
 800442a:	2302      	movs	r3, #2
 800442c:	76fb      	strb	r3, [r7, #27]
 800442e:	e085      	b.n	800453c <UART_SetConfig+0x284>
 8004430:	2304      	movs	r3, #4
 8004432:	76fb      	strb	r3, [r7, #27]
 8004434:	e082      	b.n	800453c <UART_SetConfig+0x284>
 8004436:	2308      	movs	r3, #8
 8004438:	76fb      	strb	r3, [r7, #27]
 800443a:	e07f      	b.n	800453c <UART_SetConfig+0x284>
 800443c:	2310      	movs	r3, #16
 800443e:	76fb      	strb	r3, [r7, #27]
 8004440:	bf00      	nop
 8004442:	e07b      	b.n	800453c <UART_SetConfig+0x284>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a59      	ldr	r2, [pc, #356]	; (80045b0 <UART_SetConfig+0x2f8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d120      	bne.n	8004490 <UART_SetConfig+0x1d8>
 800444e:	4b55      	ldr	r3, [pc, #340]	; (80045a4 <UART_SetConfig+0x2ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d00f      	beq.n	800447c <UART_SetConfig+0x1c4>
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d802      	bhi.n	8004466 <UART_SetConfig+0x1ae>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <UART_SetConfig+0x1b8>
 8004464:	e010      	b.n	8004488 <UART_SetConfig+0x1d0>
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d005      	beq.n	8004476 <UART_SetConfig+0x1be>
 800446a:	2bc0      	cmp	r3, #192	; 0xc0
 800446c:	d009      	beq.n	8004482 <UART_SetConfig+0x1ca>
 800446e:	e00b      	b.n	8004488 <UART_SetConfig+0x1d0>
 8004470:	2300      	movs	r3, #0
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	e062      	b.n	800453c <UART_SetConfig+0x284>
 8004476:	2302      	movs	r3, #2
 8004478:	76fb      	strb	r3, [r7, #27]
 800447a:	e05f      	b.n	800453c <UART_SetConfig+0x284>
 800447c:	2304      	movs	r3, #4
 800447e:	76fb      	strb	r3, [r7, #27]
 8004480:	e05c      	b.n	800453c <UART_SetConfig+0x284>
 8004482:	2308      	movs	r3, #8
 8004484:	76fb      	strb	r3, [r7, #27]
 8004486:	e059      	b.n	800453c <UART_SetConfig+0x284>
 8004488:	2310      	movs	r3, #16
 800448a:	76fb      	strb	r3, [r7, #27]
 800448c:	bf00      	nop
 800448e:	e055      	b.n	800453c <UART_SetConfig+0x284>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a47      	ldr	r2, [pc, #284]	; (80045b4 <UART_SetConfig+0x2fc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d124      	bne.n	80044e4 <UART_SetConfig+0x22c>
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <UART_SetConfig+0x2ec>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a8:	d012      	beq.n	80044d0 <UART_SetConfig+0x218>
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	d802      	bhi.n	80044b6 <UART_SetConfig+0x1fe>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <UART_SetConfig+0x20c>
 80044b4:	e012      	b.n	80044dc <UART_SetConfig+0x224>
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ba:	d006      	beq.n	80044ca <UART_SetConfig+0x212>
 80044bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c0:	d009      	beq.n	80044d6 <UART_SetConfig+0x21e>
 80044c2:	e00b      	b.n	80044dc <UART_SetConfig+0x224>
 80044c4:	2300      	movs	r3, #0
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e038      	b.n	800453c <UART_SetConfig+0x284>
 80044ca:	2302      	movs	r3, #2
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e035      	b.n	800453c <UART_SetConfig+0x284>
 80044d0:	2304      	movs	r3, #4
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	e032      	b.n	800453c <UART_SetConfig+0x284>
 80044d6:	2308      	movs	r3, #8
 80044d8:	76fb      	strb	r3, [r7, #27]
 80044da:	e02f      	b.n	800453c <UART_SetConfig+0x284>
 80044dc:	2310      	movs	r3, #16
 80044de:	76fb      	strb	r3, [r7, #27]
 80044e0:	bf00      	nop
 80044e2:	e02b      	b.n	800453c <UART_SetConfig+0x284>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <UART_SetConfig+0x2e4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d124      	bne.n	8004538 <UART_SetConfig+0x280>
 80044ee:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <UART_SetConfig+0x2ec>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d012      	beq.n	8004524 <UART_SetConfig+0x26c>
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004502:	d802      	bhi.n	800450a <UART_SetConfig+0x252>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <UART_SetConfig+0x260>
 8004508:	e012      	b.n	8004530 <UART_SetConfig+0x278>
 800450a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450e:	d006      	beq.n	800451e <UART_SetConfig+0x266>
 8004510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004514:	d009      	beq.n	800452a <UART_SetConfig+0x272>
 8004516:	e00b      	b.n	8004530 <UART_SetConfig+0x278>
 8004518:	2300      	movs	r3, #0
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e00e      	b.n	800453c <UART_SetConfig+0x284>
 800451e:	2302      	movs	r3, #2
 8004520:	76fb      	strb	r3, [r7, #27]
 8004522:	e00b      	b.n	800453c <UART_SetConfig+0x284>
 8004524:	2304      	movs	r3, #4
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	e008      	b.n	800453c <UART_SetConfig+0x284>
 800452a:	2308      	movs	r3, #8
 800452c:	76fb      	strb	r3, [r7, #27]
 800452e:	e005      	b.n	800453c <UART_SetConfig+0x284>
 8004530:	2310      	movs	r3, #16
 8004532:	76fb      	strb	r3, [r7, #27]
 8004534:	bf00      	nop
 8004536:	e001      	b.n	800453c <UART_SetConfig+0x284>
 8004538:	2310      	movs	r3, #16
 800453a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a16      	ldr	r2, [pc, #88]	; (800459c <UART_SetConfig+0x2e4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f040 8080 	bne.w	8004648 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004548:	7efb      	ldrb	r3, [r7, #27]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d836      	bhi.n	80045bc <UART_SetConfig+0x304>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x29c>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004579 	.word	0x08004579
 8004558:	080045bd 	.word	0x080045bd
 800455c:	08004581 	.word	0x08004581
 8004560:	080045bd 	.word	0x080045bd
 8004564:	08004587 	.word	0x08004587
 8004568:	080045bd 	.word	0x080045bd
 800456c:	080045bd 	.word	0x080045bd
 8004570:	080045bd 	.word	0x080045bd
 8004574:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7ff f85e 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 800457c:	6178      	str	r0, [r7, #20]
        break;
 800457e:	e022      	b.n	80045c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x300>)
 8004582:	617b      	str	r3, [r7, #20]
        break;
 8004584:	e01f      	b.n	80045c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe ffc1 	bl	800350c <HAL_RCC_GetSysClockFreq>
 800458a:	6178      	str	r0, [r7, #20]
        break;
 800458c:	e01b      	b.n	80045c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	617b      	str	r3, [r7, #20]
        break;
 8004594:	e017      	b.n	80045c6 <UART_SetConfig+0x30e>
 8004596:	bf00      	nop
 8004598:	efff69f3 	.word	0xefff69f3
 800459c:	40008000 	.word	0x40008000
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40004400 	.word	0x40004400
 80045ac:	40004800 	.word	0x40004800
 80045b0:	40004c00 	.word	0x40004c00
 80045b4:	40005000 	.word	0x40005000
 80045b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	76bb      	strb	r3, [r7, #26]
        break;
 80045c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80eb 	beq.w	80047a4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	441a      	add	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d805      	bhi.n	80045ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d202      	bcs.n	80045f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	76bb      	strb	r3, [r7, #26]
 80045ee:	e0d9      	b.n	80047a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	021d      	lsls	r5, r3, #8
 80045fa:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80045fe:	0214      	lsls	r4, r2, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	18a0      	adds	r0, r4, r2
 800460e:	eb45 0103 	adc.w	r1, r5, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f04f 0400 	mov.w	r4, #0
 800461a:	461a      	mov	r2, r3
 800461c:	4623      	mov	r3, r4
 800461e:	f7fb fe3f 	bl	80002a0 <__aeabi_uldivmod>
 8004622:	4603      	mov	r3, r0
 8004624:	460c      	mov	r4, r1
 8004626:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462e:	d308      	bcc.n	8004642 <UART_SetConfig+0x38a>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004636:	d204      	bcs.n	8004642 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e0b0      	b.n	80047a4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	76bb      	strb	r3, [r7, #26]
 8004646:	e0ad      	b.n	80047a4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	d15b      	bne.n	800470a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004652:	7efb      	ldrb	r3, [r7, #27]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d828      	bhi.n	80046aa <UART_SetConfig+0x3f2>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0x3a8>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004685 	.word	0x08004685
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004695 	.word	0x08004695
 800466c:	080046ab 	.word	0x080046ab
 8004670:	0800469b 	.word	0x0800469b
 8004674:	080046ab 	.word	0x080046ab
 8004678:	080046ab 	.word	0x080046ab
 800467c:	080046ab 	.word	0x080046ab
 8004680:	080046a3 	.word	0x080046a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004684:	f7fe ffd8 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004688:	6178      	str	r0, [r7, #20]
        break;
 800468a:	e013      	b.n	80046b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe ffea 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004690:	6178      	str	r0, [r7, #20]
        break;
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004694:	4b49      	ldr	r3, [pc, #292]	; (80047bc <UART_SetConfig+0x504>)
 8004696:	617b      	str	r3, [r7, #20]
        break;
 8004698:	e00c      	b.n	80046b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469a:	f7fe ff37 	bl	800350c <HAL_RCC_GetSysClockFreq>
 800469e:	6178      	str	r0, [r7, #20]
        break;
 80046a0:	e008      	b.n	80046b4 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a6:	617b      	str	r3, [r7, #20]
        break;
 80046a8:	e004      	b.n	80046b4 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	76bb      	strb	r3, [r7, #26]
        break;
 80046b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d074      	beq.n	80047a4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005a      	lsls	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d916      	bls.n	8004704 <UART_SetConfig+0x44c>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d212      	bcs.n	8004704 <UART_SetConfig+0x44c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f023 030f 	bic.w	r3, r3, #15
 80046e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	89fa      	ldrh	r2, [r7, #14]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	e04f      	b.n	80047a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	76bb      	strb	r3, [r7, #26]
 8004708:	e04c      	b.n	80047a4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800470a:	7efb      	ldrb	r3, [r7, #27]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d828      	bhi.n	8004762 <UART_SetConfig+0x4aa>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0x460>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	08004763 	.word	0x08004763
 8004728:	08004753 	.word	0x08004753
 800472c:	08004763 	.word	0x08004763
 8004730:	08004763 	.word	0x08004763
 8004734:	08004763 	.word	0x08004763
 8004738:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7fe ff7c 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004740:	6178      	str	r0, [r7, #20]
        break;
 8004742:	e013      	b.n	800476c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe ff8e 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004748:	6178      	str	r0, [r7, #20]
        break;
 800474a:	e00f      	b.n	800476c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <UART_SetConfig+0x504>)
 800474e:	617b      	str	r3, [r7, #20]
        break;
 8004750:	e00c      	b.n	800476c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fedb 	bl	800350c <HAL_RCC_GetSysClockFreq>
 8004756:	6178      	str	r0, [r7, #20]
        break;
 8004758:	e008      	b.n	800476c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	617b      	str	r3, [r7, #20]
        break;
 8004760:	e004      	b.n	800476c <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	76bb      	strb	r3, [r7, #26]
        break;
 800476a:	bf00      	nop
    }

    if (pclk != 0U)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d018      	beq.n	80047a4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	085a      	lsrs	r2, r3, #1
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b0f      	cmp	r3, #15
 800478a:	d909      	bls.n	80047a0 <UART_SetConfig+0x4e8>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d205      	bcs.n	80047a0 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	b292      	uxth	r2, r2
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	e001      	b.n	80047a4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	00f42400 	.word	0x00f42400

080047c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6852      	ldr	r2, [r2, #4]
 8004844:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800484c:	430a      	orrs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	6892      	ldr	r2, [r2, #8]
 8004866:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800486e:	430a      	orrs	r2, r1
 8004870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01a      	beq.n	80048d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	6852      	ldr	r2, [r2, #4]
 80048aa:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048be:	d10a      	bne.n	80048d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	6852      	ldr	r2, [r2, #4]
 80048ca:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	6852      	ldr	r2, [r2, #4]
 80048ec:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af02      	add	r7, sp, #8
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004914:	f7fc f9e6 	bl	8000ce4 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d10e      	bne.n	8004946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f82d 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e023      	b.n	800498e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d10e      	bne.n	8004972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f817 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e00d      	b.n	800498e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b09c      	sub	sp, #112	; 0x70
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	e0a5      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	f000 80a1 	beq.w	8004af4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fc f997 	bl	8000ce4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049be:	429a      	cmp	r2, r3
 80049c0:	d802      	bhi.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d13e      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049dc:	667b      	str	r3, [r7, #100]	; 0x64
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e6      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	663b      	str	r3, [r7, #96]	; 0x60
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e5      	bne.n	80049fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e067      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d04f      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d147      	bne.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e6      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ac0:	623a      	str	r2, [r7, #32]
 8004ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	69f9      	ldr	r1, [r7, #28]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e010      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	401a      	ands	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f43f af4a 	beq.w	80049a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3770      	adds	r7, #112	; 0x70
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b1e:	b084      	sub	sp, #16
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	f107 001c 	add.w	r0, r7, #28
 8004b2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f99f 	bl	8004e80 <USB_CoreReset>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
 8004b58:	e005      	b.n	8004b66 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b72:	b004      	add	sp, #16
 8004b74:	4770      	bx	lr

08004b76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 0201 	bic.w	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d115      	bne.n	8004c08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7fc f887 	bl	8000cfc <HAL_Delay>
      ms++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f935 	bl	8004e64 <USB_GetMode>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d01e      	beq.n	8004c3e <USB_SetCurrentMode+0x84>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b31      	cmp	r3, #49	; 0x31
 8004c04:	d9f0      	bls.n	8004be8 <USB_SetCurrentMode+0x2e>
 8004c06:	e01a      	b.n	8004c3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d115      	bne.n	8004c3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fc f86e 	bl	8000cfc <HAL_Delay>
      ms++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f91c 	bl	8004e64 <USB_GetMode>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <USB_SetCurrentMode+0x84>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b31      	cmp	r3, #49	; 0x31
 8004c36:	d9f0      	bls.n	8004c1a <USB_SetCurrentMode+0x60>
 8004c38:	e001      	b.n	8004c3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e005      	b.n	8004c4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b32      	cmp	r3, #50	; 0x32
 8004c42:	d101      	bne.n	8004c48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <USB_FlushTxFifo+0x64>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e01b      	b.n	8004cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	daf2      	bge.n	8004c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	019b      	lsls	r3, r3, #6
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <USB_FlushTxFifo+0x64>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e006      	b.n	8004cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d0f0      	beq.n	8004c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	00030d40 	.word	0x00030d40

08004cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <USB_FlushRxFifo+0x5c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e018      	b.n	8004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	daf2      	bge.n	8004cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <USB_FlushRxFifo+0x5c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e006      	b.n	8004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d0f0      	beq.n	8004cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	00030d40 	.word	0x00030d40

08004d1c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	71fb      	strb	r3, [r7, #7]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004d3a:	88bb      	ldrh	r3, [r7, #4]
 8004d3c:	3303      	adds	r3, #3
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e018      	b.n	8004d7a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	031a      	lsls	r2, r3, #12
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	461a      	mov	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3e2      	bcc.n	8004d48 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3724      	adds	r7, #36	; 0x24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b08b      	sub	sp, #44	; 0x2c
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	089b      	lsrs	r3, r3, #2
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	e014      	b.n	8004de6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	3301      	adds	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3301      	adds	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3301      	adds	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3e6      	bcc.n	8004dbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dee:	8bfb      	ldrh	r3, [r7, #30]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01d      	beq.n	8004e30 <USB_ReadPacket+0xa0>
  {
    i = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	701a      	strb	r2, [r3, #0]
      i++;
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	3301      	adds	r3, #1
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e2a:	8bfb      	ldrh	r3, [r7, #30]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ea      	bne.n	8004e06 <USB_ReadPacket+0x76>
  }

  return ((void *)pDest);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	372c      	adds	r7, #44	; 0x2c
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0301 	and.w	r3, r3, #1
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <USB_CoreReset+0x64>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e01b      	b.n	8004ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	daf2      	bge.n	8004e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <USB_CoreReset+0x64>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e006      	b.n	8004ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d0f0      	beq.n	8004eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	00030d40 	.word	0x00030d40

08004ee8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee8:	b084      	sub	sp, #16
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f3c:	2110      	movs	r1, #16
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe88 	bl	8004c54 <USB_FlushTxFifo>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <USB_HostInit+0x66>
  {
    ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff feb4 	bl	8004cbc <USB_FlushRxFifo>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <USB_HostInit+0x76>
  {
    ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e015      	b.n	8004f90 <USB_HostInit+0xa8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f84:	461a      	mov	r2, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d8e5      	bhi.n	8004f64 <USB_HostInit+0x7c>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2280      	movs	r2, #128	; 0x80
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <USB_HostInit+0xfc>)
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <USB_HostInit+0x100>)
 8004fb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 0210 	orr.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <USB_HostInit+0x104>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fde:	b004      	add	sp, #16
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	00600080 	.word	0x00600080
 8004fe8:	004000e0 	.word	0x004000e0
 8004fec:	a3200008 	.word	0xa3200008

08004ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501c:	4619      	mov	r1, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503c:	461a      	mov	r2, r3
 800503e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005042:	6053      	str	r3, [r2, #4]
 8005044:	e009      	b.n	800505a <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d106      	bne.n	800505a <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005052:	461a      	mov	r2, r3
 8005054:	f241 7370 	movw	r3, #6000	; 0x1770
 8005058:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005088:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800509a:	2064      	movs	r0, #100	; 0x64
 800509c:	f7fb fe2e 	bl	8000cfc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050a6:	461a      	mov	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80050b0:	200a      	movs	r0, #10
 80050b2:	f7fb fe23 	bl	8000cfc <HAL_Delay>

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <USB_DriveVbus+0x46>
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050fc:	461a      	mov	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005104:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800510c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005110:	d10a      	bne.n	8005128 <USB_DriveVbus+0x68>
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800511e:	461a      	mov	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005126:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c5b      	lsrs	r3, r3, #17
 8005154:	f003 0303 	and.w	r3, r3, #3
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	b29b      	uxth	r3, r3
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	70fb      	strb	r3, [r7, #3]
 800519a:	460b      	mov	r3, r1
 800519c:	70bb      	strb	r3, [r7, #2]
 800519e:	4613      	mov	r3, r2
 80051a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	461a      	mov	r2, r3
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d86a      	bhi.n	800529c <USB_HC_Init+0x114>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <USB_HC_Init+0x44>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	0800525d 	.word	0x0800525d
 80051d4:	080051dd 	.word	0x080051dd
 80051d8:	0800521d 	.word	0x0800521d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80051ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da54      	bge.n	80052a2 <USB_HC_Init+0x11a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	4619      	mov	r1, r3
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005218:	60cb      	str	r3, [r1, #12]
      }
      break;
 800521a:	e042      	b.n	80052a2 <USB_HC_Init+0x11a>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	f240 639d 	movw	r3, #1693	; 0x69d
 800522e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	da36      	bge.n	80052a6 <USB_HC_Init+0x11e>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	4619      	mov	r1, r3
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005258:	60cb      	str	r3, [r1, #12]
      }

      break;
 800525a:	e024      	b.n	80052a6 <USB_HC_Init+0x11e>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	f240 2325 	movw	r3, #549	; 0x225
 800526e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005270:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005274:	2b00      	cmp	r3, #0
 8005276:	da18      	bge.n	80052aa <USB_HC_Init+0x122>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	4619      	mov	r1, r3
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005298:	60cb      	str	r3, [r1, #12]
      }
      break;
 800529a:	e006      	b.n	80052aa <USB_HC_Init+0x122>

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
      break;
 80052a0:	e004      	b.n	80052ac <USB_HC_Init+0x124>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <USB_HC_Init+0x124>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <USB_HC_Init+0x124>
      break;
 80052aa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b8:	4619      	mov	r1, r3
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	60cb      	str	r3, [r1, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d4:	4618      	mov	r0, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da03      	bge.n	800530a <USB_HC_Init+0x182>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e001      	b.n	800530e <USB_HC_Init+0x186>
  }
  else
  {
    HCcharEpDir = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff11 	bl	8005136 <USB_GetHostSpeed>
 8005314:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800531a:	2b02      	cmp	r3, #2
 800531c:	d106      	bne.n	800532c <USB_HC_Init+0x1a4>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d003      	beq.n	800532c <USB_HC_Init+0x1a4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e001      	b.n	8005330 <USB_HC_Init+0x1a8>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	4619      	mov	r1, r3
 800533e:	787b      	ldrb	r3, [r7, #1]
 8005340:	059b      	lsls	r3, r3, #22
 8005342:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005346:	78bb      	ldrb	r3, [r7, #2]
 8005348:	02db      	lsls	r3, r3, #11
 800534a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800534e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005350:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005354:	049b      	lsls	r3, r3, #18
 8005356:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800535a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800535c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800535e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005362:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	431a      	orrs	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800536c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800536e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005372:	2b03      	cmp	r3, #3
 8005374:	d003      	beq.n	800537e <USB_HC_Init+0x1f6>
 8005376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d110      	bne.n	80053a0 <USB_HC_Init+0x218>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	4619      	mov	r1, r3
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539e:	600b      	str	r3, [r1, #0]
  }

  return ret;
 80053a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053c4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d018      	beq.n	8005400 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	8912      	ldrh	r2, [r2, #8]
 80053d6:	4413      	add	r3, r2
 80053d8:	3b01      	subs	r3, #1
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	8912      	ldrh	r2, [r2, #8]
 80053de:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80053e4:	8bfa      	ldrh	r2, [r7, #30]
 80053e6:	8a7b      	ldrh	r3, [r7, #18]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d90b      	bls.n	8005404 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053f0:	8bfb      	ldrh	r3, [r7, #30]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	8912      	ldrh	r2, [r2, #8]
 80053f6:	fb02 f203 	mul.w	r2, r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e001      	b.n	8005404 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	78db      	ldrb	r3, [r3, #3]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800540c:	8bfb      	ldrh	r3, [r7, #30]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	8912      	ldrh	r2, [r2, #8]
 8005412:	fb02 f203 	mul.w	r2, r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	611a      	str	r2, [r3, #16]
 800541a:	e003      	b.n	8005424 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	4618      	mov	r0, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800543a:	8bfb      	ldrh	r3, [r7, #30]
 800543c:	04d9      	lsls	r1, r3, #19
 800543e:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <USB_HC_StartXfer+0x1f4>)
 8005440:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005442:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	7a9b      	ldrb	r3, [r3, #10]
 8005448:	075b      	lsls	r3, r3, #29
 800544a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800544e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005450:	6103      	str	r3, [r0, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	4619      	mov	r1, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800548a:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	4619      	mov	r1, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	7c7b      	ldrb	r3, [r7, #17]
 80054aa:	075b      	lsls	r3, r3, #29
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c6:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <USB_HC_StartXfer+0x12e>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	e003      	b.n	80054e2 <USB_HC_StartXfer+0x136>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054e0:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d148      	bne.n	8005596 <USB_HC_StartXfer+0x1ea>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d044      	beq.n	8005596 <USB_HC_StartXfer+0x1ea>
  {
    switch (hc->ep_type)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	79db      	ldrb	r3, [r3, #7]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d831      	bhi.n	8005578 <USB_HC_StartXfer+0x1cc>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <USB_HC_StartXfer+0x170>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	0800552d 	.word	0x0800552d
 8005520:	08005551 	.word	0x08005551
 8005524:	0800552d 	.word	0x0800552d
 8005528:	08005551 	.word	0x08005551
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	3303      	adds	r3, #3
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005536:	89fa      	ldrh	r2, [r7, #14]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	b29b      	uxth	r3, r3
 800553e:	429a      	cmp	r2, r3
 8005540:	d91c      	bls.n	800557c <USB_HC_StartXfer+0x1d0>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	619a      	str	r2, [r3, #24]
        }
        break;
 800554e:	e015      	b.n	800557c <USB_HC_StartXfer+0x1d0>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	3303      	adds	r3, #3
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800555a:	89fa      	ldrh	r2, [r7, #14]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	b29b      	uxth	r3, r3
 8005566:	429a      	cmp	r2, r3
 8005568:	d90a      	bls.n	8005580 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
        }
        break;
 8005576:	e003      	b.n	8005580 <USB_HC_StartXfer+0x1d4>

      default:
        break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <USB_HC_StartXfer+0x1d6>
        break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <USB_HC_StartXfer+0x1d6>
        break;
 8005580:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68d9      	ldr	r1, [r3, #12]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	785a      	ldrb	r2, [r3, #1]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	b29b      	uxth	r3, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fbc3 	bl	8004d1c <USB_WritePacket>
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	1ff80000 	.word	0x1ff80000

080055a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	b29b      	uxth	r3, r3
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b089      	sub	sp, #36	; 0x24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0c9b      	lsrs	r3, r3, #18
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	0fdb      	lsrs	r3, r3, #31
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d104      	bne.n	8005620 <USB_HC_Halt+0x5a>
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e0d0      	b.n	80057c2 <USB_HC_Halt+0x1fc>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <USB_HC_Halt+0x66>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d167      	bne.n	80056fc <USB_HC_Halt+0x136>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	4619      	mov	r1, r3
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564c:	600b      	str	r3, [r1, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 80b2 	bne.w	80057c0 <USB_HC_Halt+0x1fa>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d135      	bne.n	80056d4 <USB_HC_Halt+0x10e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	4619      	mov	r1, r3
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005688:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	4619      	mov	r1, r3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056aa:	600b      	str	r3, [r1, #0]
        do
        {
          count++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056b8:	d81e      	bhi.n	80056f8 <USB_HC_Halt+0x132>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d0:	d0ec      	beq.n	80056ac <USB_HC_Halt+0xe6>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056d2:	e075      	b.n	80057c0 <USB_HC_Halt+0x1fa>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	4619      	mov	r1, r3
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	600b      	str	r3, [r1, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056f6:	e063      	b.n	80057c0 <USB_HC_Halt+0x1fa>
            break;
 80056f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056fa:	e061      	b.n	80057c0 <USB_HC_Halt+0x1fa>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005708:	4619      	mov	r1, r3
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800571c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d135      	bne.n	800579a <USB_HC_Halt+0x1d4>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	4619      	mov	r1, r3
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800574e:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	4619      	mov	r1, r3
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005770:	600b      	str	r3, [r1, #0]
      do
      {
        count++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800577e:	d81e      	bhi.n	80057be <USB_HC_Halt+0x1f8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005796:	d0ec      	beq.n	8005772 <USB_HC_Halt+0x1ac>
 8005798:	e012      	b.n	80057c0 <USB_HC_Halt+0x1fa>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	4619      	mov	r1, r3
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057ba:	600b      	str	r3, [r1, #0]
 80057bc:	e000      	b.n	80057c0 <USB_HC_Halt+0x1fa>
          break;
 80057be:	bf00      	nop
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3724      	adds	r7, #36	; 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b088      	sub	sp, #32
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff f9d8 	bl	8004b98 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057e8:	2110      	movs	r1, #16
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fa32 	bl	8004c54 <USB_FlushTxFifo>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fa5e 	bl	8004cbc <USB_FlushRxFifo>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e01f      	b.n	8005850 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005826:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800582e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005836:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	461a      	mov	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3301      	adds	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b0f      	cmp	r3, #15
 8005854:	d9dc      	bls.n	8005810 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e034      	b.n	80058c6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005872:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800587a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005882:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	461a      	mov	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3301      	adds	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a2:	d80c      	bhi.n	80058be <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ba:	d0ec      	beq.n	8005896 <USB_StopHost+0xc8>
 80058bc:	e000      	b.n	80058c0 <USB_StopHost+0xf2>
        break;
 80058be:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b0f      	cmp	r3, #15
 80058ca:	d9c7      	bls.n	800585c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff f947 	bl	8004b76 <USB_EnableGlobalInt>

  return ret;
 80058e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b08b      	sub	sp, #44	; 0x2c
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005906:	7919      	ldrb	r1, [r3, #4]
 8005908:	23ff      	movs	r3, #255	; 0xff
 800590a:	2201      	movs	r2, #1
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fff9 	bl	8006904 <USBH_FindInterface>
 8005912:	4603      	mov	r3, r0
 8005914:	75bb      	strb	r3, [r7, #22]
  interface++;
 8005916:	7dbb      	ldrb	r3, [r7, #22]
 8005918:	3301      	adds	r3, #1
 800591a:	75bb      	strb	r3, [r7, #22]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800591c:	7dbb      	ldrb	r3, [r7, #22]
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	d002      	beq.n	8005928 <USBH_HID_InterfaceInit+0x34>
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d90f      	bls.n	8005948 <USBH_HID_InterfaceInit+0x54>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8005928:	48a6      	ldr	r0, [pc, #664]	; (8005bc4 <USBH_HID_InterfaceInit+0x2d0>)
 800592a:	f003 f809 	bl	8008940 <iprintf>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	48a3      	ldr	r0, [pc, #652]	; (8005bc8 <USBH_HID_InterfaceInit+0x2d4>)
 800593a:	f003 f801 	bl	8008940 <iprintf>
 800593e:	200a      	movs	r0, #10
 8005940:	f003 f816 	bl	8008970 <putchar>
    return USBH_FAIL;
 8005944:	2302      	movs	r3, #2
 8005946:	e138      	b.n	8005bba <USBH_HID_InterfaceInit+0x2c6>
  }

  status = USBH_SelectInterface(phost, interface);
 8005948:	7dbb      	ldrb	r3, [r7, #22]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 ff71 	bl	8006834 <USBH_SelectInterface>
 8005952:	4603      	mov	r3, r0
 8005954:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005956:	7d7b      	ldrb	r3, [r7, #21]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USBH_HID_InterfaceInit+0x6c>
  {
    return USBH_FAIL;
 800595c:	2302      	movs	r3, #2
 800595e:	e12c      	b.n	8005bba <USBH_HID_InterfaceInit+0x2c6>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005966:	2034      	movs	r0, #52	; 0x34
 8005968:	f002 ff26 	bl	80087b8 <malloc>
 800596c:	4603      	mov	r3, r0
 800596e:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <USBH_HID_InterfaceInit+0xa2>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8005980:	4890      	ldr	r0, [pc, #576]	; (8005bc4 <USBH_HID_InterfaceInit+0x2d0>)
 8005982:	f002 ffdd 	bl	8008940 <iprintf>
 8005986:	4891      	ldr	r0, [pc, #580]	; (8005bcc <USBH_HID_InterfaceInit+0x2d8>)
 8005988:	f002 ffda 	bl	8008940 <iprintf>
 800598c:	200a      	movs	r0, #10
 800598e:	f002 ffef 	bl	8008970 <putchar>
    return USBH_FAIL;
 8005992:	2302      	movs	r3, #2
 8005994:	e111      	b.n	8005bba <USBH_HID_InterfaceInit+0x2c6>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005996:	2234      	movs	r2, #52	; 0x34
 8005998:	2100      	movs	r1, #0
 800599a:	6938      	ldr	r0, [r7, #16]
 800599c:	f002 ff1c 	bl	80087d8 <memset>

  HID_Handle->state = HID_ERROR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2207      	movs	r2, #7
 80059a4:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80059a6:	7dbb      	ldrb	r3, [r7, #22]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	211a      	movs	r1, #26
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 3349 	addw	r3, r3, #841	; 0x349
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d109      	bne.n	80059d0 <USBH_HID_InterfaceInit+0xdc>
  {
    USBH_UsrLog("KeyBoard device found!");
 80059bc:	4884      	ldr	r0, [pc, #528]	; (8005bd0 <USBH_HID_InterfaceInit+0x2dc>)
 80059be:	f002 ffbf 	bl	8008940 <iprintf>
 80059c2:	200a      	movs	r0, #10
 80059c4:	f002 ffd4 	bl	8008970 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4a82      	ldr	r2, [pc, #520]	; (8005bd4 <USBH_HID_InterfaceInit+0x2e0>)
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
 80059ce:	e031      	b.n	8005a34 <USBH_HID_InterfaceInit+0x140>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 80059d0:	7dbb      	ldrb	r3, [r7, #22]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	211a      	movs	r1, #26
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	f203 3349 	addw	r3, r3, #841	; 0x349
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d109      	bne.n	80059fa <USBH_HID_InterfaceInit+0x106>
  {
    USBH_UsrLog("Mouse device found!");
 80059e6:	487c      	ldr	r0, [pc, #496]	; (8005bd8 <USBH_HID_InterfaceInit+0x2e4>)
 80059e8:	f002 ffaa 	bl	8008940 <iprintf>
 80059ec:	200a      	movs	r0, #10
 80059ee:	f002 ffbf 	bl	8008970 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4a79      	ldr	r2, [pc, #484]	; (8005bdc <USBH_HID_InterfaceInit+0x2e8>)
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
 80059f8:	e01c      	b.n	8005a34 <USBH_HID_InterfaceInit+0x140>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_GAME_BOOT_CODE)
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	211a      	movs	r1, #26
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <USBH_HID_InterfaceInit+0x130>
  {
    USBH_UsrLog("Wheel device found!");
 8005a10:	4873      	ldr	r0, [pc, #460]	; (8005be0 <USBH_HID_InterfaceInit+0x2ec>)
 8005a12:	f002 ff95 	bl	8008940 <iprintf>
 8005a16:	200a      	movs	r0, #10
 8005a18:	f002 ffaa 	bl	8008970 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4a6d      	ldr	r2, [pc, #436]	; (8005bd4 <USBH_HID_InterfaceInit+0x2e0>)
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
 8005a22:	e007      	b.n	8005a34 <USBH_HID_InterfaceInit+0x140>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 8005a24:	486f      	ldr	r0, [pc, #444]	; (8005be4 <USBH_HID_InterfaceInit+0x2f0>)
 8005a26:	f002 ff8b 	bl	8008940 <iprintf>
 8005a2a:	200a      	movs	r0, #10
 8005a2c:	f002 ffa0 	bl	8008970 <putchar>
    return USBH_FAIL;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0c2      	b.n	8005bba <USBH_HID_InterfaceInit+0x2c6>
  }

  HID_Handle->state     = HID_INIT;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2200      	movs	r2, #0
 8005a38:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	211a      	movs	r1, #26
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a56:	7dbb      	ldrb	r3, [r7, #22]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	211a      	movs	r1, #26
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a66:	881a      	ldrh	r2, [r3, #0]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005a6c:	7dbb      	ldrb	r3, [r7, #22]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	211a      	movs	r1, #26
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	8b9b      	ldrh	r3, [r3, #28]
 8005a88:	2b09      	cmp	r3, #9
 8005a8a:	d802      	bhi.n	8005a92 <USBH_HID_InterfaceInit+0x19e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	220a      	movs	r2, #10
 8005a90:	839a      	strh	r2, [r3, #28]

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);
 8005a92:	7dbb      	ldrb	r3, [r7, #22]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	211a      	movs	r1, #26
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005aa2:	781b      	ldrb	r3, [r3, #0]
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	bf28      	it	cs
 8005aa8:	2302      	movcs	r3, #2
 8005aaa:	73fb      	strb	r3, [r7, #15]


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	75fb      	strb	r3, [r7, #23]
 8005ab0:	e07d      	b.n	8005bae <USBH_HID_InterfaceInit+0x2ba>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005ab2:	7dbb      	ldrb	r3, [r7, #22]
 8005ab4:	7df9      	ldrb	r1, [r7, #23]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	3101      	adds	r1, #1
 8005aba:	00c9      	lsls	r1, r1, #3
 8005abc:	201a      	movs	r0, #26
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da35      	bge.n	8005b3e <USBH_HID_InterfaceInit+0x24a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005ad2:	7dbb      	ldrb	r3, [r7, #22]
 8005ad4:	7df9      	ldrb	r1, [r7, #23]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	3101      	adds	r1, #1
 8005ada:	00c9      	lsls	r1, r1, #3
 8005adc:	201a      	movs	r0, #26
 8005ade:	fb00 f303 	mul.w	r3, r0, r3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f002 fa5d 	bl	8007fb6 <USBH_AllocPipe>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	7859      	ldrb	r1, [r3, #1]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	7918      	ldrb	r0, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	8b12      	ldrh	r2, [r2, #24]
 8005b1c:	9202      	str	r2, [sp, #8]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	9201      	str	r2, [sp, #4]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4623      	mov	r3, r4
 8005b26:	4602      	mov	r2, r0
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 fa15 	bl	8007f58 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2200      	movs	r2, #0
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f002 fd66 	bl	8008608 <USBH_LL_SetToggle>
 8005b3c:	e034      	b.n	8005ba8 <USBH_HID_InterfaceInit+0x2b4>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	7df9      	ldrb	r1, [r7, #23]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	3101      	adds	r1, #1
 8005b46:	00c9      	lsls	r1, r1, #3
 8005b48:	201a      	movs	r0, #26
 8005b4a:	fb00 f303 	mul.w	r3, r0, r3
 8005b4e:	440b      	add	r3, r1
 8005b50:	4413      	add	r3, r2
 8005b52:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fa27 	bl	8007fb6 <USBH_AllocPipe>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	7819      	ldrb	r1, [r3, #0]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	78d8      	ldrb	r0, [r3, #3]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	8b12      	ldrh	r2, [r2, #24]
 8005b88:	9202      	str	r2, [sp, #8]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	9201      	str	r2, [sp, #4]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4623      	mov	r3, r4
 8005b92:	4602      	mov	r2, r0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 f9df 	bl	8007f58 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 fd30 	bl	8008608 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	3301      	adds	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
 8005bae:	7dfa      	ldrb	r2, [r7, #23]
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f4ff af7d 	bcc.w	8005ab2 <USBH_HID_InterfaceInit+0x1be>
    }
  }

  return USBH_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	08009a30 	.word	0x08009a30
 8005bc8:	08009a3c 	.word	0x08009a3c
 8005bcc:	08009a64 	.word	0x08009a64
 8005bd0:	08009a8c 	.word	0x08009a8c
 8005bd4:	080062c1 	.word	0x080062c1
 8005bd8:	08009aa4 	.word	0x08009aa4
 8005bdc:	080064b9 	.word	0x080064b9
 8005be0:	08009ab8 	.word	0x08009ab8
 8005be4:	08009acc 	.word	0x08009acc

08005be8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f002 f9c4 	bl	8007f96 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f002 f9ef 	bl	8007ff8 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00e      	beq.n	8005c46 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f002 f9b1 	bl	8007f96 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f002 f9dc 	bl	8007ff8 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f002 fdb4 	bl	80087c8 <free>
    phost->pActiveClass->pData = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c66:	2200      	movs	r2, #0
 8005c68:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	795b      	ldrb	r3, [r3, #5]
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d872      	bhi.n	8005d7c <USBH_HID_ClassRequest+0x108>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <USBH_HID_ClassRequest+0x28>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cb5 	.word	0x08005cb5
 8005ca0:	08005d7d 	.word	0x08005d7d
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cb5 	.word	0x08005cb5
 8005cac:	08005d0b 	.word	0x08005d0b
 8005cb0:	08005d35 	.word	0x08005d35
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	331c      	adds	r3, #28
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 f9e5 	bl	8006090 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	715a      	strb	r2, [r3, #5]

    break;
 8005ccc:	e05d      	b.n	8005d8a <USBH_HID_ClassRequest+0x116>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f948 	bl	8005f6a <USBH_HID_GetHIDReportDescriptor>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8005cea:	e049      	b.n	8005d80 <USBH_HID_ClassRequest+0x10c>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d146      	bne.n	8005d80 <USBH_HID_ClassRequest+0x10c>
      USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 8005cf2:	4828      	ldr	r0, [pc, #160]	; (8005d94 <USBH_HID_ClassRequest+0x120>)
 8005cf4:	f002 fe24 	bl	8008940 <iprintf>
 8005cf8:	4827      	ldr	r0, [pc, #156]	; (8005d98 <USBH_HID_ClassRequest+0x124>)
 8005cfa:	f002 fe21 	bl	8008940 <iprintf>
 8005cfe:	200a      	movs	r0, #10
 8005d00:	f002 fe36 	bl	8008970 <putchar>
      status = USBH_FAIL;
 8005d04:	2302      	movs	r3, #2
 8005d06:	73fb      	strb	r3, [r7, #15]
    break;
 8005d08:	e03a      	b.n	8005d80 <USBH_HID_ClassRequest+0x10c>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f944 	bl	8005f9c <USBH_HID_SetIdle>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <USBH_HID_ClassRequest+0xb2>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2205      	movs	r2, #5
 8005d22:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8005d24:	e02e      	b.n	8005d84 <USBH_HID_ClassRequest+0x110>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d12b      	bne.n	8005d84 <USBH_HID_ClassRequest+0x110>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2205      	movs	r2, #5
 8005d30:	715a      	strb	r2, [r3, #5]
    break;
 8005d32:	e027      	b.n	8005d84 <USBH_HID_ClassRequest+0x110>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8005d34:	2100      	movs	r1, #0
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f984 	bl	8006044 <USBH_HID_SetProtocol>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <USBH_HID_ClassRequest+0xea>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d52:	2102      	movs	r1, #2
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
      status = USBH_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 8005d5c:	e014      	b.n	8005d88 <USBH_HID_ClassRequest+0x114>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d111      	bne.n	8005d88 <USBH_HID_ClassRequest+0x114>
      USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <USBH_HID_ClassRequest+0x120>)
 8005d66:	f002 fdeb 	bl	8008940 <iprintf>
 8005d6a:	480c      	ldr	r0, [pc, #48]	; (8005d9c <USBH_HID_ClassRequest+0x128>)
 8005d6c:	f002 fde8 	bl	8008940 <iprintf>
 8005d70:	200a      	movs	r0, #10
 8005d72:	f002 fdfd 	bl	8008970 <putchar>
      status = USBH_FAIL;
 8005d76:	2302      	movs	r3, #2
 8005d78:	73fb      	strb	r3, [r7, #15]
    break;
 8005d7a:	e005      	b.n	8005d88 <USBH_HID_ClassRequest+0x114>

  case HID_REQ_IDLE:
  default:
    break;
 8005d7c:	bf00      	nop
 8005d7e:	e004      	b.n	8005d8a <USBH_HID_ClassRequest+0x116>
    break;
 8005d80:	bf00      	nop
 8005d82:	e002      	b.n	8005d8a <USBH_HID_ClassRequest+0x116>
    break;
 8005d84:	bf00      	nop
 8005d86:	e000      	b.n	8005d8a <USBH_HID_ClassRequest+0x116>
    break;
 8005d88:	bf00      	nop
  }

  return status;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08009ae4 	.word	0x08009ae4
 8005d98:	08009aec 	.word	0x08009aec
 8005d9c:	08009b2c 	.word	0x08009b2c

08005da0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	f200 80a9 	bhi.w	8005f12 <USBH_HID_Process+0x172>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <USBH_HID_Process+0x28>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005f13 	.word	0x08005f13
 8005dd4:	08005f13 	.word	0x08005f13
 8005dd8:	08005e65 	.word	0x08005e65
 8005ddc:	08005e4f 	.word	0x08005e4f
 8005de0:	08005e93 	.word	0x08005e93
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2201      	movs	r2, #1
 8005df0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005df2:	e093      	b.n	8005f1c <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	8b1b      	ldrh	r3, [r3, #24]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	2101      	movs	r1, #1
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f8f0 	bl	8005fec <USBH_HID_GetReport>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2205      	movs	r2, #5
 8005e1a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e1c:	e07e      	b.n	8005f1c <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d105      	bne.n	8005e30 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2201      	movs	r2, #1
 8005e28:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2e:	e075      	b.n	8005f1c <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d105      	bne.n	8005e42 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2205      	movs	r2, #5
 8005e3a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	e06c      	b.n	8005f1c <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2207      	movs	r2, #7
 8005e46:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4c:	e066      	b.n	8005f1c <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05c      	beq.n	8005f16 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e62:	e058      	b.n	8005f16 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f002 f851 	bl	8007f1a <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005e90:	e044      	b.n	8005f1c <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f002 fb8b 	bl	80085b4 <USBH_LL_GetURBState>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d120      	bne.n	8005ee6 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 faf0 	bl	8008490 <USBH_LL_GetLastXferSize>
 8005eb0:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d12e      	bne.n	8005f1a <USBH_HID_Process+0x17a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d02b      	beq.n	8005f1a <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f103 0008 	add.w	r0, r3, #8
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6959      	ldr	r1, [r3, #20]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	8b1b      	ldrh	r3, [r3, #24]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f000 f9a0 	bl	8006216 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fa fb66 	bl	80005b0 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005ee4:	e019      	b.n	8005f1a <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f002 fb61 	bl	80085b4 <USBH_LL_GetURBState>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d110      	bne.n	8005f1a <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	7e9b      	ldrb	r3, [r3, #26]
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 fc0d 	bl	800771e <USBH_ClrFeature>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	709a      	strb	r2, [r3, #2]
      break;
 8005f10:	e003      	b.n	8005f1a <USBH_HID_Process+0x17a>

    default:
      break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <USBH_HID_Process+0x17c>
      break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <USBH_HID_Process+0x17c>
      break;
 8005f1a:	bf00      	nop
  }

  return status;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop

08005f28 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	789b      	ldrb	r3, [r3, #2]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d10c      	bne.n	8005f5c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	8b92      	ldrh	r2, [r2, #28]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d302      	bcc.n	8005f5c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af02      	add	r7, sp, #8
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005f86:	2101      	movs	r1, #1
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fb28 	bl	80075de <USBH_GetDescriptor>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2221      	movs	r2, #33	; 0x21
 8005fb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	78bb      	ldrb	r3, [r7, #2]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 fd7e 	bl	8007ade <USBH_CtlReq>
 8005fe2:	4603      	mov	r3, r0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	72fb      	strb	r3, [r7, #11]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	22a1      	movs	r2, #161	; 0xa1
 8006002:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	b29b      	uxth	r3, r3
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	b29a      	uxth	r2, r3
 8006012:	7abb      	ldrb	r3, [r7, #10]
 8006014:	b29b      	uxth	r3, r3
 8006016:	4313      	orrs	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8006024:	7e3b      	ldrb	r3, [r7, #24]
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800602c:	7e3b      	ldrb	r3, [r7, #24]
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f001 fd52 	bl	8007ade <USBH_CtlReq>
 800603a:	4603      	mov	r3, r0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2221      	movs	r2, #33	; 0x21
 8006054:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	220b      	movs	r2, #11
 800605a:	745a      	strb	r2, [r3, #17]
  if (protocol)
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	825a      	strh	r2, [r3, #18]
 8006068:	e002      	b.n	8006070 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800607c:	2200      	movs	r2, #0
 800607e:	2100      	movs	r1, #0
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fd2c 	bl	8007ade <USBH_CtlReq>
 8006086:	4603      	mov	r3, r0

}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3302      	adds	r3, #2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	3303      	adds	r3, #3
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d943      	bls.n	8006144 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80060bc:	2309      	movs	r3, #9
 80060be:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80060c0:	e03c      	b.n	800613c <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	4619      	mov	r1, r3
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 fced 	bl	8007aa8 <USBH_GetNextDesc>
 80060ce:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b21      	cmp	r3, #33	; 0x21
 80060d6:	d131      	bne.n	800613c <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	785a      	ldrb	r2, [r3, #1]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3302      	adds	r3, #2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3303      	adds	r3, #3
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	791a      	ldrb	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	795a      	ldrb	r2, [r3, #5]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	799a      	ldrb	r2, [r3, #6]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3307      	adds	r3, #7
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3308      	adds	r3, #8
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	b29b      	uxth	r3, r3
 8006130:	4313      	orrs	r3, r2
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	811a      	strh	r2, [r3, #8]
        break;
 8006138:	bf00      	nop
      }
    }
  }
}
 800613a:	e003      	b.n	8006144 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	897a      	ldrh	r2, [r7, #10]
 8006140:	429a      	cmp	r2, r3
 8006142:	d8be      	bhi.n	80060c2 <USBH_HID_ParseHIDDesc+0x32>
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	601a      	str	r2, [r3, #0]
}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	7a9b      	ldrb	r3, [r3, #10]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d131      	bne.n	8006202 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	82fb      	strh	r3, [r7, #22]
 80061a8:	e027      	b.n	80061fa <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88da      	ldrh	r2, [r3, #6]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d019      	beq.n	80061ea <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	613a      	str	r2, [r7, #16]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	68f9      	ldr	r1, [r7, #12]
 80061c2:	88c9      	ldrh	r1, [r1, #6]
 80061c4:	440a      	add	r2, r1
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88db      	ldrh	r3, [r3, #6]
 80061ce:	3301      	adds	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	88da      	ldrh	r2, [r3, #6]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	891b      	ldrh	r3, [r3, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d108      	bne.n	80061f4 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	80da      	strh	r2, [r3, #6]
 80061e8:	e004      	b.n	80061f4 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	729a      	strb	r2, [r3, #10]
        return i;
 80061f0:	8afb      	ldrh	r3, [r7, #22]
 80061f2:	e00a      	b.n	800620a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80061f4:	8afb      	ldrh	r3, [r7, #22]
 80061f6:	3301      	adds	r3, #1
 80061f8:	82fb      	strh	r3, [r7, #22]
 80061fa:	8afa      	ldrh	r2, [r7, #22]
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3d3      	bcc.n	80061aa <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006208:	88fb      	ldrh	r3, [r7, #6]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	4613      	mov	r3, r2
 8006222:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	7a9b      	ldrb	r3, [r3, #10]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d13c      	bne.n	80062aa <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	82fb      	strh	r3, [r7, #22]
 800623a:	e032      	b.n	80062a2 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	889b      	ldrh	r3, [r3, #4]
 8006240:	3301      	adds	r3, #1
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	88d2      	ldrh	r2, [r2, #6]
 8006246:	4293      	cmp	r3, r2
 8006248:	d00a      	beq.n	8006260 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	889b      	ldrh	r3, [r3, #4]
 800624e:	3301      	adds	r3, #1
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	729a      	strb	r2, [r3, #10]
        return i;
 8006266:	8afb      	ldrh	r3, [r7, #22]
 8006268:	e023      	b.n	80062b2 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	8892      	ldrh	r2, [r2, #4]
 8006272:	441a      	add	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	6139      	str	r1, [r7, #16]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	7013      	strb	r3, [r2, #0]
        f->head++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	889b      	ldrh	r3, [r3, #4]
 8006282:	3301      	adds	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	889a      	ldrh	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	891b      	ldrh	r3, [r3, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d102      	bne.n	800629c <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800629c:	8afb      	ldrh	r3, [r7, #22]
 800629e:	3301      	adds	r3, #1
 80062a0:	82fb      	strh	r3, [r7, #22]
 80062a2:	8afa      	ldrh	r2, [r7, #22]
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d3c8      	bcc.n	800623c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80062b0:	88fb      	ldrh	r3, [r7, #6]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80062d2:	4b24      	ldr	r3, [pc, #144]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	709a      	strb	r2, [r3, #2]
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062da:	789a      	ldrb	r2, [r3, #2]
 80062dc:	4b21      	ldr	r3, [pc, #132]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062de:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80062e0:	4b20      	ldr	r3, [pc, #128]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	711a      	strb	r2, [r3, #4]
 80062e6:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062e8:	791a      	ldrb	r2, [r3, #4]
 80062ea:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062ec:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	719a      	strb	r2, [r3, #6]
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062f6:	799a      	ldrb	r2, [r3, #6]
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062fa:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 80062fe:	2200      	movs	r2, #0
 8006300:	721a      	strb	r2, [r3, #8]
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 8006304:	7a1a      	ldrb	r2, [r3, #8]
 8006306:	4b17      	ldr	r3, [pc, #92]	; (8006364 <USBH_HID_KeybdInit+0xa4>)
 8006308:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e00c      	b.n	800632a <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <USBH_HID_KeybdInit+0xa8>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2100      	movs	r1, #0
 8006316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800631a:	4a14      	ldr	r2, [pc, #80]	; (800636c <USBH_HID_KeybdInit+0xac>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2100      	movs	r1, #0
 8006320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d9ef      	bls.n	8006310 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	8b1b      	ldrh	r3, [r3, #24]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d902      	bls.n	800633e <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2208      	movs	r2, #8
 800633c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <USBH_HID_KeybdInit+0xac>)
 8006342:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f103 0008 	add.w	r0, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006350:	2250      	movs	r2, #80	; 0x50
 8006352:	4619      	mov	r1, r3
 8006354:	f7ff fefa 	bl	800614c <USBH_HID_FifoInit>

  return USBH_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000154 	.word	0x20000154
 8006368:	20000144 	.word	0x20000144
 800636c:	2000014c 	.word	0x2000014c

08006370 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f80d 	bl	8006398 <USBH_HID_KeybdDecode>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <USBH_HID_GetKeybdInfo+0x24>)
 8006386:	e000      	b.n	800638a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8006388:	2300      	movs	r3, #0
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000154 	.word	0x20000154

08006398 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	8b1b      	ldrh	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80063b2:	2302      	movs	r3, #2
 80063b4:	e065      	b.n	8006482 <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f103 0008 	add.w	r0, r3, #8
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	8b1b      	ldrh	r3, [r3, #24]
 80063c0:	461a      	mov	r2, r3
 80063c2:	4932      	ldr	r1, [pc, #200]	; (800648c <USBH_HID_KeybdDecode+0xf4>)
 80063c4:	f7ff fede 	bl	8006184 <USBH_HID_FifoRead>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	8b1b      	ldrh	r3, [r3, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d155      	bne.n	8006480 <USBH_HID_KeybdDecode+0xe8>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80063d4:	2100      	movs	r1, #0
 80063d6:	482e      	ldr	r0, [pc, #184]	; (8006490 <USBH_HID_KeybdDecode+0xf8>)
 80063d8:	f000 f8b8 	bl	800654c <HID_ReadItem>
 80063dc:	4603      	mov	r3, r0
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	4b2c      	ldr	r3, [pc, #176]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 80063e2:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80063e4:	2100      	movs	r1, #0
 80063e6:	482c      	ldr	r0, [pc, #176]	; (8006498 <USBH_HID_KeybdDecode+0x100>)
 80063e8:	f000 f8b0 	bl	800654c <HID_ReadItem>
 80063ec:	4603      	mov	r3, r0
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b28      	ldr	r3, [pc, #160]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 80063f2:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80063f4:	2100      	movs	r1, #0
 80063f6:	4829      	ldr	r0, [pc, #164]	; (800649c <USBH_HID_KeybdDecode+0x104>)
 80063f8:	f000 f8a8 	bl	800654c <HID_ReadItem>
 80063fc:	4603      	mov	r3, r0
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b24      	ldr	r3, [pc, #144]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006402:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8006404:	2100      	movs	r1, #0
 8006406:	4826      	ldr	r0, [pc, #152]	; (80064a0 <USBH_HID_KeybdDecode+0x108>)
 8006408:	f000 f8a0 	bl	800654c <HID_ReadItem>
 800640c:	4603      	mov	r3, r0
 800640e:	b2da      	uxtb	r2, r3
 8006410:	4b20      	ldr	r3, [pc, #128]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006412:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8006414:	2100      	movs	r1, #0
 8006416:	4823      	ldr	r0, [pc, #140]	; (80064a4 <USBH_HID_KeybdDecode+0x10c>)
 8006418:	f000 f898 	bl	800654c <HID_ReadItem>
 800641c:	4603      	mov	r3, r0
 800641e:	b2da      	uxtb	r2, r3
 8006420:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006422:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8006424:	2100      	movs	r1, #0
 8006426:	4820      	ldr	r0, [pc, #128]	; (80064a8 <USBH_HID_KeybdDecode+0x110>)
 8006428:	f000 f890 	bl	800654c <HID_ReadItem>
 800642c:	4603      	mov	r3, r0
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b18      	ldr	r3, [pc, #96]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006432:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8006434:	2100      	movs	r1, #0
 8006436:	481d      	ldr	r0, [pc, #116]	; (80064ac <USBH_HID_KeybdDecode+0x114>)
 8006438:	f000 f888 	bl	800654c <HID_ReadItem>
 800643c:	4603      	mov	r3, r0
 800643e:	b2da      	uxtb	r2, r3
 8006440:	4b14      	ldr	r3, [pc, #80]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006442:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8006444:	2100      	movs	r1, #0
 8006446:	481a      	ldr	r0, [pc, #104]	; (80064b0 <USBH_HID_KeybdDecode+0x118>)
 8006448:	f000 f880 	bl	800654c <HID_ReadItem>
 800644c:	4603      	mov	r3, r0
 800644e:	b2da      	uxtb	r2, r3
 8006450:	4b10      	ldr	r3, [pc, #64]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 8006452:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e00d      	b.n	8006476 <USBH_HID_KeybdDecode+0xde>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800645a:	7bfc      	ldrb	r4, [r7, #15]
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	4619      	mov	r1, r3
 8006460:	4814      	ldr	r0, [pc, #80]	; (80064b4 <USBH_HID_KeybdDecode+0x11c>)
 8006462:	f000 f873 	bl	800654c <HID_ReadItem>
 8006466:	4603      	mov	r3, r0
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <USBH_HID_KeybdDecode+0xfc>)
 800646c:	4423      	add	r3, r4
 800646e:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	3301      	adds	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b0b      	cmp	r3, #11
 800647a:	d9ee      	bls.n	800645a <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;
 8006480:	2302      	movs	r3, #2
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
 800648a:	bf00      	nop
 800648c:	20000144 	.word	0x20000144
 8006490:	0800a028 	.word	0x0800a028
 8006494:	20000154 	.word	0x20000154
 8006498:	0800a048 	.word	0x0800a048
 800649c:	0800a068 	.word	0x0800a068
 80064a0:	0800a088 	.word	0x0800a088
 80064a4:	0800a0a8 	.word	0x0800a0a8
 80064a8:	0800a0c8 	.word	0x0800a0c8
 80064ac:	0800a0e8 	.word	0x0800a0e8
 80064b0:	0800a108 	.word	0x0800a108
 80064b4:	0800a128 	.word	0x0800a128

080064b8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <USBH_HID_MouseInit+0x88>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <USBH_HID_MouseInit+0x88>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <USBH_HID_MouseInit+0x88>)
 80064d8:	2200      	movs	r2, #0
 80064da:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80064dc:	4b18      	ldr	r3, [pc, #96]	; (8006540 <USBH_HID_MouseInit+0x88>)
 80064de:	2200      	movs	r2, #0
 80064e0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <USBH_HID_MouseInit+0x88>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e00c      	b.n	8006508 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80064ee:	4a15      	ldr	r2, [pc, #84]	; (8006544 <USBH_HID_MouseInit+0x8c>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2100      	movs	r1, #0
 80064f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80064f8:	4a13      	ldr	r2, [pc, #76]	; (8006548 <USBH_HID_MouseInit+0x90>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2100      	movs	r1, #0
 80064fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d9ef      	bls.n	80064ee <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	8b1b      	ldrh	r3, [r3, #24]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d902      	bls.n	800651c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2208      	movs	r2, #8
 800651a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <USBH_HID_MouseInit+0x90>)
 8006520:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f103 0008 	add.w	r0, r3, #8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800652e:	2250      	movs	r2, #80	; 0x50
 8006530:	4619      	mov	r1, r3
 8006532:	f7ff fe0b 	bl	800614c <USBH_HID_FifoInit>

  return USBH_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	2000016c 	.word	0x2000016c
 8006544:	20000174 	.word	0x20000174
 8006548:	2000017c 	.word	0x2000017c

0800654c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7a1b      	ldrb	r3, [r3, #8]
 800656a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7a5b      	ldrb	r3, [r3, #9]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01a      	beq.n	80065aa <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7a5b      	ldrb	r3, [r3, #9]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	429a      	cmp	r2, r3
 800657c:	d301      	bcc.n	8006582 <HID_ReadItem+0x36>
    {
      return (0U);
 800657e:	2300      	movs	r3, #0
 8006580:	e076      	b.n	8006670 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6852      	ldr	r2, [r2, #4]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	08db      	lsrs	r3, r3, #3
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4413      	add	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e00a      	b.n	80065c6 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <HID_ReadItem+0x90>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	08db      	lsrs	r3, r3, #3
 80065d8:	3301      	adds	r3, #1
 80065da:	e002      	b.n	80065e2 <HID_ReadItem+0x96>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	08db      	lsrs	r3, r3, #3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d8e3      	bhi.n	80065b0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	40da      	lsrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2101      	movs	r1, #1
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4013      	ands	r3, r2
 80065fc:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	429a      	cmp	r2, r3
 8006606:	d804      	bhi.n	8006612 <HID_ReadItem+0xc6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	d201      	bcs.n	8006616 <HID_ReadItem+0xca>
  {
    return (0U);
 8006612:	2300      	movs	r3, #0
 8006614:	e02c      	b.n	8006670 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7a9b      	ldrb	r3, [r3, #10]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01d      	beq.n	800665a <HID_ReadItem+0x10e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	2201      	movs	r2, #1
 8006626:	409a      	lsls	r2, r3
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d014      	beq.n	800665a <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	425a      	negs	r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4313      	orrs	r3, r2
 8006640:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	e010      	b.n	8006670 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	e00a      	b.n	8006670 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HID_ReadItem+0x11a>
    {
      return (val);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	e004      	b.n	8006670 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3724      	adds	r7, #36	; 0x24
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8006690:	481c      	ldr	r0, [pc, #112]	; (8006704 <USBH_Init+0x88>)
 8006692:	f002 f955 	bl	8008940 <iprintf>
 8006696:	481c      	ldr	r0, [pc, #112]	; (8006708 <USBH_Init+0x8c>)
 8006698:	f002 f952 	bl	8008940 <iprintf>
 800669c:	200a      	movs	r0, #10
 800669e:	f002 f967 	bl	8008970 <putchar>
    return USBH_FAIL;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e029      	b.n	80066fa <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	79fa      	ldrb	r2, [r7, #7]
 80066aa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f824 	bl	800670c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f001 fe1a 	bl	800832c <USBH_LL_Init>

  return USBH_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08009b64 	.word	0x08009b64
 8006708:	08009b6c 	.word	0x08009b6c

0800670c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e009      	b.n	8006732 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	33e0      	adds	r3, #224	; 0xe0
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	2200      	movs	r2, #0
 800672a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b0e      	cmp	r3, #14
 8006736:	d9f2      	bls.n	800671e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e009      	b.n	8006752 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d3f1      	bcc.n	800673e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2240      	movs	r2, #64	; 0x40
 800677e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01f      	beq.n	8006808 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10e      	bne.n	80067f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	33de      	adds	r3, #222	; 0xde
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e016      	b.n	800681e <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 80067f0:	480d      	ldr	r0, [pc, #52]	; (8006828 <USBH_RegisterClass+0x74>)
 80067f2:	f002 f8a5 	bl	8008940 <iprintf>
 80067f6:	480d      	ldr	r0, [pc, #52]	; (800682c <USBH_RegisterClass+0x78>)
 80067f8:	f002 f8a2 	bl	8008940 <iprintf>
 80067fc:	200a      	movs	r0, #10
 80067fe:	f002 f8b7 	bl	8008970 <putchar>
      status = USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	e00a      	b.n	800681e <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8006808:	4807      	ldr	r0, [pc, #28]	; (8006828 <USBH_RegisterClass+0x74>)
 800680a:	f002 f899 	bl	8008940 <iprintf>
 800680e:	4808      	ldr	r0, [pc, #32]	; (8006830 <USBH_RegisterClass+0x7c>)
 8006810:	f002 f896 	bl	8008940 <iprintf>
 8006814:	200a      	movs	r0, #10
 8006816:	f002 f8ab 	bl	8008970 <putchar>
    status = USBH_FAIL;
 800681a:	2302      	movs	r3, #2
 800681c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	08009b64 	.word	0x08009b64
 800682c:	08009b80 	.word	0x08009b80
 8006830:	08009b9c 	.word	0x08009b9c

08006834 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	429a      	cmp	r2, r3
 800684e:	d23c      	bcs.n	80068ca <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	4619      	mov	r1, r3
 800685c:	4823      	ldr	r0, [pc, #140]	; (80068ec <USBH_SelectInterface+0xb8>)
 800685e:	f002 f86f 	bl	8008940 <iprintf>
 8006862:	200a      	movs	r0, #10
 8006864:	f002 f884 	bl	8008970 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	211a      	movs	r1, #26
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	481c      	ldr	r0, [pc, #112]	; (80068f0 <USBH_SelectInterface+0xbc>)
 800687e:	f002 f85f 	bl	8008940 <iprintf>
 8006882:	200a      	movs	r0, #10
 8006884:	f002 f874 	bl	8008970 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	211a      	movs	r1, #26
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	4815      	ldr	r0, [pc, #84]	; (80068f4 <USBH_SelectInterface+0xc0>)
 800689e:	f002 f84f 	bl	8008940 <iprintf>
 80068a2:	200a      	movs	r0, #10
 80068a4:	f002 f864 	bl	8008970 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	211a      	movs	r1, #26
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 3349 	addw	r3, r3, #841	; 0x349
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	480e      	ldr	r0, [pc, #56]	; (80068f8 <USBH_SelectInterface+0xc4>)
 80068be:	f002 f83f 	bl	8008940 <iprintf>
 80068c2:	200a      	movs	r0, #10
 80068c4:	f002 f854 	bl	8008970 <putchar>
 80068c8:	e00a      	b.n	80068e0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 80068ca:	480c      	ldr	r0, [pc, #48]	; (80068fc <USBH_SelectInterface+0xc8>)
 80068cc:	f002 f838 	bl	8008940 <iprintf>
 80068d0:	480b      	ldr	r0, [pc, #44]	; (8006900 <USBH_SelectInterface+0xcc>)
 80068d2:	f002 f835 	bl	8008940 <iprintf>
 80068d6:	200a      	movs	r0, #10
 80068d8:	f002 f84a 	bl	8008970 <putchar>
    status = USBH_FAIL;
 80068dc:	2302      	movs	r3, #2
 80068de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08009bb4 	.word	0x08009bb4
 80068f0:	08009bd4 	.word	0x08009bd4
 80068f4:	08009be4 	.word	0x08009be4
 80068f8:	08009bf4 	.word	0x08009bf4
 80068fc:	08009b64 	.word	0x08009b64
 8006900:	08009c04 	.word	0x08009c04

08006904 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	461a      	mov	r2, r3
 8006912:	4603      	mov	r3, r0
 8006914:	70fb      	strb	r3, [r7, #3]
 8006916:	460b      	mov	r3, r1
 8006918:	70bb      	strb	r3, [r7, #2]
 800691a:	4613      	mov	r3, r2
 800691c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800692c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800692e:	e025      	b.n	800697c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	221a      	movs	r2, #26
 8006934:	fb02 f303 	mul.w	r3, r2, r3
 8006938:	3308      	adds	r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	3302      	adds	r3, #2
 8006940:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	795b      	ldrb	r3, [r3, #5]
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	429a      	cmp	r2, r3
 800694a:	d002      	beq.n	8006952 <USBH_FindInterface+0x4e>
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	2bff      	cmp	r3, #255	; 0xff
 8006950:	d111      	bne.n	8006976 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006956:	78ba      	ldrb	r2, [r7, #2]
 8006958:	429a      	cmp	r2, r3
 800695a:	d002      	beq.n	8006962 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800695c:	78bb      	ldrb	r3, [r7, #2]
 800695e:	2bff      	cmp	r3, #255	; 0xff
 8006960:	d109      	bne.n	8006976 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006966:	787a      	ldrb	r2, [r7, #1]
 8006968:	429a      	cmp	r2, r3
 800696a:	d002      	beq.n	8006972 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800696c:	787b      	ldrb	r3, [r7, #1]
 800696e:	2bff      	cmp	r3, #255	; 0xff
 8006970:	d101      	bne.n	8006976 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	e006      	b.n	8006984 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d9d6      	bls.n	8006930 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006982:	23ff      	movs	r3, #255	; 0xff
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fd03 	bl	80083a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800699e:	2101      	movs	r1, #1
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fe1a 	bl	80085da <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af04      	add	r7, sp, #16
 80069b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d102      	bne.n	80069d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2203      	movs	r2, #3
 80069d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b0b      	cmp	r3, #11
 80069da:	f200 822b 	bhi.w	8006e34 <USBH_Process+0x484>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBH_Process+0x34>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a53 	.word	0x08006a53
 80069ec:	08006ad3 	.word	0x08006ad3
 80069f0:	08006dc3 	.word	0x08006dc3
 80069f4:	08006e35 	.word	0x08006e35
 80069f8:	08006b77 	.word	0x08006b77
 80069fc:	08006d45 	.word	0x08006d45
 8006a00:	08006bc5 	.word	0x08006bc5
 8006a04:	08006be5 	.word	0x08006be5
 8006a08:	08006c11 	.word	0x08006c11
 8006a0c:	08006c4b 	.word	0x08006c4b
 8006a10:	08006dab 	.word	0x08006dab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 820b 	beq.w	8006e38 <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 8006a22:	48b9      	ldr	r0, [pc, #740]	; (8006d08 <USBH_Process+0x358>)
 8006a24:	f001 ff8c 	bl	8008940 <iprintf>
 8006a28:	200a      	movs	r0, #10
 8006a2a:	f001 ffa1 	bl	8008970 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a34:	20c8      	movs	r0, #200	; 0xc8
 8006a36:	f001 fe17 	bl	8008668 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fd0d 	bl	800845a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a50:	e1f2      	b.n	8006e38 <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d10d      	bne.n	8006a78 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8006a5c:	48ab      	ldr	r0, [pc, #684]	; (8006d0c <USBH_Process+0x35c>)
 8006a5e:	f001 ff6f 	bl	8008940 <iprintf>
 8006a62:	200a      	movs	r0, #10
 8006a64:	f001 ff84 	bl	8008970 <putchar>
        phost->device.RstCnt = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a76:	e1ec      	b.n	8006e52 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a82:	d91a      	bls.n	8006aba <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d909      	bls.n	8006ab2 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8006a9e:	489c      	ldr	r0, [pc, #624]	; (8006d10 <USBH_Process+0x360>)
 8006aa0:	f001 ff4e 	bl	8008940 <iprintf>
 8006aa4:	200a      	movs	r0, #10
 8006aa6:	f001 ff63 	bl	8008970 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220d      	movs	r2, #13
 8006aae:	701a      	strb	r2, [r3, #0]
      break;
 8006ab0:	e1cf      	b.n	8006e52 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
      break;
 8006ab8:	e1cb      	b.n	8006e52 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ac0:	f103 020a 	add.w	r2, r3, #10
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006aca:	200a      	movs	r0, #10
 8006acc:	f001 fdcc 	bl	8008668 <USBH_Delay>
      break;
 8006ad0:	e1bf      	b.n	8006e52 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ae8:	2064      	movs	r0, #100	; 0x64
 8006aea:	f001 fdbd 	bl	8008668 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fc8e 	bl	8008410 <USBH_LL_GetSpeed>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2205      	movs	r2, #5
 8006b02:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b04:	2100      	movs	r1, #0
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fa55 	bl	8007fb6 <USBH_AllocPipe>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b14:	2180      	movs	r1, #128	; 0x80
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fa4d 	bl	8007fb6 <USBH_AllocPipe>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7919      	ldrb	r1, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	9202      	str	r2, [sp, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	9201      	str	r2, [sp, #4]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4603      	mov	r3, r0
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fa06 	bl	8007f58 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7959      	ldrb	r1, [r3, #5]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b60:	b292      	uxth	r2, r2
 8006b62:	9202      	str	r2, [sp, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	9201      	str	r2, [sp, #4]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f9f2 	bl	8007f58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b74:	e16d      	b.n	8006e52 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f97a 	bl	8006e70 <USBH_HandleEnum>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 8159 	bne.w	8006e3c <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8006b8a:	4862      	ldr	r0, [pc, #392]	; (8006d14 <USBH_Process+0x364>)
 8006b8c:	f001 fed8 	bl	8008940 <iprintf>
 8006b90:	200a      	movs	r0, #10
 8006b92:	f001 feed 	bl	8008970 <putchar>

        phost->device.current_interface = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d109      	bne.n	8006bbc <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8006ba8:	485b      	ldr	r0, [pc, #364]	; (8006d18 <USBH_Process+0x368>)
 8006baa:	f001 fec9 	bl	8008940 <iprintf>
 8006bae:	200a      	movs	r0, #10
 8006bb0:	f001 fede 	bl	8008970 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006bba:	e13f      	b.n	8006e3c <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2207      	movs	r2, #7
 8006bc0:	701a      	strb	r2, [r3, #0]
      break;
 8006bc2:	e13b      	b.n	8006e3c <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8138 	beq.w	8006e40 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2208      	movs	r2, #8
 8006be0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006be2:	e12d      	b.n	8006e40 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd4e 	bl	8007690 <USBH_SetCfg>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 8124 	bne.w	8006e44 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2209      	movs	r2, #9
 8006c00:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8006c02:	4846      	ldr	r0, [pc, #280]	; (8006d1c <USBH_Process+0x36c>)
 8006c04:	f001 fe9c 	bl	8008940 <iprintf>
 8006c08:	200a      	movs	r0, #10
 8006c0a:	f001 feb1 	bl	8008970 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c0e:	e119      	b.n	8006e44 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d011      	beq.n	8006c42 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c1e:	2101      	movs	r1, #1
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fd58 	bl	80076d6 <USBH_SetFeature>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 810d 	bne.w	8006e48 <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8006c2e:	483c      	ldr	r0, [pc, #240]	; (8006d20 <USBH_Process+0x370>)
 8006c30:	f001 fe86 	bl	8008940 <iprintf>
 8006c34:	200a      	movs	r0, #10
 8006c36:	f001 fe9b 	bl	8008970 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c40:	e102      	b.n	8006e48 <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	220a      	movs	r2, #10
 8006c46:	701a      	strb	r2, [r3, #0]
      break;
 8006c48:	e0fe      	b.n	8006e48 <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 8006c54:	4833      	ldr	r0, [pc, #204]	; (8006d24 <USBH_Process+0x374>)
 8006c56:	f001 fe73 	bl	8008940 <iprintf>
 8006c5a:	200a      	movs	r0, #10
 8006c5c:	f001 fe88 	bl	8008970 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c60:	e0f7      	b.n	8006e52 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	e016      	b.n	8006c9e <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	32de      	adds	r2, #222	; 0xde
 8006c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7a:	791a      	ldrb	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d108      	bne.n	8006c98 <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32de      	adds	r2, #222	; 0xde
 8006c8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c96:	e005      	b.n	8006ca4 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0e5      	beq.n	8006c70 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d040      	beq.n	8006d30 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d114      	bne.n	8006cea <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2206      	movs	r2, #6
 8006cc4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4815      	ldr	r0, [pc, #84]	; (8006d28 <USBH_Process+0x378>)
 8006cd2:	f001 fe35 	bl	8008940 <iprintf>
 8006cd6:	200a      	movs	r0, #10
 8006cd8:	f001 fe4a 	bl	8008970 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce2:	2103      	movs	r1, #3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      break;
 8006ce8:	e0b3      	b.n	8006e52 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	220d      	movs	r2, #13
 8006cee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	480c      	ldr	r0, [pc, #48]	; (8006d2c <USBH_Process+0x37c>)
 8006cfc:	f001 fe20 	bl	8008940 <iprintf>
 8006d00:	200a      	movs	r0, #10
 8006d02:	f001 fe35 	bl	8008970 <putchar>
      break;
 8006d06:	e0a4      	b.n	8006e52 <USBH_Process+0x4a2>
 8006d08:	08009c24 	.word	0x08009c24
 8006d0c:	08009c3c 	.word	0x08009c3c
 8006d10:	08009c58 	.word	0x08009c58
 8006d14:	08009c84 	.word	0x08009c84
 8006d18:	08009c98 	.word	0x08009c98
 8006d1c:	08009cc0 	.word	0x08009cc0
 8006d20:	08009cdc 	.word	0x08009cdc
 8006d24:	08009cfc 	.word	0x08009cfc
 8006d28:	08009d1c 	.word	0x08009d1c
 8006d2c:	08009d30 	.word	0x08009d30
          phost->gState = HOST_ABORT_STATE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	220d      	movs	r2, #13
 8006d34:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8006d36:	4849      	ldr	r0, [pc, #292]	; (8006e5c <USBH_Process+0x4ac>)
 8006d38:	f001 fe02 	bl	8008940 <iprintf>
 8006d3c:	200a      	movs	r0, #10
 8006d3e:	f001 fe17 	bl	8008970 <putchar>
      break;
 8006d42:	e086      	b.n	8006e52 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d020      	beq.n	8006d90 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	220b      	movs	r2, #11
 8006d6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d6c:	e06e      	b.n	8006e4c <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d16a      	bne.n	8006e4c <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220d      	movs	r2, #13
 8006d7a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8006d7c:	4838      	ldr	r0, [pc, #224]	; (8006e60 <USBH_Process+0x4b0>)
 8006d7e:	f001 fddf 	bl	8008940 <iprintf>
 8006d82:	4838      	ldr	r0, [pc, #224]	; (8006e64 <USBH_Process+0x4b4>)
 8006d84:	f001 fddc 	bl	8008940 <iprintf>
 8006d88:	200a      	movs	r0, #10
 8006d8a:	f001 fdf1 	bl	8008970 <putchar>
      break;
 8006d8e:	e05d      	b.n	8006e4c <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	220d      	movs	r2, #13
 8006d94:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8006d96:	4832      	ldr	r0, [pc, #200]	; (8006e60 <USBH_Process+0x4b0>)
 8006d98:	f001 fdd2 	bl	8008940 <iprintf>
 8006d9c:	4832      	ldr	r0, [pc, #200]	; (8006e68 <USBH_Process+0x4b8>)
 8006d9e:	f001 fdcf 	bl	8008940 <iprintf>
 8006da2:	200a      	movs	r0, #10
 8006da4:	f001 fde4 	bl	8008970 <putchar>
      break;
 8006da8:	e050      	b.n	8006e4c <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d04d      	beq.n	8006e50 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
      }
      break;
 8006dc0:	e046      	b.n	8006e50 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fc9e 	bl	800670c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dfe:	2105      	movs	r1, #5
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8006e04:	4819      	ldr	r0, [pc, #100]	; (8006e6c <USBH_Process+0x4bc>)
 8006e06:	f001 fd9b 	bl	8008940 <iprintf>
 8006e0a:	200a      	movs	r0, #10
 8006e0c:	f001 fdb0 	bl	8008970 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d107      	bne.n	8006e2c <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff fdb3 	bl	8006990 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e2a:	e012      	b.n	8006e52 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fab9 	bl	80083a4 <USBH_LL_Start>
      break;
 8006e32:	e00e      	b.n	8006e52 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e34:	bf00      	nop
 8006e36:	e00c      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e00a      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e008      	b.n	8006e52 <USBH_Process+0x4a2>
    break;
 8006e40:	bf00      	nop
 8006e42:	e006      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <USBH_Process+0x4a2>
      break;
 8006e50:	bf00      	nop
  }
  return USBH_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	08009d50 	.word	0x08009d50
 8006e60:	08009b64 	.word	0x08009b64
 8006e64:	08009d78 	.word	0x08009d78
 8006e68:	08009da0 	.word	0x08009da0
 8006e6c:	08009db8 	.word	0x08009db8

08006e70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b07      	cmp	r3, #7
 8006e86:	f200 8280 	bhi.w	800738a <USBH_HandleEnum+0x51a>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <USBH_HandleEnum+0x20>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006f8d 	.word	0x08006f8d
 8006e98:	0800703d 	.word	0x0800703d
 8006e9c:	080070fd 	.word	0x080070fd
 8006ea0:	08007185 	.word	0x08007185
 8006ea4:	08007239 	.word	0x08007239
 8006ea8:	080072ad 	.word	0x080072ad
 8006eac:	0800731f 	.word	0x0800731f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006eb0:	2108      	movs	r1, #8
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb1c 	bl	80074f0 <USBH_Get_DevDesc>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d130      	bne.n	8006f24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7919      	ldrb	r1, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f82f 	bl	8007f58 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7959      	ldrb	r1, [r3, #5]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	9201      	str	r2, [sp, #4]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f81b 	bl	8007f58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f22:	e234      	b.n	800738e <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	f040 8231 	bne.w	800738e <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8006f2c:	48b9      	ldr	r0, [pc, #740]	; (8007214 <USBH_HandleEnum+0x3a4>)
 8006f2e:	f001 fd07 	bl	8008940 <iprintf>
 8006f32:	48b9      	ldr	r0, [pc, #740]	; (8007218 <USBH_HandleEnum+0x3a8>)
 8006f34:	f001 fd04 	bl	8008940 <iprintf>
 8006f38:	200a      	movs	r0, #10
 8006f3a:	f001 fd19 	bl	8008970 <putchar>
        phost->device.EnumCnt++;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f44:	3301      	adds	r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d909      	bls.n	8006f6c <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8006f58:	48b0      	ldr	r0, [pc, #704]	; (800721c <USBH_HandleEnum+0x3ac>)
 8006f5a:	f001 fcf1 	bl	8008940 <iprintf>
 8006f5e:	200a      	movs	r0, #10
 8006f60:	f001 fd06 	bl	8008970 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220d      	movs	r2, #13
 8006f68:	701a      	strb	r2, [r3, #0]
      break;
 8006f6a:	e210      	b.n	800738e <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	795b      	ldrb	r3, [r3, #5]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f840 	bl	8007ff8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	791b      	ldrb	r3, [r3, #4]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f83a 	bl	8007ff8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e200      	b.n	800738e <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f8c:	2112      	movs	r1, #18
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 faae 	bl	80074f0 <USBH_Get_DevDesc>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d117      	bne.n	8006fce <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	489e      	ldr	r0, [pc, #632]	; (8007220 <USBH_HandleEnum+0x3b0>)
 8006fa8:	f001 fcca 	bl	8008940 <iprintf>
 8006fac:	200a      	movs	r0, #10
 8006fae:	f001 fcdf 	bl	8008970 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8006fb8:	4619      	mov	r1, r3
 8006fba:	489a      	ldr	r0, [pc, #616]	; (8007224 <USBH_HandleEnum+0x3b4>)
 8006fbc:	f001 fcc0 	bl	8008940 <iprintf>
 8006fc0:	200a      	movs	r0, #10
 8006fc2:	f001 fcd5 	bl	8008970 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fcc:	e1e1      	b.n	8007392 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	f040 81de 	bne.w	8007392 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8006fd6:	488f      	ldr	r0, [pc, #572]	; (8007214 <USBH_HandleEnum+0x3a4>)
 8006fd8:	f001 fcb2 	bl	8008940 <iprintf>
 8006fdc:	4892      	ldr	r0, [pc, #584]	; (8007228 <USBH_HandleEnum+0x3b8>)
 8006fde:	f001 fcaf 	bl	8008940 <iprintf>
 8006fe2:	200a      	movs	r0, #10
 8006fe4:	f001 fcc4 	bl	8008970 <putchar>
        phost->device.EnumCnt++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d909      	bls.n	8007016 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007002:	4886      	ldr	r0, [pc, #536]	; (800721c <USBH_HandleEnum+0x3ac>)
 8007004:	f001 fc9c 	bl	8008940 <iprintf>
 8007008:	200a      	movs	r0, #10
 800700a:	f001 fcb1 	bl	8008970 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220d      	movs	r2, #13
 8007012:	701a      	strb	r2, [r3, #0]
      break;
 8007014:	e1bd      	b.n	8007392 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	795b      	ldrb	r3, [r3, #5]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ffeb 	bl	8007ff8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	791b      	ldrb	r3, [r3, #4]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 ffe5 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
      break;
 800703a:	e1aa      	b.n	8007392 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800703c:	2101      	movs	r1, #1
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb02 	bl	8007648 <USBH_SetAddress>
 8007044:	4603      	mov	r3, r0
 8007046:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d13c      	bne.n	80070c8 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800704e:	2002      	movs	r0, #2
 8007050:	f001 fb0a 	bl	8008668 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8007062:	4619      	mov	r1, r3
 8007064:	4871      	ldr	r0, [pc, #452]	; (800722c <USBH_HandleEnum+0x3bc>)
 8007066:	f001 fc6b 	bl	8008940 <iprintf>
 800706a:	200a      	movs	r0, #10
 800706c:	f001 fc80 	bl	8008970 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2203      	movs	r2, #3
 8007074:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7919      	ldrb	r1, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800708a:	b292      	uxth	r2, r2
 800708c:	9202      	str	r2, [sp, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	9201      	str	r2, [sp, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 ff5d 	bl	8007f58 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7959      	ldrb	r1, [r3, #5]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b2:	b292      	uxth	r2, r2
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4603      	mov	r3, r0
 80070be:	2200      	movs	r2, #0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 ff49 	bl	8007f58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070c6:	e166      	b.n	8007396 <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	f040 8163 	bne.w	8007396 <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80070d0:	4850      	ldr	r0, [pc, #320]	; (8007214 <USBH_HandleEnum+0x3a4>)
 80070d2:	f001 fc35 	bl	8008940 <iprintf>
 80070d6:	4856      	ldr	r0, [pc, #344]	; (8007230 <USBH_HandleEnum+0x3c0>)
 80070d8:	f001 fc32 	bl	8008940 <iprintf>
 80070dc:	200a      	movs	r0, #10
 80070de:	f001 fc47 	bl	8008970 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80070e2:	484e      	ldr	r0, [pc, #312]	; (800721c <USBH_HandleEnum+0x3ac>)
 80070e4:	f001 fc2c 	bl	8008940 <iprintf>
 80070e8:	200a      	movs	r0, #10
 80070ea:	f001 fc41 	bl	8008970 <putchar>
        phost->gState = HOST_ABORT_STATE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220d      	movs	r2, #13
 80070f2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	705a      	strb	r2, [r3, #1]
      break;
 80070fa:	e14c      	b.n	8007396 <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070fc:	2109      	movs	r1, #9
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa1e 	bl	8007540 <USBH_Get_CfgDesc>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007114:	e141      	b.n	800739a <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b03      	cmp	r3, #3
 800711a:	f040 813e 	bne.w	800739a <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800711e:	483d      	ldr	r0, [pc, #244]	; (8007214 <USBH_HandleEnum+0x3a4>)
 8007120:	f001 fc0e 	bl	8008940 <iprintf>
 8007124:	4843      	ldr	r0, [pc, #268]	; (8007234 <USBH_HandleEnum+0x3c4>)
 8007126:	f001 fc0b 	bl	8008940 <iprintf>
 800712a:	200a      	movs	r0, #10
 800712c:	f001 fc20 	bl	8008970 <putchar>
        phost->device.EnumCnt++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007146:	2b03      	cmp	r3, #3
 8007148:	d909      	bls.n	800715e <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800714a:	4834      	ldr	r0, [pc, #208]	; (800721c <USBH_HandleEnum+0x3ac>)
 800714c:	f001 fbf8 	bl	8008940 <iprintf>
 8007150:	200a      	movs	r0, #10
 8007152:	f001 fc0d 	bl	8008970 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220d      	movs	r2, #13
 800715a:	701a      	strb	r2, [r3, #0]
      break;
 800715c:	e11d      	b.n	800739a <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	795b      	ldrb	r3, [r3, #5]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 ff47 	bl	8007ff8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 ff41 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
      break;
 8007182:	e10a      	b.n	800739a <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9d7 	bl	8007540 <USBH_Get_CfgDesc>
 8007192:	4603      	mov	r3, r0
 8007194:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2205      	movs	r2, #5
 80071a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071a2:	e0fc      	b.n	800739e <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	f040 80f9 	bne.w	800739e <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80071ac:	4819      	ldr	r0, [pc, #100]	; (8007214 <USBH_HandleEnum+0x3a4>)
 80071ae:	f001 fbc7 	bl	8008940 <iprintf>
 80071b2:	4820      	ldr	r0, [pc, #128]	; (8007234 <USBH_HandleEnum+0x3c4>)
 80071b4:	f001 fbc4 	bl	8008940 <iprintf>
 80071b8:	200a      	movs	r0, #10
 80071ba:	f001 fbd9 	bl	8008970 <putchar>
        phost->device.EnumCnt++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c4:	3301      	adds	r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d909      	bls.n	80071ec <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80071d8:	4810      	ldr	r0, [pc, #64]	; (800721c <USBH_HandleEnum+0x3ac>)
 80071da:	f001 fbb1 	bl	8008940 <iprintf>
 80071de:	200a      	movs	r0, #10
 80071e0:	f001 fbc6 	bl	8008970 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	220d      	movs	r2, #13
 80071e8:	701a      	strb	r2, [r3, #0]
      break;
 80071ea:	e0d8      	b.n	800739e <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	795b      	ldrb	r3, [r3, #5]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 ff00 	bl	8007ff8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fefa 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
      break;
 8007210:	e0c5      	b.n	800739e <USBH_HandleEnum+0x52e>
 8007212:	bf00      	nop
 8007214:	08009b64 	.word	0x08009b64
 8007218:	08009dd0 	.word	0x08009dd0
 800721c:	08009e04 	.word	0x08009e04
 8007220:	08009e44 	.word	0x08009e44
 8007224:	08009e50 	.word	0x08009e50
 8007228:	08009e5c 	.word	0x08009e5c
 800722c:	08009e98 	.word	0x08009e98
 8007230:	08009eb0 	.word	0x08009eb0
 8007234:	08009ee4 	.word	0x08009ee4

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800723e:	2b00      	cmp	r3, #0
 8007240:	d02a      	beq.n	8007298 <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800724e:	23ff      	movs	r3, #255	; 0xff
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f999 	bl	8007588 <USBH_Get_StringDesc>
 8007256:	4603      	mov	r3, r0
 8007258:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10d      	bne.n	800727c <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007266:	4619      	mov	r1, r3
 8007268:	4853      	ldr	r0, [pc, #332]	; (80073b8 <USBH_HandleEnum+0x548>)
 800726a:	f001 fb69 	bl	8008940 <iprintf>
 800726e:	200a      	movs	r0, #10
 8007270:	f001 fb7e 	bl	8008970 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2206      	movs	r2, #6
 8007278:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800727a:	e092      	b.n	80073a2 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b03      	cmp	r3, #3
 8007280:	f040 808f 	bne.w	80073a2 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 8007284:	484d      	ldr	r0, [pc, #308]	; (80073bc <USBH_HandleEnum+0x54c>)
 8007286:	f001 fb5b 	bl	8008940 <iprintf>
 800728a:	200a      	movs	r0, #10
 800728c:	f001 fb70 	bl	8008970 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2206      	movs	r2, #6
 8007294:	705a      	strb	r2, [r3, #1]
      break;
 8007296:	e084      	b.n	80073a2 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 8007298:	4848      	ldr	r0, [pc, #288]	; (80073bc <USBH_HandleEnum+0x54c>)
 800729a:	f001 fb51 	bl	8008940 <iprintf>
 800729e:	200a      	movs	r0, #10
 80072a0:	f001 fb66 	bl	8008970 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2206      	movs	r2, #6
 80072a8:	705a      	strb	r2, [r3, #1]
      break;
 80072aa:	e07a      	b.n	80073a2 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d029      	beq.n	800730a <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072c2:	23ff      	movs	r3, #255	; 0xff
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f95f 	bl	8007588 <USBH_Get_StringDesc>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10d      	bne.n	80072f0 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072da:	4619      	mov	r1, r3
 80072dc:	4838      	ldr	r0, [pc, #224]	; (80073c0 <USBH_HandleEnum+0x550>)
 80072de:	f001 fb2f 	bl	8008940 <iprintf>
 80072e2:	200a      	movs	r0, #10
 80072e4:	f001 fb44 	bl	8008970 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2207      	movs	r2, #7
 80072ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072ee:	e05a      	b.n	80073a6 <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d157      	bne.n	80073a6 <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 80072f6:	4833      	ldr	r0, [pc, #204]	; (80073c4 <USBH_HandleEnum+0x554>)
 80072f8:	f001 fb22 	bl	8008940 <iprintf>
 80072fc:	200a      	movs	r0, #10
 80072fe:	f001 fb37 	bl	8008970 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2207      	movs	r2, #7
 8007306:	705a      	strb	r2, [r3, #1]
      break;
 8007308:	e04d      	b.n	80073a6 <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 800730a:	482e      	ldr	r0, [pc, #184]	; (80073c4 <USBH_HandleEnum+0x554>)
 800730c:	f001 fb18 	bl	8008940 <iprintf>
 8007310:	200a      	movs	r0, #10
 8007312:	f001 fb2d 	bl	8008970 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2207      	movs	r2, #7
 800731a:	705a      	strb	r2, [r3, #1]
      break;
 800731c:	e043      	b.n	80073a6 <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007324:	2b00      	cmp	r3, #0
 8007326:	d027      	beq.n	8007378 <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007334:	23ff      	movs	r3, #255	; 0xff
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f926 	bl	8007588 <USBH_Get_StringDesc>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10c      	bne.n	8007360 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800734c:	4619      	mov	r1, r3
 800734e:	481e      	ldr	r0, [pc, #120]	; (80073c8 <USBH_HandleEnum+0x558>)
 8007350:	f001 faf6 	bl	8008940 <iprintf>
 8007354:	200a      	movs	r0, #10
 8007356:	f001 fb0b 	bl	8008970 <putchar>
          Status = USBH_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800735e:	e024      	b.n	80073aa <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d121      	bne.n	80073aa <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 8007366:	4819      	ldr	r0, [pc, #100]	; (80073cc <USBH_HandleEnum+0x55c>)
 8007368:	f001 faea 	bl	8008940 <iprintf>
 800736c:	200a      	movs	r0, #10
 800736e:	f001 faff 	bl	8008970 <putchar>
          Status = USBH_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
      break;
 8007376:	e018      	b.n	80073aa <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 8007378:	4814      	ldr	r0, [pc, #80]	; (80073cc <USBH_HandleEnum+0x55c>)
 800737a:	f001 fae1 	bl	8008940 <iprintf>
 800737e:	200a      	movs	r0, #10
 8007380:	f001 faf6 	bl	8008970 <putchar>
        Status = USBH_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
      break;
 8007388:	e00f      	b.n	80073aa <USBH_HandleEnum+0x53a>

    default:
      break;
 800738a:	bf00      	nop
 800738c:	e00e      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 800738e:	bf00      	nop
 8007390:	e00c      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 8007392:	bf00      	nop
 8007394:	e00a      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 8007396:	bf00      	nop
 8007398:	e008      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 800739a:	bf00      	nop
 800739c:	e006      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 800739e:	bf00      	nop
 80073a0:	e004      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <USBH_HandleEnum+0x53c>
      break;
 80073aa:	bf00      	nop
  }
  return Status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	08009f28 	.word	0x08009f28
 80073bc:	08009f3c 	.word	0x08009f3c
 80073c0:	08009f50 	.word	0x08009f50
 80073c4:	08009f60 	.word	0x08009f60
 80073c8:	08009f70 	.word	0x08009f70
 80073cc:	08009f84 	.word	0x08009f84

080073d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f804 	bl	8007412 <USBH_HandleSof>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b0b      	cmp	r3, #11
 8007422:	d10a      	bne.n	800743a <USBH_HandleSof+0x28>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
  }
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007452:	bf00      	nop
}
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800746e:	bf00      	nop
}
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff86 	bl	80083da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fd8f 	bl	8007ff8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	795b      	ldrb	r3, [r3, #5]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fd89 	bl	8007ff8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	b29b      	uxth	r3, r3
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f864 	bl	80075de <USBH_GetDescriptor>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	b292      	uxth	r2, r2
 8007530:	4619      	mov	r1, r3
 8007532:	f000 f918 	bl	8007766 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	331c      	adds	r3, #28
 8007550:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f83d 	bl	80075de <USBH_GetDescriptor>
 8007564:	4603      	mov	r3, r0
 8007566:	72fb      	strb	r3, [r7, #11]
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007574:	887a      	ldrh	r2, [r7, #2]
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f964 	bl	8007846 <USBH_ParseCfgDesc>
  }

  return status;
 800757e:	7afb      	ldrb	r3, [r7, #11]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	461a      	mov	r2, r3
 8007594:	460b      	mov	r3, r1
 8007596:	72fb      	strb	r3, [r7, #11]
 8007598:	4613      	mov	r3, r2
 800759a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	460b      	mov	r3, r1
 80075b2:	2100      	movs	r1, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f812 	bl	80075de <USBH_GetDescriptor>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d107      	bne.n	80075d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075ca:	893a      	ldrh	r2, [r7, #8]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fa37 	bl	8007a42 <USBH_ParseStringDesc>
  }

  return status;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	607b      	str	r3, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	72fb      	strb	r3, [r7, #11]
 80075ec:	4613      	mov	r3, r2
 80075ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	789b      	ldrb	r3, [r3, #2]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d11c      	bne.n	8007632 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2206      	movs	r2, #6
 8007608:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	893a      	ldrh	r2, [r7, #8]
 800760e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800761a:	d104      	bne.n	8007626 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f240 4209 	movw	r2, #1033	; 0x409
 8007622:	829a      	strh	r2, [r3, #20]
 8007624:	e002      	b.n	800762c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8b3a      	ldrh	r2, [r7, #24]
 8007630:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007632:	8b3b      	ldrh	r3, [r7, #24]
 8007634:	461a      	mov	r2, r3
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fa50 	bl	8007ade <USBH_CtlReq>
 800763e:	4603      	mov	r3, r0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	789b      	ldrb	r3, [r3, #2]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d10f      	bne.n	800767c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2205      	movs	r2, #5
 8007666:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800767c:	2200      	movs	r2, #0
 800767e:	2100      	movs	r1, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fa2c 	bl	8007ade <USBH_CtlReq>
 8007686:	4603      	mov	r3, r0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	789b      	ldrb	r3, [r3, #2]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d10e      	bne.n	80076c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2209      	movs	r2, #9
 80076ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	887a      	ldrh	r2, [r7, #2]
 80076b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa09 	bl	8007ade <USBH_CtlReq>
 80076cc:	4603      	mov	r3, r0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	789b      	ldrb	r3, [r3, #2]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d10f      	bne.n	800770a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2203      	movs	r2, #3
 80076f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9e5 	bl	8007ade <USBH_CtlReq>
 8007714:	4603      	mov	r3, r0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	789b      	ldrb	r3, [r3, #2]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10f      	bne.n	8007752 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9c1 	bl	8007ade <USBH_CtlReq>
 800775c:	4603      	mov	r3, r0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	4613      	mov	r3, r2
 8007772:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	785a      	ldrb	r2, [r3, #1]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	3302      	adds	r3, #2
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b29a      	uxth	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3303      	adds	r3, #3
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	791a      	ldrb	r2, [r3, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	795a      	ldrb	r2, [r3, #5]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	799a      	ldrb	r2, [r3, #6]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	79da      	ldrb	r2, [r3, #7]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d939      	bls.n	800783a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3308      	adds	r3, #8
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3309      	adds	r3, #9
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	330a      	adds	r3, #10
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	330b      	adds	r3, #11
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	330c      	adds	r3, #12
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b29a      	uxth	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	330d      	adds	r3, #13
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	7b9a      	ldrb	r2, [r3, #14]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	7bda      	ldrb	r2, [r3, #15]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	7c1a      	ldrb	r2, [r3, #16]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	7c5a      	ldrb	r2, [r3, #17]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	745a      	strb	r2, [r3, #17]
  }
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b08a      	sub	sp, #40	; 0x28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	4613      	mov	r3, r2
 8007852:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	785a      	ldrb	r2, [r3, #1]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3302      	adds	r3, #2
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3303      	adds	r3, #3
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	791a      	ldrb	r2, [r3, #4]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	795a      	ldrb	r2, [r3, #5]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	799a      	ldrb	r2, [r3, #6]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	79da      	ldrb	r2, [r3, #7]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	7a1a      	ldrb	r2, [r3, #8]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	d95f      	bls.n	8007982 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078c2:	2309      	movs	r3, #9
 80078c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078ca:	e051      	b.n	8007970 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078cc:	f107 0316 	add.w	r3, r7, #22
 80078d0:	4619      	mov	r1, r3
 80078d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d4:	f000 f8e8 	bl	8007aa8 <USBH_GetNextDesc>
 80078d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d146      	bne.n	8007970 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80078e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e6:	221a      	movs	r2, #26
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	3308      	adds	r3, #8
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	3302      	adds	r3, #2
 80078f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f8:	69f8      	ldr	r0, [r7, #28]
 80078fa:	f000 f846 	bl	800798a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007904:	2300      	movs	r3, #0
 8007906:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007908:	e022      	b.n	8007950 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800790a:	f107 0316 	add.w	r3, r7, #22
 800790e:	4619      	mov	r1, r3
 8007910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007912:	f000 f8c9 	bl	8007aa8 <USBH_GetNextDesc>
 8007916:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	2b05      	cmp	r3, #5
 800791e:	d117      	bne.n	8007950 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007924:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007928:	3201      	adds	r2, #1
 800792a:	00d2      	lsls	r2, r2, #3
 800792c:	211a      	movs	r1, #26
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	3308      	adds	r3, #8
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800793e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007940:	69b8      	ldr	r0, [r7, #24]
 8007942:	f000 f851 	bl	80079e8 <USBH_ParseEPDesc>
            ep_ix++;
 8007946:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800794a:	3301      	adds	r3, #1
 800794c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007958:	429a      	cmp	r2, r3
 800795a:	d204      	bcs.n	8007966 <USBH_ParseCfgDesc+0x120>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	885a      	ldrh	r2, [r3, #2]
 8007960:	8afb      	ldrh	r3, [r7, #22]
 8007962:	429a      	cmp	r2, r3
 8007964:	d8d1      	bhi.n	800790a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800796a:	3301      	adds	r3, #1
 800796c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007974:	2b01      	cmp	r3, #1
 8007976:	d804      	bhi.n	8007982 <USBH_ParseCfgDesc+0x13c>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	885a      	ldrh	r2, [r3, #2]
 800797c:	8afb      	ldrh	r3, [r7, #22]
 800797e:	429a      	cmp	r2, r3
 8007980:	d8a4      	bhi.n	80078cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007982:	bf00      	nop
 8007984:	3728      	adds	r7, #40	; 0x28
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785a      	ldrb	r2, [r3, #1]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	789a      	ldrb	r2, [r3, #2]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	78da      	ldrb	r2, [r3, #3]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	791a      	ldrb	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	795a      	ldrb	r2, [r3, #5]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	799a      	ldrb	r2, [r3, #6]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	79da      	ldrb	r2, [r3, #7]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	7a1a      	ldrb	r2, [r3, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	721a      	strb	r2, [r3, #8]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785a      	ldrb	r2, [r3, #1]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	789a      	ldrb	r2, [r3, #2]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	78da      	ldrb	r2, [r3, #3]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3304      	adds	r3, #4
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	3305      	adds	r3, #5
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	799a      	ldrb	r2, [r3, #6]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	719a      	strb	r2, [r3, #6]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d120      	bne.n	8007a9c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	1e9a      	subs	r2, r3, #2
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	4293      	cmp	r3, r2
 8007a64:	bf28      	it	cs
 8007a66:	4613      	movcs	r3, r2
 8007a68:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a70:	2300      	movs	r3, #0
 8007a72:	82fb      	strh	r3, [r7, #22]
 8007a74:	e00b      	b.n	8007a8e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a76:	8afb      	ldrh	r3, [r7, #22]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a88:	8afb      	ldrh	r3, [r7, #22]
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	82fb      	strh	r3, [r7, #22]
 8007a8e:	8afa      	ldrh	r2, [r7, #22]
 8007a90:	8abb      	ldrh	r3, [r7, #20]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3ef      	bcc.n	8007a76 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	881a      	ldrh	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007aec:	2301      	movs	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	789b      	ldrb	r3, [r3, #2]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d002      	beq.n	8007afe <USBH_CtlReq+0x20>
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d00f      	beq.n	8007b1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007afc:	e027      	b.n	8007b4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2202      	movs	r2, #2
 8007b14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1a:	e018      	b.n	8007b4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f81b 	bl	8007b58 <USBH_HandleControl>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <USBH_CtlReq+0x54>
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d106      	bne.n	8007b40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	761a      	strb	r2, [r3, #24]
      break;
 8007b3e:	e005      	b.n	8007b4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d102      	bne.n	8007b4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	709a      	strb	r2, [r3, #2]
      break;
 8007b4c:	bf00      	nop
  }
  return status;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	7e1b      	ldrb	r3, [r3, #24]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b0a      	cmp	r3, #10
 8007b70:	f200 8161 	bhi.w	8007e36 <USBH_HandleControl+0x2de>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USBH_HandleControl+0x24>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	08007bc3 	.word	0x08007bc3
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c53 	.word	0x08007c53
 8007b8c:	08007c8b 	.word	0x08007c8b
 8007b90:	08007cb7 	.word	0x08007cb7
 8007b94:	08007d09 	.word	0x08007d09
 8007b98:	08007d2b 	.word	0x08007d2b
 8007b9c:	08007d67 	.word	0x08007d67
 8007ba0:	08007d8f 	.word	0x08007d8f
 8007ba4:	08007dcd 	.word	0x08007dcd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f103 0110 	add.w	r1, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	795b      	ldrb	r3, [r3, #5]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f953 	bl	8007e60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	761a      	strb	r2, [r3, #24]
      break;
 8007bc0:	e144      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	795b      	ldrb	r3, [r3, #5]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fcf3 	bl	80085b4 <USBH_LL_GetURBState>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d11e      	bne.n	8007c16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7c1b      	ldrb	r3, [r3, #16]
 8007bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007be0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8adb      	ldrh	r3, [r3, #22]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007bea:	7b7b      	ldrb	r3, [r7, #13]
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d103      	bne.n	8007bf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bf6:	e120      	b.n	8007e3a <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_DATA_OUT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2205      	movs	r2, #5
 8007bfc:	761a      	strb	r2, [r3, #24]
      break;
 8007bfe:	e11c      	b.n	8007e3a <USBH_HandleControl+0x2e2>
          if (direction == USB_D2H)
 8007c00:	7b7b      	ldrb	r3, [r7, #13]
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d103      	bne.n	8007c0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2209      	movs	r2, #9
 8007c0a:	761a      	strb	r2, [r3, #24]
      break;
 8007c0c:	e115      	b.n	8007e3a <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_STATUS_IN;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2207      	movs	r2, #7
 8007c12:	761a      	strb	r2, [r3, #24]
      break;
 8007c14:	e111      	b.n	8007e3a <USBH_HandleControl+0x2e2>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d003      	beq.n	8007c24 <USBH_HandleControl+0xcc>
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	f040 810b 	bne.w	8007e3a <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220b      	movs	r2, #11
 8007c28:	761a      	strb	r2, [r3, #24]
      break;
 8007c2a:	e106      	b.n	8007e3a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6899      	ldr	r1, [r3, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	899a      	ldrh	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f94a 	bl	8007ede <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	761a      	strb	r2, [r3, #24]
      break;
 8007c50:	e0fc      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	791b      	ldrb	r3, [r3, #4]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fcab 	bl	80085b4 <USBH_LL_GetURBState>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d102      	bne.n	8007c6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2209      	movs	r2, #9
 8007c6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b05      	cmp	r3, #5
 8007c72:	d102      	bne.n	8007c7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c78:	e0e1      	b.n	8007e3e <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	f040 80de 	bne.w	8007e3e <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	220b      	movs	r2, #11
 8007c86:	761a      	strb	r2, [r3, #24]
      break;
 8007c88:	e0d9      	b.n	8007e3e <USBH_HandleControl+0x2e6>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6899      	ldr	r1, [r3, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	899a      	ldrh	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7958      	ldrb	r0, [r3, #5]
 8007c96:	2301      	movs	r3, #1
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8f9 	bl	8007e94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2206      	movs	r2, #6
 8007cb2:	761a      	strb	r2, [r3, #24]
      break;
 8007cb4:	e0ca      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fc79 	bl	80085b4 <USBH_LL_GetURBState>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d103      	bne.n	8007cd4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2207      	movs	r2, #7
 8007cd0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cd2:	e0b6      	b.n	8007e42 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_STALL)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d105      	bne.n	8007ce6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	220c      	movs	r2, #12
 8007cde:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e0ad      	b.n	8007e42 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d103      	bne.n	8007cf4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2205      	movs	r2, #5
 8007cf0:	761a      	strb	r2, [r3, #24]
      break;
 8007cf2:	e0a6      	b.n	8007e42 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_ERROR)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	f040 80a3 	bne.w	8007e42 <USBH_HandleControl+0x2ea>
          phost->Control.state = CTRL_ERROR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	220b      	movs	r2, #11
 8007d00:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d02:	2302      	movs	r3, #2
 8007d04:	73fb      	strb	r3, [r7, #15]
      break;
 8007d06:	e09c      	b.n	8007e42 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	791b      	ldrb	r3, [r3, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8e4 	bl	8007ede <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2208      	movs	r2, #8
 8007d26:	761a      	strb	r2, [r3, #24]

      break;
 8007d28:	e090      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc3f 	bl	80085b4 <USBH_LL_GetURBState>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	220d      	movs	r2, #13
 8007d44:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d4a:	e07c      	b.n	8007e46 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_ERROR)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d103      	bne.n	8007d5a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	220b      	movs	r2, #11
 8007d56:	761a      	strb	r2, [r3, #24]
      break;
 8007d58:	e075      	b.n	8007e46 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_STALL)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d172      	bne.n	8007e46 <USBH_HandleControl+0x2ee>
          status = USBH_NOT_SUPPORTED;
 8007d60:	2303      	movs	r3, #3
 8007d62:	73fb      	strb	r3, [r7, #15]
      break;
 8007d64:	e06f      	b.n	8007e46 <USBH_HandleControl+0x2ee>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795a      	ldrb	r2, [r3, #5]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f88d 	bl	8007e94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220a      	movs	r2, #10
 8007d8a:	761a      	strb	r2, [r3, #24]
      break;
 8007d8c:	e05e      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	795b      	ldrb	r3, [r3, #5]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc0d 	bl	80085b4 <USBH_LL_GetURBState>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220d      	movs	r2, #13
 8007dac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dae:	e04c      	b.n	8007e4a <USBH_HandleControl+0x2f2>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d103      	bne.n	8007dbe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2209      	movs	r2, #9
 8007dba:	761a      	strb	r2, [r3, #24]
      break;
 8007dbc:	e045      	b.n	8007e4a <USBH_HandleControl+0x2f2>
        if (URB_Status == USBH_URB_ERROR)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d142      	bne.n	8007e4a <USBH_HandleControl+0x2f2>
          phost->Control.state = CTRL_ERROR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220b      	movs	r2, #11
 8007dc8:	761a      	strb	r2, [r3, #24]
      break;
 8007dca:	e03e      	b.n	8007e4a <USBH_HandleControl+0x2f2>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7e5b      	ldrb	r3, [r3, #25]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	765a      	strb	r2, [r3, #25]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7e5b      	ldrb	r3, [r3, #25]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d806      	bhi.n	8007dee <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007dec:	e02e      	b.n	8007e4c <USBH_HandleControl+0x2f4>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007df4:	2106      	movs	r1, #6
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8007e00:	4815      	ldr	r0, [pc, #84]	; (8007e58 <USBH_HandleControl+0x300>)
 8007e02:	f000 fd9d 	bl	8008940 <iprintf>
 8007e06:	4815      	ldr	r0, [pc, #84]	; (8007e5c <USBH_HandleControl+0x304>)
 8007e08:	f000 fd9a 	bl	8008940 <iprintf>
 8007e0c:	200a      	movs	r0, #10
 8007e0e:	f000 fdaf 	bl	8008970 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	795b      	ldrb	r3, [r3, #5]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8ed 	bl	8007ff8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	791b      	ldrb	r3, [r3, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8e7 	bl	8007ff8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e30:	2302      	movs	r3, #2
 8007e32:	73fb      	strb	r3, [r7, #15]
      break;
 8007e34:	e00a      	b.n	8007e4c <USBH_HandleControl+0x2f4>

    default:
      break;
 8007e36:	bf00      	nop
 8007e38:	e008      	b.n	8007e4c <USBH_HandleControl+0x2f4>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e006      	b.n	8007e4c <USBH_HandleControl+0x2f4>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <USBH_HandleControl+0x2f4>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <USBH_HandleControl+0x2f4>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <USBH_HandleControl+0x2f4>
      break;
 8007e4a:	bf00      	nop
  }

  return status;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08009f98 	.word	0x08009f98
 8007e5c:	08009fa0 	.word	0x08009fa0

08007e60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e6e:	79f9      	ldrb	r1, [r7, #7]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	2308      	movs	r3, #8
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb64 	bl	8008552 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eb8:	7979      	ldrb	r1, [r7, #5]
 8007eba:	7e3b      	ldrb	r3, [r7, #24]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fb3f 	bl	8008552 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	461a      	mov	r2, r3
 8007eec:	460b      	mov	r3, r1
 8007eee:	80fb      	strh	r3, [r7, #6]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ef4:	7979      	ldrb	r1, [r7, #5]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	2201      	movs	r2, #1
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fb21 	bl	8008552 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f10:	2300      	movs	r3, #0

}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af04      	add	r7, sp, #16
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	460b      	mov	r3, r1
 8007f2a:	71fb      	strb	r3, [r7, #7]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	79b9      	ldrb	r1, [r7, #6]
 8007f36:	2200      	movs	r2, #0
 8007f38:	9203      	str	r2, [sp, #12]
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	2301      	movs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2303      	movs	r3, #3
 8007f46:	2201      	movs	r2, #1
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fb02 	bl	8008552 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	461a      	mov	r2, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	70fb      	strb	r3, [r7, #3]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70bb      	strb	r3, [r7, #2]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f72:	7878      	ldrb	r0, [r7, #1]
 8007f74:	78ba      	ldrb	r2, [r7, #2]
 8007f76:	78f9      	ldrb	r1, [r7, #3]
 8007f78:	8b3b      	ldrh	r3, [r7, #24]
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	7d3b      	ldrb	r3, [r7, #20]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	7c3b      	ldrb	r3, [r7, #16]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa95 	bl	80084b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fab4 	bl	8008514 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f837 	bl	8008036 <USBH_GetFreePipe>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00a      	beq.n	8007fec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	33e0      	adds	r3, #224	; 0xe0
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fec:	89fb      	ldrh	r3, [r7, #14]
 8007fee:	b2db      	uxtb	r3, r3
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2b0a      	cmp	r3, #10
 8008008:	d80e      	bhi.n	8008028 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800800a:	78f8      	ldrb	r0, [r7, #3]
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	33e0      	adds	r3, #224	; 0xe0
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
 8008046:	e00f      	b.n	8008068 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	33e0      	adds	r3, #224	; 0xe0
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	b29b      	uxth	r3, r3
 8008060:	e007      	b.n	8008072 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	3301      	adds	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	2b0a      	cmp	r3, #10
 800806c:	d9ec      	bls.n	8008048 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800806e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008084:	2201      	movs	r2, #1
 8008086:	490e      	ldr	r1, [pc, #56]	; (80080c0 <MX_USB_HOST_Init+0x40>)
 8008088:	480e      	ldr	r0, [pc, #56]	; (80080c4 <MX_USB_HOST_Init+0x44>)
 800808a:	f7fe faf7 	bl	800667c <USBH_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008094:	f7f8 fc74 	bl	8000980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8008098:	490b      	ldr	r1, [pc, #44]	; (80080c8 <MX_USB_HOST_Init+0x48>)
 800809a:	480a      	ldr	r0, [pc, #40]	; (80080c4 <MX_USB_HOST_Init+0x44>)
 800809c:	f7fe fb8a 	bl	80067b4 <USBH_RegisterClass>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080a6:	f7f8 fc6b 	bl	8000980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080aa:	4806      	ldr	r0, [pc, #24]	; (80080c4 <MX_USB_HOST_Init+0x44>)
 80080ac:	f7fe fc70 	bl	8006990 <USBH_Start>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080b6:	f7f8 fc63 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080ba:	bf00      	nop
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	080080e1 	.word	0x080080e1
 80080c4:	20000184 	.word	0x20000184
 80080c8:	2000000c 	.word	0x2000000c

080080cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80080d0:	4802      	ldr	r0, [pc, #8]	; (80080dc <MX_USB_HOST_Process+0x10>)
 80080d2:	f7fe fc6d 	bl	80069b0 <USBH_Process>
}
 80080d6:	bf00      	nop
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000184 	.word	0x20000184

080080e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d819      	bhi.n	8008128 <USBH_UserProcess+0x48>
 80080f4:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <USBH_UserProcess+0x1c>)
 80080f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fa:	bf00      	nop
 80080fc:	08008129 	.word	0x08008129
 8008100:	08008119 	.word	0x08008119
 8008104:	08008129 	.word	0x08008129
 8008108:	08008121 	.word	0x08008121
 800810c:	08008111 	.word	0x08008111
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008110:	4b09      	ldr	r3, [pc, #36]	; (8008138 <USBH_UserProcess+0x58>)
 8008112:	2203      	movs	r2, #3
 8008114:	701a      	strb	r2, [r3, #0]
  break;
 8008116:	e008      	b.n	800812a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <USBH_UserProcess+0x58>)
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
  break;
 800811e:	e004      	b.n	800812a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <USBH_UserProcess+0x58>)
 8008122:	2201      	movs	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
  break;
 8008126:	e000      	b.n	800812a <USBH_UserProcess+0x4a>

  default:
  break;
 8008128:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	200000b0 	.word	0x200000b0

0800813c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b0ae      	sub	sp, #184	; 0xb8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	609a      	str	r2, [r3, #8]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008154:	f107 0318 	add.w	r3, r7, #24
 8008158:	228c      	movs	r2, #140	; 0x8c
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fb3b 	bl	80087d8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800816a:	f040 8085 	bne.w	8008278 <HAL_HCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800816e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008172:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800817c:	2301      	movs	r3, #1
 800817e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8008180:	2305      	movs	r3, #5
 8008182:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8008184:	2314      	movs	r3, #20
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8008188:	2302      	movs	r3, #2
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800818c:	2302      	movs	r3, #2
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008190:	2302      	movs	r3, #2
 8008192:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008194:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800819a:	f107 0318 	add.w	r3, r7, #24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fb fad6 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 80081aa:	f7f8 fbe9 	bl	8000980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ae:	4a34      	ldr	r2, [pc, #208]	; (8008280 <HAL_HCD_MspInit+0x144>)
 80081b0:	4b33      	ldr	r3, [pc, #204]	; (8008280 <HAL_HCD_MspInit+0x144>)
 80081b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ba:	4b31      	ldr	r3, [pc, #196]	; (8008280 <HAL_HCD_MspInit+0x144>)
 80081bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80081c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80081ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ce:	2302      	movs	r3, #2
 80081d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081da:	2303      	movs	r3, #3
 80081dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081e0:	230a      	movs	r3, #10
 80081e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081ea:	4619      	mov	r1, r3
 80081ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081f0:	f7f8 feb6 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80081f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008208:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800820c:	4619      	mov	r1, r3
 800820e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008212:	f7f8 fea5 	bl	8000f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008216:	4a1a      	ldr	r2, [pc, #104]	; (8008280 <HAL_HCD_MspInit+0x144>)
 8008218:	4b19      	ldr	r3, [pc, #100]	; (8008280 <HAL_HCD_MspInit+0x144>)
 800821a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008222:	4b17      	ldr	r3, [pc, #92]	; (8008280 <HAL_HCD_MspInit+0x144>)
 8008224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <HAL_HCD_MspInit+0x144>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d114      	bne.n	8008264 <HAL_HCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800823a:	4a11      	ldr	r2, [pc, #68]	; (8008280 <HAL_HCD_MspInit+0x144>)
 800823c:	4b10      	ldr	r3, [pc, #64]	; (8008280 <HAL_HCD_MspInit+0x144>)
 800823e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008244:	6593      	str	r3, [r2, #88]	; 0x58
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <HAL_HCD_MspInit+0x144>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008252:	f7fa fc23 	bl	8002a9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008256:	4a0a      	ldr	r2, [pc, #40]	; (8008280 <HAL_HCD_MspInit+0x144>)
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <HAL_HCD_MspInit+0x144>)
 800825a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008260:	6593      	str	r3, [r2, #88]	; 0x58
 8008262:	e001      	b.n	8008268 <HAL_HCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008264:	f7fa fc1a 	bl	8002a9c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	2043      	movs	r0, #67	; 0x43
 800826e:	f7f8 fe40 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008272:	2043      	movs	r0, #67	; 0x43
 8008274:	f7f8 fe59 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008278:	bf00      	nop
 800827a:	37b8      	adds	r7, #184	; 0xb8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40021000 	.word	0x40021000

08008284 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff f8ab 	bl	80073ee <USBH_LL_IncTimer>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff f8e3 	bl	800747a <USBH_LL_Connect>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff f8ec 	bl	80074a8 <USBH_LL_Disconnect>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
 80082e4:	4613      	mov	r3, r2
 80082e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff f89d 	bl	8007442 <USBH_LL_PortEnabled>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff f89d 	bl	800745e <USBH_LL_PortDisabled>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800833a:	2b01      	cmp	r3, #1
 800833c:	d12a      	bne.n	8008394 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800833e:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <USBH_LL_Init+0x74>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <USBH_LL_Init+0x74>)
 800834a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <USBH_LL_Init+0x74>)
 8008350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008354:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008356:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <USBH_LL_Init+0x74>)
 8008358:	220c      	movs	r2, #12
 800835a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <USBH_LL_Init+0x74>)
 800835e:	2201      	movs	r2, #1
 8008360:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <USBH_LL_Init+0x74>)
 8008364:	2200      	movs	r2, #0
 8008366:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <USBH_LL_Init+0x74>)
 800836a:	2202      	movs	r2, #2
 800836c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <USBH_LL_Init+0x74>)
 8008370:	2200      	movs	r2, #0
 8008372:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008374:	480a      	ldr	r0, [pc, #40]	; (80083a0 <USBH_LL_Init+0x74>)
 8008376:	f7f8 ff9d 	bl	80012b4 <HAL_HCD_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008380:	f7f8 fafe 	bl	8000980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008384:	4806      	ldr	r0, [pc, #24]	; (80083a0 <USBH_LL_Init+0x74>)
 8008386:	f7f9 fb7c 	bl	8001a82 <HAL_HCD_GetCurrentFrame>
 800838a:	4603      	mov	r3, r0
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff f81e 	bl	80073d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	2000055c 	.word	0x2000055c

080083a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7f9 faeb 	bl	8001996 <HAL_HCD_Start>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f95a 	bl	8008680 <USBH_Get_USB_Status>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7f9 faf3 	bl	80019dc <HAL_HCD_Stop>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f93f 	bl	8008680 <USBH_Get_USB_Status>
 8008402:	4603      	mov	r3, r0
 8008404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008406:	7bbb      	ldrb	r3, [r7, #14]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 fb3b 	bl	8001a9e <HAL_HCD_GetCurrentSpeed>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d007      	beq.n	800843e <USBH_LL_GetSpeed+0x2e>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d302      	bcc.n	8008438 <USBH_LL_GetSpeed+0x28>
 8008432:	2b02      	cmp	r3, #2
 8008434:	d006      	beq.n	8008444 <USBH_LL_GetSpeed+0x34>
 8008436:	e008      	b.n	800844a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e008      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e005      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008444:	2302      	movs	r3, #2
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	e002      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
    break;
 800844e:	bf00      	nop
  }
  return  speed;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008470:	4618      	mov	r0, r3
 8008472:	f7f9 fad0 	bl	8001a16 <HAL_HCD_ResetPort>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f8ff 	bl	8008680 <USBH_Get_USB_Status>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008486:	7bbb      	ldrb	r3, [r7, #14]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f9 fad7 	bl	8001a5a <HAL_HCD_HC_GetXferCount>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084b6:	b590      	push	{r4, r7, lr}
 80084b8:	b089      	sub	sp, #36	; 0x24
 80084ba:	af04      	add	r7, sp, #16
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	4608      	mov	r0, r1
 80084c0:	4611      	mov	r1, r2
 80084c2:	461a      	mov	r2, r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	70fb      	strb	r3, [r7, #3]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70bb      	strb	r3, [r7, #2]
 80084cc:	4613      	mov	r3, r2
 80084ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084de:	787c      	ldrb	r4, [r7, #1]
 80084e0:	78ba      	ldrb	r2, [r7, #2]
 80084e2:	78f9      	ldrb	r1, [r7, #3]
 80084e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4623      	mov	r3, r4
 80084f6:	f7f8 ff3f 	bl	8001378 <HAL_HCD_HC_Init>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f8bd 	bl	8008680 <USBH_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	bd90      	pop	{r4, r7, pc}

08008514 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7f8 ffaf 	bl	8001496 <HAL_HCD_HC_Halt>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f89e 	bl	8008680 <USBH_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008552:	b590      	push	{r4, r7, lr}
 8008554:	b089      	sub	sp, #36	; 0x24
 8008556:	af04      	add	r7, sp, #16
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800857a:	787c      	ldrb	r4, [r7, #1]
 800857c:	78ba      	ldrb	r2, [r7, #2]
 800857e:	78f9      	ldrb	r1, [r7, #3]
 8008580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4623      	mov	r3, r4
 8008596:	f7f8 ffa1 	bl	80014dc <HAL_HCD_HC_SubmitRequest>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f86d 	bl	8008680 <USBH_Get_USB_Status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd90      	pop	{r4, r7, pc}

080085b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f9 fa31 	bl	8001a32 <HAL_HCD_HC_GetURBState>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d103      	bne.n	80085f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f870 	bl	80086d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085f8:	20c8      	movs	r0, #200	; 0xc8
 80085fa:	f7f8 fb7f 	bl	8000cfc <HAL_Delay>
  return USBH_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
 8008614:	4613      	mov	r3, r2
 8008616:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800861e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	212c      	movs	r1, #44	; 0x2c
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	4413      	add	r3, r2
 800862c:	333b      	adds	r3, #59	; 0x3b
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	212c      	movs	r1, #44	; 0x2c
 800863a:	fb01 f303 	mul.w	r3, r1, r3
 800863e:	4413      	add	r3, r2
 8008640:	3354      	adds	r3, #84	; 0x54
 8008642:	78ba      	ldrb	r2, [r7, #2]
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e008      	b.n	800865a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	212c      	movs	r1, #44	; 0x2c
 800864e:	fb01 f303 	mul.w	r3, r1, r3
 8008652:	4413      	add	r3, r2
 8008654:	3355      	adds	r3, #85	; 0x55
 8008656:	78ba      	ldrb	r2, [r7, #2]
 8008658:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7f8 fb43 	bl	8000cfc <HAL_Delay>
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2b03      	cmp	r3, #3
 8008692:	d817      	bhi.n	80086c4 <USBH_Get_USB_Status+0x44>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <USBH_Get_USB_Status+0x1c>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086b3 	.word	0x080086b3
 80086a4:	080086b9 	.word	0x080086b9
 80086a8:	080086bf 	.word	0x080086bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
    break;
 80086b0:	e00b      	b.n	80086ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086b2:	2302      	movs	r3, #2
 80086b4:	73fb      	strb	r3, [r7, #15]
    break;
 80086b6:	e008      	b.n	80086ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
    break;
 80086bc:	e005      	b.n	80086ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80086be:	2302      	movs	r3, #2
 80086c0:	73fb      	strb	r3, [r7, #15]
    break;
 80086c2:	e002      	b.n	80086ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80086c4:	2302      	movs	r3, #2
 80086c6:	73fb      	strb	r3, [r7, #15]
    break;
 80086c8:	bf00      	nop
  }
  return usb_status;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e001      	b.n	80086f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80086f2:	2301      	movs	r3, #1
 80086f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	461a      	mov	r2, r3
 80086fa:	2140      	movs	r1, #64	; 0x40
 80086fc:	4803      	ldr	r0, [pc, #12]	; (800870c <MX_DriverVbusFS+0x34>)
 80086fe:	f7f8 fdc1 	bl	8001284 <HAL_GPIO_WritePin>
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	48001800 	.word	0x48001800

08008710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008714:	f7f8 fa6c 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008718:	480c      	ldr	r0, [pc, #48]	; (800874c <LoopForever+0x6>)
  ldr r1, =_edata
 800871a:	490d      	ldr	r1, [pc, #52]	; (8008750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800871c:	4a0d      	ldr	r2, [pc, #52]	; (8008754 <LoopForever+0xe>)
  movs r3, #0
 800871e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008720:	e002      	b.n	8008728 <LoopCopyDataInit>

08008722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008726:	3304      	adds	r3, #4

08008728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800872a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800872c:	d3f9      	bcc.n	8008722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800872e:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008730:	4c0a      	ldr	r4, [pc, #40]	; (800875c <LoopForever+0x16>)
  movs r3, #0
 8008732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008734:	e001      	b.n	800873a <LoopFillZerobss>

08008736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008738:	3204      	adds	r2, #4

0800873a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800873a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800873c:	d3fb      	bcc.n	8008736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800873e:	f000 f817 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008742:	f7f7 ffa7 	bl	8000694 <main>

08008746 <LoopForever>:

LoopForever:
    b LoopForever
 8008746:	e7fe      	b.n	8008746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008748:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800874c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008750:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8008754:	0800a1f0 	.word	0x0800a1f0
  ldr r2, =_sbss
 8008758:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800875c:	20000864 	.word	0x20000864

08008760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008760:	e7fe      	b.n	8008760 <ADC1_2_IRQHandler>
	...

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	2000002c 	.word	0x2000002c

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4e0d      	ldr	r6, [pc, #52]	; (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	; (80087ac <__libc_init_array+0x3c>)
 8008776:	1ba4      	subs	r4, r4, r6
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2500      	movs	r5, #0
 800877c:	42a5      	cmp	r5, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4e0b      	ldr	r6, [pc, #44]	; (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	; (80087b4 <__libc_init_array+0x44>)
 8008784:	f001 f93c 	bl	8009a00 <_init>
 8008788:	1ba4      	subs	r4, r4, r6
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2500      	movs	r5, #0
 800878e:	42a5      	cmp	r5, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008798:	4798      	blx	r3
 800879a:	3501      	adds	r5, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087a2:	4798      	blx	r3
 80087a4:	3501      	adds	r5, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	0800a1e8 	.word	0x0800a1e8
 80087ac:	0800a1e8 	.word	0x0800a1e8
 80087b0:	0800a1e8 	.word	0x0800a1e8
 80087b4:	0800a1ec 	.word	0x0800a1ec

080087b8 <malloc>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <malloc+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f000 b861 	b.w	8008884 <_malloc_r>
 80087c2:	bf00      	nop
 80087c4:	2000002c 	.word	0x2000002c

080087c8 <free>:
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <free+0xc>)
 80087ca:	4601      	mov	r1, r0
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f000 b80b 	b.w	80087e8 <_free_r>
 80087d2:	bf00      	nop
 80087d4:	2000002c 	.word	0x2000002c

080087d8 <memset>:
 80087d8:	4402      	add	r2, r0
 80087da:	4603      	mov	r3, r0
 80087dc:	4293      	cmp	r3, r2
 80087de:	d100      	bne.n	80087e2 <memset+0xa>
 80087e0:	4770      	bx	lr
 80087e2:	f803 1b01 	strb.w	r1, [r3], #1
 80087e6:	e7f9      	b.n	80087dc <memset+0x4>

080087e8 <_free_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	2900      	cmp	r1, #0
 80087ee:	d045      	beq.n	800887c <_free_r+0x94>
 80087f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f4:	1f0c      	subs	r4, r1, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfb8      	it	lt
 80087fa:	18e4      	addlt	r4, r4, r3
 80087fc:	f000 f9ca 	bl	8008b94 <__malloc_lock>
 8008800:	4a1f      	ldr	r2, [pc, #124]	; (8008880 <_free_r+0x98>)
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	4610      	mov	r0, r2
 8008806:	b933      	cbnz	r3, 8008816 <_free_r+0x2e>
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	6014      	str	r4, [r2, #0]
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008812:	f000 b9c0 	b.w	8008b96 <__malloc_unlock>
 8008816:	42a3      	cmp	r3, r4
 8008818:	d90c      	bls.n	8008834 <_free_r+0x4c>
 800881a:	6821      	ldr	r1, [r4, #0]
 800881c:	1862      	adds	r2, r4, r1
 800881e:	4293      	cmp	r3, r2
 8008820:	bf04      	itt	eq
 8008822:	681a      	ldreq	r2, [r3, #0]
 8008824:	685b      	ldreq	r3, [r3, #4]
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	bf04      	itt	eq
 800882a:	1852      	addeq	r2, r2, r1
 800882c:	6022      	streq	r2, [r4, #0]
 800882e:	6004      	str	r4, [r0, #0]
 8008830:	e7ec      	b.n	800880c <_free_r+0x24>
 8008832:	4613      	mov	r3, r2
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	b10a      	cbz	r2, 800883c <_free_r+0x54>
 8008838:	42a2      	cmp	r2, r4
 800883a:	d9fa      	bls.n	8008832 <_free_r+0x4a>
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	1858      	adds	r0, r3, r1
 8008840:	42a0      	cmp	r0, r4
 8008842:	d10b      	bne.n	800885c <_free_r+0x74>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	4401      	add	r1, r0
 8008848:	1858      	adds	r0, r3, r1
 800884a:	4282      	cmp	r2, r0
 800884c:	6019      	str	r1, [r3, #0]
 800884e:	d1dd      	bne.n	800880c <_free_r+0x24>
 8008850:	6810      	ldr	r0, [r2, #0]
 8008852:	6852      	ldr	r2, [r2, #4]
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	4401      	add	r1, r0
 8008858:	6019      	str	r1, [r3, #0]
 800885a:	e7d7      	b.n	800880c <_free_r+0x24>
 800885c:	d902      	bls.n	8008864 <_free_r+0x7c>
 800885e:	230c      	movs	r3, #12
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	e7d3      	b.n	800880c <_free_r+0x24>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	1821      	adds	r1, r4, r0
 8008868:	428a      	cmp	r2, r1
 800886a:	bf04      	itt	eq
 800886c:	6811      	ldreq	r1, [r2, #0]
 800886e:	6852      	ldreq	r2, [r2, #4]
 8008870:	6062      	str	r2, [r4, #4]
 8008872:	bf04      	itt	eq
 8008874:	1809      	addeq	r1, r1, r0
 8008876:	6021      	streq	r1, [r4, #0]
 8008878:	605c      	str	r4, [r3, #4]
 800887a:	e7c7      	b.n	800880c <_free_r+0x24>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	200000b4 	.word	0x200000b4

08008884 <_malloc_r>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	1ccd      	adds	r5, r1, #3
 8008888:	f025 0503 	bic.w	r5, r5, #3
 800888c:	3508      	adds	r5, #8
 800888e:	2d0c      	cmp	r5, #12
 8008890:	bf38      	it	cc
 8008892:	250c      	movcc	r5, #12
 8008894:	2d00      	cmp	r5, #0
 8008896:	4606      	mov	r6, r0
 8008898:	db01      	blt.n	800889e <_malloc_r+0x1a>
 800889a:	42a9      	cmp	r1, r5
 800889c:	d903      	bls.n	80088a6 <_malloc_r+0x22>
 800889e:	230c      	movs	r3, #12
 80088a0:	6033      	str	r3, [r6, #0]
 80088a2:	2000      	movs	r0, #0
 80088a4:	bd70      	pop	{r4, r5, r6, pc}
 80088a6:	f000 f975 	bl	8008b94 <__malloc_lock>
 80088aa:	4a23      	ldr	r2, [pc, #140]	; (8008938 <_malloc_r+0xb4>)
 80088ac:	6814      	ldr	r4, [r2, #0]
 80088ae:	4621      	mov	r1, r4
 80088b0:	b991      	cbnz	r1, 80088d8 <_malloc_r+0x54>
 80088b2:	4c22      	ldr	r4, [pc, #136]	; (800893c <_malloc_r+0xb8>)
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	b91b      	cbnz	r3, 80088c0 <_malloc_r+0x3c>
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 f86d 	bl	8008998 <_sbrk_r>
 80088be:	6020      	str	r0, [r4, #0]
 80088c0:	4629      	mov	r1, r5
 80088c2:	4630      	mov	r0, r6
 80088c4:	f000 f868 	bl	8008998 <_sbrk_r>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d126      	bne.n	800891a <_malloc_r+0x96>
 80088cc:	230c      	movs	r3, #12
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f960 	bl	8008b96 <__malloc_unlock>
 80088d6:	e7e4      	b.n	80088a2 <_malloc_r+0x1e>
 80088d8:	680b      	ldr	r3, [r1, #0]
 80088da:	1b5b      	subs	r3, r3, r5
 80088dc:	d41a      	bmi.n	8008914 <_malloc_r+0x90>
 80088de:	2b0b      	cmp	r3, #11
 80088e0:	d90f      	bls.n	8008902 <_malloc_r+0x7e>
 80088e2:	600b      	str	r3, [r1, #0]
 80088e4:	50cd      	str	r5, [r1, r3]
 80088e6:	18cc      	adds	r4, r1, r3
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 f954 	bl	8008b96 <__malloc_unlock>
 80088ee:	f104 000b 	add.w	r0, r4, #11
 80088f2:	1d23      	adds	r3, r4, #4
 80088f4:	f020 0007 	bic.w	r0, r0, #7
 80088f8:	1ac3      	subs	r3, r0, r3
 80088fa:	d01b      	beq.n	8008934 <_malloc_r+0xb0>
 80088fc:	425a      	negs	r2, r3
 80088fe:	50e2      	str	r2, [r4, r3]
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	428c      	cmp	r4, r1
 8008904:	bf0d      	iteet	eq
 8008906:	6863      	ldreq	r3, [r4, #4]
 8008908:	684b      	ldrne	r3, [r1, #4]
 800890a:	6063      	strne	r3, [r4, #4]
 800890c:	6013      	streq	r3, [r2, #0]
 800890e:	bf18      	it	ne
 8008910:	460c      	movne	r4, r1
 8008912:	e7e9      	b.n	80088e8 <_malloc_r+0x64>
 8008914:	460c      	mov	r4, r1
 8008916:	6849      	ldr	r1, [r1, #4]
 8008918:	e7ca      	b.n	80088b0 <_malloc_r+0x2c>
 800891a:	1cc4      	adds	r4, r0, #3
 800891c:	f024 0403 	bic.w	r4, r4, #3
 8008920:	42a0      	cmp	r0, r4
 8008922:	d005      	beq.n	8008930 <_malloc_r+0xac>
 8008924:	1a21      	subs	r1, r4, r0
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f836 	bl	8008998 <_sbrk_r>
 800892c:	3001      	adds	r0, #1
 800892e:	d0cd      	beq.n	80088cc <_malloc_r+0x48>
 8008930:	6025      	str	r5, [r4, #0]
 8008932:	e7d9      	b.n	80088e8 <_malloc_r+0x64>
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	bf00      	nop
 8008938:	200000b4 	.word	0x200000b4
 800893c:	200000b8 	.word	0x200000b8

08008940 <iprintf>:
 8008940:	b40f      	push	{r0, r1, r2, r3}
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <iprintf+0x2c>)
 8008944:	b513      	push	{r0, r1, r4, lr}
 8008946:	681c      	ldr	r4, [r3, #0]
 8008948:	b124      	cbz	r4, 8008954 <iprintf+0x14>
 800894a:	69a3      	ldr	r3, [r4, #24]
 800894c:	b913      	cbnz	r3, 8008954 <iprintf+0x14>
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f896 	bl	8008a80 <__sinit>
 8008954:	ab05      	add	r3, sp, #20
 8008956:	9a04      	ldr	r2, [sp, #16]
 8008958:	68a1      	ldr	r1, [r4, #8]
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fa95 	bl	8008e8c <_vfiprintf_r>
 8008962:	b002      	add	sp, #8
 8008964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008968:	b004      	add	sp, #16
 800896a:	4770      	bx	lr
 800896c:	2000002c 	.word	0x2000002c

08008970 <putchar>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4b08      	ldr	r3, [pc, #32]	; (8008994 <putchar+0x24>)
 8008974:	681c      	ldr	r4, [r3, #0]
 8008976:	4605      	mov	r5, r0
 8008978:	b124      	cbz	r4, 8008984 <putchar+0x14>
 800897a:	69a3      	ldr	r3, [r4, #24]
 800897c:	b913      	cbnz	r3, 8008984 <putchar+0x14>
 800897e:	4620      	mov	r0, r4
 8008980:	f000 f87e 	bl	8008a80 <__sinit>
 8008984:	68a2      	ldr	r2, [r4, #8]
 8008986:	4629      	mov	r1, r5
 8008988:	4620      	mov	r0, r4
 800898a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898e:	f000 bd29 	b.w	80093e4 <_putc_r>
 8008992:	bf00      	nop
 8008994:	2000002c 	.word	0x2000002c

08008998 <_sbrk_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4c06      	ldr	r4, [pc, #24]	; (80089b4 <_sbrk_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4605      	mov	r5, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	f7f8 f8c4 	bl	8000b30 <_sbrk>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_sbrk_r+0x1a>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_sbrk_r+0x1a>
 80089b0:	602b      	str	r3, [r5, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20000860 	.word	0x20000860

080089b8 <siprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b500      	push	{lr}
 80089bc:	b09c      	sub	sp, #112	; 0x70
 80089be:	f44f 7102 	mov.w	r1, #520	; 0x208
 80089c2:	ab1d      	add	r3, sp, #116	; 0x74
 80089c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80089c8:	9002      	str	r0, [sp, #8]
 80089ca:	9006      	str	r0, [sp, #24]
 80089cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089d0:	480a      	ldr	r0, [pc, #40]	; (80089fc <siprintf+0x44>)
 80089d2:	9104      	str	r1, [sp, #16]
 80089d4:	9107      	str	r1, [sp, #28]
 80089d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089da:	f853 2b04 	ldr.w	r2, [r3], #4
 80089de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	a902      	add	r1, sp, #8
 80089e8:	f000 f932 	bl	8008c50 <_svfiprintf_r>
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	b01c      	add	sp, #112	; 0x70
 80089f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f8:	b003      	add	sp, #12
 80089fa:	4770      	bx	lr
 80089fc:	2000002c 	.word	0x2000002c

08008a00 <_cleanup_r>:
 8008a00:	4901      	ldr	r1, [pc, #4]	; (8008a08 <_cleanup_r+0x8>)
 8008a02:	f000 b8a9 	b.w	8008b58 <_fwalk_reent>
 8008a06:	bf00      	nop
 8008a08:	080097ad 	.word	0x080097ad

08008a0c <std.isra.0>:
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	4604      	mov	r4, r0
 8008a12:	6003      	str	r3, [r0, #0]
 8008a14:	6043      	str	r3, [r0, #4]
 8008a16:	6083      	str	r3, [r0, #8]
 8008a18:	8181      	strh	r1, [r0, #12]
 8008a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a1c:	81c2      	strh	r2, [r0, #14]
 8008a1e:	6103      	str	r3, [r0, #16]
 8008a20:	6143      	str	r3, [r0, #20]
 8008a22:	6183      	str	r3, [r0, #24]
 8008a24:	4619      	mov	r1, r3
 8008a26:	2208      	movs	r2, #8
 8008a28:	305c      	adds	r0, #92	; 0x5c
 8008a2a:	f7ff fed5 	bl	80087d8 <memset>
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <std.isra.0+0x38>)
 8008a30:	6263      	str	r3, [r4, #36]	; 0x24
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <std.isra.0+0x3c>)
 8008a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <std.isra.0+0x40>)
 8008a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <std.isra.0+0x44>)
 8008a3c:	6224      	str	r4, [r4, #32]
 8008a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	bf00      	nop
 8008a44:	08009451 	.word	0x08009451
 8008a48:	08009473 	.word	0x08009473
 8008a4c:	080094ab 	.word	0x080094ab
 8008a50:	080094cf 	.word	0x080094cf

08008a54 <__sfmoreglue>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	1e4a      	subs	r2, r1, #1
 8008a58:	2568      	movs	r5, #104	; 0x68
 8008a5a:	4355      	muls	r5, r2
 8008a5c:	460e      	mov	r6, r1
 8008a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a62:	f7ff ff0f 	bl	8008884 <_malloc_r>
 8008a66:	4604      	mov	r4, r0
 8008a68:	b140      	cbz	r0, 8008a7c <__sfmoreglue+0x28>
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	e880 0042 	stmia.w	r0, {r1, r6}
 8008a70:	300c      	adds	r0, #12
 8008a72:	60a0      	str	r0, [r4, #8]
 8008a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a78:	f7ff feae 	bl	80087d8 <memset>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}

08008a80 <__sinit>:
 8008a80:	6983      	ldr	r3, [r0, #24]
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	bb33      	cbnz	r3, 8008ad6 <__sinit+0x56>
 8008a88:	6483      	str	r3, [r0, #72]	; 0x48
 8008a8a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <__sinit+0x58>)
 8008a90:	4a12      	ldr	r2, [pc, #72]	; (8008adc <__sinit+0x5c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6282      	str	r2, [r0, #40]	; 0x28
 8008a96:	4298      	cmp	r0, r3
 8008a98:	bf04      	itt	eq
 8008a9a:	2301      	moveq	r3, #1
 8008a9c:	6183      	streq	r3, [r0, #24]
 8008a9e:	f000 f81f 	bl	8008ae0 <__sfp>
 8008aa2:	6060      	str	r0, [r4, #4]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 f81b 	bl	8008ae0 <__sfp>
 8008aaa:	60a0      	str	r0, [r4, #8]
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 f817 	bl	8008ae0 <__sfp>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	60e0      	str	r0, [r4, #12]
 8008ab6:	2104      	movs	r1, #4
 8008ab8:	6860      	ldr	r0, [r4, #4]
 8008aba:	f7ff ffa7 	bl	8008a0c <std.isra.0>
 8008abe:	2201      	movs	r2, #1
 8008ac0:	2109      	movs	r1, #9
 8008ac2:	68a0      	ldr	r0, [r4, #8]
 8008ac4:	f7ff ffa2 	bl	8008a0c <std.isra.0>
 8008ac8:	2202      	movs	r2, #2
 8008aca:	2112      	movs	r1, #18
 8008acc:	68e0      	ldr	r0, [r4, #12]
 8008ace:	f7ff ff9d 	bl	8008a0c <std.isra.0>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	61a3      	str	r3, [r4, #24]
 8008ad6:	bd10      	pop	{r4, pc}
 8008ad8:	0800a148 	.word	0x0800a148
 8008adc:	08008a01 	.word	0x08008a01

08008ae0 <__sfp>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <__sfp+0x74>)
 8008ae4:	681e      	ldr	r6, [r3, #0]
 8008ae6:	69b3      	ldr	r3, [r6, #24]
 8008ae8:	4607      	mov	r7, r0
 8008aea:	b913      	cbnz	r3, 8008af2 <__sfp+0x12>
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff ffc7 	bl	8008a80 <__sinit>
 8008af2:	3648      	adds	r6, #72	; 0x48
 8008af4:	68b4      	ldr	r4, [r6, #8]
 8008af6:	6873      	ldr	r3, [r6, #4]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	d503      	bpl.n	8008b04 <__sfp+0x24>
 8008afc:	6833      	ldr	r3, [r6, #0]
 8008afe:	b133      	cbz	r3, 8008b0e <__sfp+0x2e>
 8008b00:	6836      	ldr	r6, [r6, #0]
 8008b02:	e7f7      	b.n	8008af4 <__sfp+0x14>
 8008b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b08:	b16d      	cbz	r5, 8008b26 <__sfp+0x46>
 8008b0a:	3468      	adds	r4, #104	; 0x68
 8008b0c:	e7f4      	b.n	8008af8 <__sfp+0x18>
 8008b0e:	2104      	movs	r1, #4
 8008b10:	4638      	mov	r0, r7
 8008b12:	f7ff ff9f 	bl	8008a54 <__sfmoreglue>
 8008b16:	6030      	str	r0, [r6, #0]
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1f1      	bne.n	8008b00 <__sfp+0x20>
 8008b1c:	230c      	movs	r3, #12
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4604      	mov	r4, r0
 8008b22:	4620      	mov	r0, r4
 8008b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b2a:	81e3      	strh	r3, [r4, #14]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	6665      	str	r5, [r4, #100]	; 0x64
 8008b32:	6025      	str	r5, [r4, #0]
 8008b34:	60a5      	str	r5, [r4, #8]
 8008b36:	6065      	str	r5, [r4, #4]
 8008b38:	6125      	str	r5, [r4, #16]
 8008b3a:	6165      	str	r5, [r4, #20]
 8008b3c:	61a5      	str	r5, [r4, #24]
 8008b3e:	2208      	movs	r2, #8
 8008b40:	4629      	mov	r1, r5
 8008b42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b46:	f7ff fe47 	bl	80087d8 <memset>
 8008b4a:	6365      	str	r5, [r4, #52]	; 0x34
 8008b4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8008b4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008b50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008b52:	e7e6      	b.n	8008b22 <__sfp+0x42>
 8008b54:	0800a148 	.word	0x0800a148

08008b58 <_fwalk_reent>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b64:	2600      	movs	r6, #0
 8008b66:	b914      	cbnz	r4, 8008b6e <_fwalk_reent+0x16>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	68a5      	ldr	r5, [r4, #8]
 8008b70:	6867      	ldr	r7, [r4, #4]
 8008b72:	3f01      	subs	r7, #1
 8008b74:	d501      	bpl.n	8008b7a <_fwalk_reent+0x22>
 8008b76:	6824      	ldr	r4, [r4, #0]
 8008b78:	e7f5      	b.n	8008b66 <_fwalk_reent+0xe>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d907      	bls.n	8008b90 <_fwalk_reent+0x38>
 8008b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b84:	3301      	adds	r3, #1
 8008b86:	d003      	beq.n	8008b90 <_fwalk_reent+0x38>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	47c8      	blx	r9
 8008b8e:	4306      	orrs	r6, r0
 8008b90:	3568      	adds	r5, #104	; 0x68
 8008b92:	e7ee      	b.n	8008b72 <_fwalk_reent+0x1a>

08008b94 <__malloc_lock>:
 8008b94:	4770      	bx	lr

08008b96 <__malloc_unlock>:
 8008b96:	4770      	bx	lr

08008b98 <__ssputs_r>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	688e      	ldr	r6, [r1, #8]
 8008b9e:	429e      	cmp	r6, r3
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4691      	mov	r9, r2
 8008ba6:	4698      	mov	r8, r3
 8008ba8:	d835      	bhi.n	8008c16 <__ssputs_r+0x7e>
 8008baa:	898a      	ldrh	r2, [r1, #12]
 8008bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb0:	d031      	beq.n	8008c16 <__ssputs_r+0x7e>
 8008bb2:	6825      	ldr	r5, [r4, #0]
 8008bb4:	6909      	ldr	r1, [r1, #16]
 8008bb6:	1a6f      	subs	r7, r5, r1
 8008bb8:	6965      	ldr	r5, [r4, #20]
 8008bba:	2302      	movs	r3, #2
 8008bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008bc4:	f108 0301 	add.w	r3, r8, #1
 8008bc8:	443b      	add	r3, r7
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	bf38      	it	cc
 8008bce:	461d      	movcc	r5, r3
 8008bd0:	0553      	lsls	r3, r2, #21
 8008bd2:	d531      	bpl.n	8008c38 <__ssputs_r+0xa0>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7ff fe55 	bl	8008884 <_malloc_r>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	b950      	cbnz	r0, 8008bf4 <__ssputs_r+0x5c>
 8008bde:	230c      	movs	r3, #12
 8008be0:	f8ca 3000 	str.w	r3, [sl]
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	6921      	ldr	r1, [r4, #16]
 8008bf8:	f000 fe78 	bl	80098ec <memcpy>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	6126      	str	r6, [r4, #16]
 8008c0a:	6165      	str	r5, [r4, #20]
 8008c0c:	443e      	add	r6, r7
 8008c0e:	1bed      	subs	r5, r5, r7
 8008c10:	6026      	str	r6, [r4, #0]
 8008c12:	60a5      	str	r5, [r4, #8]
 8008c14:	4646      	mov	r6, r8
 8008c16:	4546      	cmp	r6, r8
 8008c18:	bf28      	it	cs
 8008c1a:	4646      	movcs	r6, r8
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	4649      	mov	r1, r9
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	f000 fe6e 	bl	8009902 <memmove>
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	1b9b      	subs	r3, r3, r6
 8008c2a:	60a3      	str	r3, [r4, #8]
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	441e      	add	r6, r3
 8008c30:	6026      	str	r6, [r4, #0]
 8008c32:	2000      	movs	r0, #0
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	462a      	mov	r2, r5
 8008c3a:	f000 fe7c 	bl	8009936 <_realloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1e1      	bne.n	8008c08 <__ssputs_r+0x70>
 8008c44:	6921      	ldr	r1, [r4, #16]
 8008c46:	4650      	mov	r0, sl
 8008c48:	f7ff fdce 	bl	80087e8 <_free_r>
 8008c4c:	e7c7      	b.n	8008bde <__ssputs_r+0x46>
	...

08008c50 <_svfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	b09d      	sub	sp, #116	; 0x74
 8008c56:	4680      	mov	r8, r0
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	898b      	ldrh	r3, [r1, #12]
 8008c5c:	061c      	lsls	r4, r3, #24
 8008c5e:	460d      	mov	r5, r1
 8008c60:	4616      	mov	r6, r2
 8008c62:	d50f      	bpl.n	8008c84 <_svfiprintf_r+0x34>
 8008c64:	690b      	ldr	r3, [r1, #16]
 8008c66:	b96b      	cbnz	r3, 8008c84 <_svfiprintf_r+0x34>
 8008c68:	2140      	movs	r1, #64	; 0x40
 8008c6a:	f7ff fe0b 	bl	8008884 <_malloc_r>
 8008c6e:	6028      	str	r0, [r5, #0]
 8008c70:	6128      	str	r0, [r5, #16]
 8008c72:	b928      	cbnz	r0, 8008c80 <_svfiprintf_r+0x30>
 8008c74:	230c      	movs	r3, #12
 8008c76:	f8c8 3000 	str.w	r3, [r8]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	e0c5      	b.n	8008e0c <_svfiprintf_r+0x1bc>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	616b      	str	r3, [r5, #20]
 8008c84:	2300      	movs	r3, #0
 8008c86:	9309      	str	r3, [sp, #36]	; 0x24
 8008c88:	2320      	movs	r3, #32
 8008c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c8e:	2330      	movs	r3, #48	; 0x30
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c94:	f04f 0b01 	mov.w	fp, #1
 8008c98:	4637      	mov	r7, r6
 8008c9a:	463c      	mov	r4, r7
 8008c9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d13c      	bne.n	8008d1e <_svfiprintf_r+0xce>
 8008ca4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ca8:	d00b      	beq.n	8008cc2 <_svfiprintf_r+0x72>
 8008caa:	4653      	mov	r3, sl
 8008cac:	4632      	mov	r2, r6
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	f7ff ff71 	bl	8008b98 <__ssputs_r>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f000 80a3 	beq.w	8008e02 <_svfiprintf_r+0x1b2>
 8008cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbe:	4453      	add	r3, sl
 8008cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc2:	783b      	ldrb	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 809c 	beq.w	8008e02 <_svfiprintf_r+0x1b2>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	9205      	str	r2, [sp, #20]
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008cde:	2205      	movs	r2, #5
 8008ce0:	7821      	ldrb	r1, [r4, #0]
 8008ce2:	4850      	ldr	r0, [pc, #320]	; (8008e24 <_svfiprintf_r+0x1d4>)
 8008ce4:	f7f7 fa8c 	bl	8000200 <memchr>
 8008ce8:	1c67      	adds	r7, r4, #1
 8008cea:	9b04      	ldr	r3, [sp, #16]
 8008cec:	b9d8      	cbnz	r0, 8008d26 <_svfiprintf_r+0xd6>
 8008cee:	06d9      	lsls	r1, r3, #27
 8008cf0:	bf44      	itt	mi
 8008cf2:	2220      	movmi	r2, #32
 8008cf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cf8:	071a      	lsls	r2, r3, #28
 8008cfa:	bf44      	itt	mi
 8008cfc:	222b      	movmi	r2, #43	; 0x2b
 8008cfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d02:	7822      	ldrb	r2, [r4, #0]
 8008d04:	2a2a      	cmp	r2, #42	; 0x2a
 8008d06:	d016      	beq.n	8008d36 <_svfiprintf_r+0xe6>
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	200a      	movs	r0, #10
 8008d0e:	4627      	mov	r7, r4
 8008d10:	3401      	adds	r4, #1
 8008d12:	783b      	ldrb	r3, [r7, #0]
 8008d14:	3b30      	subs	r3, #48	; 0x30
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d951      	bls.n	8008dbe <_svfiprintf_r+0x16e>
 8008d1a:	b1c9      	cbz	r1, 8008d50 <_svfiprintf_r+0x100>
 8008d1c:	e011      	b.n	8008d42 <_svfiprintf_r+0xf2>
 8008d1e:	2b25      	cmp	r3, #37	; 0x25
 8008d20:	d0c0      	beq.n	8008ca4 <_svfiprintf_r+0x54>
 8008d22:	4627      	mov	r7, r4
 8008d24:	e7b9      	b.n	8008c9a <_svfiprintf_r+0x4a>
 8008d26:	4a3f      	ldr	r2, [pc, #252]	; (8008e24 <_svfiprintf_r+0x1d4>)
 8008d28:	1a80      	subs	r0, r0, r2
 8008d2a:	fa0b f000 	lsl.w	r0, fp, r0
 8008d2e:	4318      	orrs	r0, r3
 8008d30:	9004      	str	r0, [sp, #16]
 8008d32:	463c      	mov	r4, r7
 8008d34:	e7d3      	b.n	8008cde <_svfiprintf_r+0x8e>
 8008d36:	9a03      	ldr	r2, [sp, #12]
 8008d38:	1d11      	adds	r1, r2, #4
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	9103      	str	r1, [sp, #12]
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	db01      	blt.n	8008d46 <_svfiprintf_r+0xf6>
 8008d42:	9207      	str	r2, [sp, #28]
 8008d44:	e004      	b.n	8008d50 <_svfiprintf_r+0x100>
 8008d46:	4252      	negs	r2, r2
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	9207      	str	r2, [sp, #28]
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	783b      	ldrb	r3, [r7, #0]
 8008d52:	2b2e      	cmp	r3, #46	; 0x2e
 8008d54:	d10e      	bne.n	8008d74 <_svfiprintf_r+0x124>
 8008d56:	787b      	ldrb	r3, [r7, #1]
 8008d58:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5a:	f107 0101 	add.w	r1, r7, #1
 8008d5e:	d132      	bne.n	8008dc6 <_svfiprintf_r+0x176>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	1d1a      	adds	r2, r3, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	9203      	str	r2, [sp, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bfb8      	it	lt
 8008d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d70:	3702      	adds	r7, #2
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	4c2c      	ldr	r4, [pc, #176]	; (8008e28 <_svfiprintf_r+0x1d8>)
 8008d76:	7839      	ldrb	r1, [r7, #0]
 8008d78:	2203      	movs	r2, #3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7f7 fa40 	bl	8000200 <memchr>
 8008d80:	b138      	cbz	r0, 8008d92 <_svfiprintf_r+0x142>
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	1b00      	subs	r0, r0, r4
 8008d86:	fa03 f000 	lsl.w	r0, r3, r0
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	4303      	orrs	r3, r0
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	3701      	adds	r7, #1
 8008d92:	7839      	ldrb	r1, [r7, #0]
 8008d94:	4825      	ldr	r0, [pc, #148]	; (8008e2c <_svfiprintf_r+0x1dc>)
 8008d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d9a:	2206      	movs	r2, #6
 8008d9c:	1c7e      	adds	r6, r7, #1
 8008d9e:	f7f7 fa2f 	bl	8000200 <memchr>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d035      	beq.n	8008e12 <_svfiprintf_r+0x1c2>
 8008da6:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <_svfiprintf_r+0x1e0>)
 8008da8:	b9fb      	cbnz	r3, 8008dea <_svfiprintf_r+0x19a>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	3307      	adds	r3, #7
 8008dae:	f023 0307 	bic.w	r3, r3, #7
 8008db2:	3308      	adds	r3, #8
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	444b      	add	r3, r9
 8008dba:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbc:	e76c      	b.n	8008c98 <_svfiprintf_r+0x48>
 8008dbe:	fb00 3202 	mla	r2, r0, r2, r3
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	e7a3      	b.n	8008d0e <_svfiprintf_r+0xbe>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9305      	str	r3, [sp, #20]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	240a      	movs	r4, #10
 8008dce:	460f      	mov	r7, r1
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	783a      	ldrb	r2, [r7, #0]
 8008dd4:	3a30      	subs	r2, #48	; 0x30
 8008dd6:	2a09      	cmp	r2, #9
 8008dd8:	d903      	bls.n	8008de2 <_svfiprintf_r+0x192>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0ca      	beq.n	8008d74 <_svfiprintf_r+0x124>
 8008dde:	9005      	str	r0, [sp, #20]
 8008de0:	e7c8      	b.n	8008d74 <_svfiprintf_r+0x124>
 8008de2:	fb04 2000 	mla	r0, r4, r0, r2
 8008de6:	2301      	movs	r3, #1
 8008de8:	e7f1      	b.n	8008dce <_svfiprintf_r+0x17e>
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <_svfiprintf_r+0x1e4>)
 8008df2:	a904      	add	r1, sp, #16
 8008df4:	4640      	mov	r0, r8
 8008df6:	f3af 8000 	nop.w
 8008dfa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008dfe:	4681      	mov	r9, r0
 8008e00:	d1d9      	bne.n	8008db6 <_svfiprintf_r+0x166>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	065b      	lsls	r3, r3, #25
 8008e06:	f53f af38 	bmi.w	8008c7a <_svfiprintf_r+0x2a>
 8008e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e0c:	b01d      	add	sp, #116	; 0x74
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	ab03      	add	r3, sp, #12
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <_svfiprintf_r+0x1e4>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	f000 f9c1 	bl	80091a4 <_printf_i>
 8008e22:	e7ea      	b.n	8008dfa <_svfiprintf_r+0x1aa>
 8008e24:	0800a1ac 	.word	0x0800a1ac
 8008e28:	0800a1b2 	.word	0x0800a1b2
 8008e2c:	0800a1b6 	.word	0x0800a1b6
 8008e30:	00000000 	.word	0x00000000
 8008e34:	08008b99 	.word	0x08008b99

08008e38 <__sfputc_r>:
 8008e38:	6893      	ldr	r3, [r2, #8]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	b410      	push	{r4}
 8008e40:	6093      	str	r3, [r2, #8]
 8008e42:	da09      	bge.n	8008e58 <__sfputc_r+0x20>
 8008e44:	6994      	ldr	r4, [r2, #24]
 8008e46:	42a3      	cmp	r3, r4
 8008e48:	db02      	blt.n	8008e50 <__sfputc_r+0x18>
 8008e4a:	b2cb      	uxtb	r3, r1
 8008e4c:	2b0a      	cmp	r3, #10
 8008e4e:	d103      	bne.n	8008e58 <__sfputc_r+0x20>
 8008e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e54:	f000 bb40 	b.w	80094d8 <__swbuf_r>
 8008e58:	6813      	ldr	r3, [r2, #0]
 8008e5a:	1c58      	adds	r0, r3, #1
 8008e5c:	6010      	str	r0, [r2, #0]
 8008e5e:	7019      	strb	r1, [r3, #0]
 8008e60:	b2c8      	uxtb	r0, r1
 8008e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <__sfputs_r>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	4614      	mov	r4, r2
 8008e70:	18d5      	adds	r5, r2, r3
 8008e72:	42ac      	cmp	r4, r5
 8008e74:	d101      	bne.n	8008e7a <__sfputs_r+0x12>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e007      	b.n	8008e8a <__sfputs_r+0x22>
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff ffd9 	bl	8008e38 <__sfputc_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d1f3      	bne.n	8008e72 <__sfputs_r+0xa>
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e8c <_vfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	b09d      	sub	sp, #116	; 0x74
 8008e92:	460c      	mov	r4, r1
 8008e94:	4617      	mov	r7, r2
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	4606      	mov	r6, r0
 8008e9a:	b118      	cbz	r0, 8008ea4 <_vfiprintf_r+0x18>
 8008e9c:	6983      	ldr	r3, [r0, #24]
 8008e9e:	b90b      	cbnz	r3, 8008ea4 <_vfiprintf_r+0x18>
 8008ea0:	f7ff fdee 	bl	8008a80 <__sinit>
 8008ea4:	4b7c      	ldr	r3, [pc, #496]	; (8009098 <_vfiprintf_r+0x20c>)
 8008ea6:	429c      	cmp	r4, r3
 8008ea8:	d157      	bne.n	8008f5a <_vfiprintf_r+0xce>
 8008eaa:	6874      	ldr	r4, [r6, #4]
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	0718      	lsls	r0, r3, #28
 8008eb0:	d55d      	bpl.n	8008f6e <_vfiprintf_r+0xe2>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d05a      	beq.n	8008f6e <_vfiprintf_r+0xe2>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec2:	2330      	movs	r3, #48	; 0x30
 8008ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec8:	f04f 0b01 	mov.w	fp, #1
 8008ecc:	46b8      	mov	r8, r7
 8008ece:	4645      	mov	r5, r8
 8008ed0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d155      	bne.n	8008f84 <_vfiprintf_r+0xf8>
 8008ed8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008edc:	d00b      	beq.n	8008ef6 <_vfiprintf_r+0x6a>
 8008ede:	4653      	mov	r3, sl
 8008ee0:	463a      	mov	r2, r7
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffbf 	bl	8008e68 <__sfputs_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	f000 80c4 	beq.w	8009078 <_vfiprintf_r+0x1ec>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	4453      	add	r3, sl
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	f898 3000 	ldrb.w	r3, [r8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80bc 	beq.w	8009078 <_vfiprintf_r+0x1ec>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	9205      	str	r2, [sp, #20]
 8008f0c:	9306      	str	r3, [sp, #24]
 8008f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f12:	931a      	str	r3, [sp, #104]	; 0x68
 8008f14:	2205      	movs	r2, #5
 8008f16:	7829      	ldrb	r1, [r5, #0]
 8008f18:	4860      	ldr	r0, [pc, #384]	; (800909c <_vfiprintf_r+0x210>)
 8008f1a:	f7f7 f971 	bl	8000200 <memchr>
 8008f1e:	f105 0801 	add.w	r8, r5, #1
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d131      	bne.n	8008f8c <_vfiprintf_r+0x100>
 8008f28:	06d9      	lsls	r1, r3, #27
 8008f2a:	bf44      	itt	mi
 8008f2c:	2220      	movmi	r2, #32
 8008f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f32:	071a      	lsls	r2, r3, #28
 8008f34:	bf44      	itt	mi
 8008f36:	222b      	movmi	r2, #43	; 0x2b
 8008f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f3c:	782a      	ldrb	r2, [r5, #0]
 8008f3e:	2a2a      	cmp	r2, #42	; 0x2a
 8008f40:	d02c      	beq.n	8008f9c <_vfiprintf_r+0x110>
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	2100      	movs	r1, #0
 8008f46:	200a      	movs	r0, #10
 8008f48:	46a8      	mov	r8, r5
 8008f4a:	3501      	adds	r5, #1
 8008f4c:	f898 3000 	ldrb.w	r3, [r8]
 8008f50:	3b30      	subs	r3, #48	; 0x30
 8008f52:	2b09      	cmp	r3, #9
 8008f54:	d96d      	bls.n	8009032 <_vfiprintf_r+0x1a6>
 8008f56:	b371      	cbz	r1, 8008fb6 <_vfiprintf_r+0x12a>
 8008f58:	e026      	b.n	8008fa8 <_vfiprintf_r+0x11c>
 8008f5a:	4b51      	ldr	r3, [pc, #324]	; (80090a0 <_vfiprintf_r+0x214>)
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	d101      	bne.n	8008f64 <_vfiprintf_r+0xd8>
 8008f60:	68b4      	ldr	r4, [r6, #8]
 8008f62:	e7a3      	b.n	8008eac <_vfiprintf_r+0x20>
 8008f64:	4b4f      	ldr	r3, [pc, #316]	; (80090a4 <_vfiprintf_r+0x218>)
 8008f66:	429c      	cmp	r4, r3
 8008f68:	bf08      	it	eq
 8008f6a:	68f4      	ldreq	r4, [r6, #12]
 8008f6c:	e79e      	b.n	8008eac <_vfiprintf_r+0x20>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 fb15 	bl	80095a0 <__swsetup_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d09e      	beq.n	8008eb8 <_vfiprintf_r+0x2c>
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	b01d      	add	sp, #116	; 0x74
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	2b25      	cmp	r3, #37	; 0x25
 8008f86:	d0a7      	beq.n	8008ed8 <_vfiprintf_r+0x4c>
 8008f88:	46a8      	mov	r8, r5
 8008f8a:	e7a0      	b.n	8008ece <_vfiprintf_r+0x42>
 8008f8c:	4a43      	ldr	r2, [pc, #268]	; (800909c <_vfiprintf_r+0x210>)
 8008f8e:	1a80      	subs	r0, r0, r2
 8008f90:	fa0b f000 	lsl.w	r0, fp, r0
 8008f94:	4318      	orrs	r0, r3
 8008f96:	9004      	str	r0, [sp, #16]
 8008f98:	4645      	mov	r5, r8
 8008f9a:	e7bb      	b.n	8008f14 <_vfiprintf_r+0x88>
 8008f9c:	9a03      	ldr	r2, [sp, #12]
 8008f9e:	1d11      	adds	r1, r2, #4
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	9103      	str	r1, [sp, #12]
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	db01      	blt.n	8008fac <_vfiprintf_r+0x120>
 8008fa8:	9207      	str	r2, [sp, #28]
 8008faa:	e004      	b.n	8008fb6 <_vfiprintf_r+0x12a>
 8008fac:	4252      	negs	r2, r2
 8008fae:	f043 0302 	orr.w	r3, r3, #2
 8008fb2:	9207      	str	r2, [sp, #28]
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	f898 3000 	ldrb.w	r3, [r8]
 8008fba:	2b2e      	cmp	r3, #46	; 0x2e
 8008fbc:	d110      	bne.n	8008fe0 <_vfiprintf_r+0x154>
 8008fbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc4:	f108 0101 	add.w	r1, r8, #1
 8008fc8:	d137      	bne.n	800903a <_vfiprintf_r+0x1ae>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	9203      	str	r2, [sp, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bfb8      	it	lt
 8008fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fda:	f108 0802 	add.w	r8, r8, #2
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	4d31      	ldr	r5, [pc, #196]	; (80090a8 <_vfiprintf_r+0x21c>)
 8008fe2:	f898 1000 	ldrb.w	r1, [r8]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f7f7 f909 	bl	8000200 <memchr>
 8008fee:	b140      	cbz	r0, 8009002 <_vfiprintf_r+0x176>
 8008ff0:	2340      	movs	r3, #64	; 0x40
 8008ff2:	1b40      	subs	r0, r0, r5
 8008ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	4303      	orrs	r3, r0
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	f108 0801 	add.w	r8, r8, #1
 8009002:	f898 1000 	ldrb.w	r1, [r8]
 8009006:	4829      	ldr	r0, [pc, #164]	; (80090ac <_vfiprintf_r+0x220>)
 8009008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800900c:	2206      	movs	r2, #6
 800900e:	f108 0701 	add.w	r7, r8, #1
 8009012:	f7f7 f8f5 	bl	8000200 <memchr>
 8009016:	2800      	cmp	r0, #0
 8009018:	d034      	beq.n	8009084 <_vfiprintf_r+0x1f8>
 800901a:	4b25      	ldr	r3, [pc, #148]	; (80090b0 <_vfiprintf_r+0x224>)
 800901c:	bb03      	cbnz	r3, 8009060 <_vfiprintf_r+0x1d4>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	3308      	adds	r3, #8
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	444b      	add	r3, r9
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	e74c      	b.n	8008ecc <_vfiprintf_r+0x40>
 8009032:	fb00 3202 	mla	r2, r0, r2, r3
 8009036:	2101      	movs	r1, #1
 8009038:	e786      	b.n	8008f48 <_vfiprintf_r+0xbc>
 800903a:	2300      	movs	r3, #0
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	4618      	mov	r0, r3
 8009040:	250a      	movs	r5, #10
 8009042:	4688      	mov	r8, r1
 8009044:	3101      	adds	r1, #1
 8009046:	f898 2000 	ldrb.w	r2, [r8]
 800904a:	3a30      	subs	r2, #48	; 0x30
 800904c:	2a09      	cmp	r2, #9
 800904e:	d903      	bls.n	8009058 <_vfiprintf_r+0x1cc>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0c5      	beq.n	8008fe0 <_vfiprintf_r+0x154>
 8009054:	9005      	str	r0, [sp, #20]
 8009056:	e7c3      	b.n	8008fe0 <_vfiprintf_r+0x154>
 8009058:	fb05 2000 	mla	r0, r5, r0, r2
 800905c:	2301      	movs	r3, #1
 800905e:	e7f0      	b.n	8009042 <_vfiprintf_r+0x1b6>
 8009060:	ab03      	add	r3, sp, #12
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	4622      	mov	r2, r4
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <_vfiprintf_r+0x228>)
 8009068:	a904      	add	r1, sp, #16
 800906a:	4630      	mov	r0, r6
 800906c:	f3af 8000 	nop.w
 8009070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009074:	4681      	mov	r9, r0
 8009076:	d1d8      	bne.n	800902a <_vfiprintf_r+0x19e>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	065b      	lsls	r3, r3, #25
 800907c:	f53f af7d 	bmi.w	8008f7a <_vfiprintf_r+0xee>
 8009080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009082:	e77c      	b.n	8008f7e <_vfiprintf_r+0xf2>
 8009084:	ab03      	add	r3, sp, #12
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	4622      	mov	r2, r4
 800908a:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <_vfiprintf_r+0x228>)
 800908c:	a904      	add	r1, sp, #16
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f888 	bl	80091a4 <_printf_i>
 8009094:	e7ec      	b.n	8009070 <_vfiprintf_r+0x1e4>
 8009096:	bf00      	nop
 8009098:	0800a16c 	.word	0x0800a16c
 800909c:	0800a1ac 	.word	0x0800a1ac
 80090a0:	0800a18c 	.word	0x0800a18c
 80090a4:	0800a14c 	.word	0x0800a14c
 80090a8:	0800a1b2 	.word	0x0800a1b2
 80090ac:	0800a1b6 	.word	0x0800a1b6
 80090b0:	00000000 	.word	0x00000000
 80090b4:	08008e69 	.word	0x08008e69

080090b8 <_printf_common>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	4691      	mov	r9, r2
 80090be:	461f      	mov	r7, r3
 80090c0:	688a      	ldr	r2, [r1, #8]
 80090c2:	690b      	ldr	r3, [r1, #16]
 80090c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	bfb8      	it	lt
 80090cc:	4613      	movlt	r3, r2
 80090ce:	f8c9 3000 	str.w	r3, [r9]
 80090d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d6:	4606      	mov	r6, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	b112      	cbz	r2, 80090e2 <_printf_common+0x2a>
 80090dc:	3301      	adds	r3, #1
 80090de:	f8c9 3000 	str.w	r3, [r9]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	0699      	lsls	r1, r3, #26
 80090e6:	bf42      	ittt	mi
 80090e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090ec:	3302      	addmi	r3, #2
 80090ee:	f8c9 3000 	strmi.w	r3, [r9]
 80090f2:	6825      	ldr	r5, [r4, #0]
 80090f4:	f015 0506 	ands.w	r5, r5, #6
 80090f8:	d107      	bne.n	800910a <_printf_common+0x52>
 80090fa:	f104 0a19 	add.w	sl, r4, #25
 80090fe:	68e3      	ldr	r3, [r4, #12]
 8009100:	f8d9 2000 	ldr.w	r2, [r9]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	429d      	cmp	r5, r3
 8009108:	db29      	blt.n	800915e <_printf_common+0xa6>
 800910a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	3300      	adds	r3, #0
 8009112:	bf18      	it	ne
 8009114:	2301      	movne	r3, #1
 8009116:	0692      	lsls	r2, r2, #26
 8009118:	d42e      	bmi.n	8009178 <_printf_common+0xc0>
 800911a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800911e:	4639      	mov	r1, r7
 8009120:	4630      	mov	r0, r6
 8009122:	47c0      	blx	r8
 8009124:	3001      	adds	r0, #1
 8009126:	d021      	beq.n	800916c <_printf_common+0xb4>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	68e5      	ldr	r5, [r4, #12]
 800912c:	f8d9 2000 	ldr.w	r2, [r9]
 8009130:	f003 0306 	and.w	r3, r3, #6
 8009134:	2b04      	cmp	r3, #4
 8009136:	bf08      	it	eq
 8009138:	1aad      	subeq	r5, r5, r2
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	bf0c      	ite	eq
 8009140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009144:	2500      	movne	r5, #0
 8009146:	4293      	cmp	r3, r2
 8009148:	bfc4      	itt	gt
 800914a:	1a9b      	subgt	r3, r3, r2
 800914c:	18ed      	addgt	r5, r5, r3
 800914e:	f04f 0900 	mov.w	r9, #0
 8009152:	341a      	adds	r4, #26
 8009154:	454d      	cmp	r5, r9
 8009156:	d11b      	bne.n	8009190 <_printf_common+0xd8>
 8009158:	2000      	movs	r0, #0
 800915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915e:	2301      	movs	r3, #1
 8009160:	4652      	mov	r2, sl
 8009162:	4639      	mov	r1, r7
 8009164:	4630      	mov	r0, r6
 8009166:	47c0      	blx	r8
 8009168:	3001      	adds	r0, #1
 800916a:	d103      	bne.n	8009174 <_printf_common+0xbc>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	3501      	adds	r5, #1
 8009176:	e7c2      	b.n	80090fe <_printf_common+0x46>
 8009178:	18e1      	adds	r1, r4, r3
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	2030      	movs	r0, #48	; 0x30
 800917e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009182:	4422      	add	r2, r4
 8009184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800918c:	3302      	adds	r3, #2
 800918e:	e7c4      	b.n	800911a <_printf_common+0x62>
 8009190:	2301      	movs	r3, #1
 8009192:	4622      	mov	r2, r4
 8009194:	4639      	mov	r1, r7
 8009196:	4630      	mov	r0, r6
 8009198:	47c0      	blx	r8
 800919a:	3001      	adds	r0, #1
 800919c:	d0e6      	beq.n	800916c <_printf_common+0xb4>
 800919e:	f109 0901 	add.w	r9, r9, #1
 80091a2:	e7d7      	b.n	8009154 <_printf_common+0x9c>

080091a4 <_printf_i>:
 80091a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091a8:	4617      	mov	r7, r2
 80091aa:	7e0a      	ldrb	r2, [r1, #24]
 80091ac:	b085      	sub	sp, #20
 80091ae:	2a6e      	cmp	r2, #110	; 0x6e
 80091b0:	4698      	mov	r8, r3
 80091b2:	4606      	mov	r6, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80091bc:	f000 80bc 	beq.w	8009338 <_printf_i+0x194>
 80091c0:	d81a      	bhi.n	80091f8 <_printf_i+0x54>
 80091c2:	2a63      	cmp	r2, #99	; 0x63
 80091c4:	d02e      	beq.n	8009224 <_printf_i+0x80>
 80091c6:	d80a      	bhi.n	80091de <_printf_i+0x3a>
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	f000 80c8 	beq.w	800935e <_printf_i+0x1ba>
 80091ce:	2a58      	cmp	r2, #88	; 0x58
 80091d0:	f000 808a 	beq.w	80092e8 <_printf_i+0x144>
 80091d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80091dc:	e02a      	b.n	8009234 <_printf_i+0x90>
 80091de:	2a64      	cmp	r2, #100	; 0x64
 80091e0:	d001      	beq.n	80091e6 <_printf_i+0x42>
 80091e2:	2a69      	cmp	r2, #105	; 0x69
 80091e4:	d1f6      	bne.n	80091d4 <_printf_i+0x30>
 80091e6:	6821      	ldr	r1, [r4, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80091ee:	d023      	beq.n	8009238 <_printf_i+0x94>
 80091f0:	1d11      	adds	r1, r2, #4
 80091f2:	6019      	str	r1, [r3, #0]
 80091f4:	6813      	ldr	r3, [r2, #0]
 80091f6:	e027      	b.n	8009248 <_printf_i+0xa4>
 80091f8:	2a73      	cmp	r2, #115	; 0x73
 80091fa:	f000 80b4 	beq.w	8009366 <_printf_i+0x1c2>
 80091fe:	d808      	bhi.n	8009212 <_printf_i+0x6e>
 8009200:	2a6f      	cmp	r2, #111	; 0x6f
 8009202:	d02a      	beq.n	800925a <_printf_i+0xb6>
 8009204:	2a70      	cmp	r2, #112	; 0x70
 8009206:	d1e5      	bne.n	80091d4 <_printf_i+0x30>
 8009208:	680a      	ldr	r2, [r1, #0]
 800920a:	f042 0220 	orr.w	r2, r2, #32
 800920e:	600a      	str	r2, [r1, #0]
 8009210:	e003      	b.n	800921a <_printf_i+0x76>
 8009212:	2a75      	cmp	r2, #117	; 0x75
 8009214:	d021      	beq.n	800925a <_printf_i+0xb6>
 8009216:	2a78      	cmp	r2, #120	; 0x78
 8009218:	d1dc      	bne.n	80091d4 <_printf_i+0x30>
 800921a:	2278      	movs	r2, #120	; 0x78
 800921c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009220:	496e      	ldr	r1, [pc, #440]	; (80093dc <_printf_i+0x238>)
 8009222:	e064      	b.n	80092ee <_printf_i+0x14a>
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800922a:	1d11      	adds	r1, r2, #4
 800922c:	6019      	str	r1, [r3, #0]
 800922e:	6813      	ldr	r3, [r2, #0]
 8009230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009234:	2301      	movs	r3, #1
 8009236:	e0a3      	b.n	8009380 <_printf_i+0x1dc>
 8009238:	f011 0f40 	tst.w	r1, #64	; 0x40
 800923c:	f102 0104 	add.w	r1, r2, #4
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	d0d7      	beq.n	80091f4 <_printf_i+0x50>
 8009244:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009248:	2b00      	cmp	r3, #0
 800924a:	da03      	bge.n	8009254 <_printf_i+0xb0>
 800924c:	222d      	movs	r2, #45	; 0x2d
 800924e:	425b      	negs	r3, r3
 8009250:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009254:	4962      	ldr	r1, [pc, #392]	; (80093e0 <_printf_i+0x23c>)
 8009256:	220a      	movs	r2, #10
 8009258:	e017      	b.n	800928a <_printf_i+0xe6>
 800925a:	6820      	ldr	r0, [r4, #0]
 800925c:	6819      	ldr	r1, [r3, #0]
 800925e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009262:	d003      	beq.n	800926c <_printf_i+0xc8>
 8009264:	1d08      	adds	r0, r1, #4
 8009266:	6018      	str	r0, [r3, #0]
 8009268:	680b      	ldr	r3, [r1, #0]
 800926a:	e006      	b.n	800927a <_printf_i+0xd6>
 800926c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009270:	f101 0004 	add.w	r0, r1, #4
 8009274:	6018      	str	r0, [r3, #0]
 8009276:	d0f7      	beq.n	8009268 <_printf_i+0xc4>
 8009278:	880b      	ldrh	r3, [r1, #0]
 800927a:	4959      	ldr	r1, [pc, #356]	; (80093e0 <_printf_i+0x23c>)
 800927c:	2a6f      	cmp	r2, #111	; 0x6f
 800927e:	bf14      	ite	ne
 8009280:	220a      	movne	r2, #10
 8009282:	2208      	moveq	r2, #8
 8009284:	2000      	movs	r0, #0
 8009286:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800928a:	6865      	ldr	r5, [r4, #4]
 800928c:	60a5      	str	r5, [r4, #8]
 800928e:	2d00      	cmp	r5, #0
 8009290:	f2c0 809c 	blt.w	80093cc <_printf_i+0x228>
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	f020 0004 	bic.w	r0, r0, #4
 800929a:	6020      	str	r0, [r4, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d13f      	bne.n	8009320 <_printf_i+0x17c>
 80092a0:	2d00      	cmp	r5, #0
 80092a2:	f040 8095 	bne.w	80093d0 <_printf_i+0x22c>
 80092a6:	4675      	mov	r5, lr
 80092a8:	2a08      	cmp	r2, #8
 80092aa:	d10b      	bne.n	80092c4 <_printf_i+0x120>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d508      	bpl.n	80092c4 <_printf_i+0x120>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	6862      	ldr	r2, [r4, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	bfde      	ittt	le
 80092ba:	2330      	movle	r3, #48	; 0x30
 80092bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092c4:	ebae 0305 	sub.w	r3, lr, r5
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	f8cd 8000 	str.w	r8, [sp]
 80092ce:	463b      	mov	r3, r7
 80092d0:	aa03      	add	r2, sp, #12
 80092d2:	4621      	mov	r1, r4
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff feef 	bl	80090b8 <_printf_common>
 80092da:	3001      	adds	r0, #1
 80092dc:	d155      	bne.n	800938a <_printf_i+0x1e6>
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	b005      	add	sp, #20
 80092e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80092ec:	493c      	ldr	r1, [pc, #240]	; (80093e0 <_printf_i+0x23c>)
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80092f6:	f100 0504 	add.w	r5, r0, #4
 80092fa:	601d      	str	r5, [r3, #0]
 80092fc:	d001      	beq.n	8009302 <_printf_i+0x15e>
 80092fe:	6803      	ldr	r3, [r0, #0]
 8009300:	e002      	b.n	8009308 <_printf_i+0x164>
 8009302:	0655      	lsls	r5, r2, #25
 8009304:	d5fb      	bpl.n	80092fe <_printf_i+0x15a>
 8009306:	8803      	ldrh	r3, [r0, #0]
 8009308:	07d0      	lsls	r0, r2, #31
 800930a:	bf44      	itt	mi
 800930c:	f042 0220 	orrmi.w	r2, r2, #32
 8009310:	6022      	strmi	r2, [r4, #0]
 8009312:	b91b      	cbnz	r3, 800931c <_printf_i+0x178>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	f022 0220 	bic.w	r2, r2, #32
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	2210      	movs	r2, #16
 800931e:	e7b1      	b.n	8009284 <_printf_i+0xe0>
 8009320:	4675      	mov	r5, lr
 8009322:	fbb3 f0f2 	udiv	r0, r3, r2
 8009326:	fb02 3310 	mls	r3, r2, r0, r3
 800932a:	5ccb      	ldrb	r3, [r1, r3]
 800932c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009330:	4603      	mov	r3, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	d1f5      	bne.n	8009322 <_printf_i+0x17e>
 8009336:	e7b7      	b.n	80092a8 <_printf_i+0x104>
 8009338:	6808      	ldr	r0, [r1, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	6949      	ldr	r1, [r1, #20]
 800933e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009342:	d004      	beq.n	800934e <_printf_i+0x1aa>
 8009344:	1d10      	adds	r0, r2, #4
 8009346:	6018      	str	r0, [r3, #0]
 8009348:	6813      	ldr	r3, [r2, #0]
 800934a:	6019      	str	r1, [r3, #0]
 800934c:	e007      	b.n	800935e <_printf_i+0x1ba>
 800934e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009352:	f102 0004 	add.w	r0, r2, #4
 8009356:	6018      	str	r0, [r3, #0]
 8009358:	6813      	ldr	r3, [r2, #0]
 800935a:	d0f6      	beq.n	800934a <_printf_i+0x1a6>
 800935c:	8019      	strh	r1, [r3, #0]
 800935e:	2300      	movs	r3, #0
 8009360:	6123      	str	r3, [r4, #16]
 8009362:	4675      	mov	r5, lr
 8009364:	e7b1      	b.n	80092ca <_printf_i+0x126>
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	1d11      	adds	r1, r2, #4
 800936a:	6019      	str	r1, [r3, #0]
 800936c:	6815      	ldr	r5, [r2, #0]
 800936e:	6862      	ldr	r2, [r4, #4]
 8009370:	2100      	movs	r1, #0
 8009372:	4628      	mov	r0, r5
 8009374:	f7f6 ff44 	bl	8000200 <memchr>
 8009378:	b108      	cbz	r0, 800937e <_printf_i+0x1da>
 800937a:	1b40      	subs	r0, r0, r5
 800937c:	6060      	str	r0, [r4, #4]
 800937e:	6863      	ldr	r3, [r4, #4]
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	2300      	movs	r3, #0
 8009384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009388:	e79f      	b.n	80092ca <_printf_i+0x126>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	462a      	mov	r2, r5
 800938e:	4639      	mov	r1, r7
 8009390:	4630      	mov	r0, r6
 8009392:	47c0      	blx	r8
 8009394:	3001      	adds	r0, #1
 8009396:	d0a2      	beq.n	80092de <_printf_i+0x13a>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	079b      	lsls	r3, r3, #30
 800939c:	d507      	bpl.n	80093ae <_printf_i+0x20a>
 800939e:	2500      	movs	r5, #0
 80093a0:	f104 0919 	add.w	r9, r4, #25
 80093a4:	68e3      	ldr	r3, [r4, #12]
 80093a6:	9a03      	ldr	r2, [sp, #12]
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	429d      	cmp	r5, r3
 80093ac:	db05      	blt.n	80093ba <_printf_i+0x216>
 80093ae:	68e0      	ldr	r0, [r4, #12]
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	4298      	cmp	r0, r3
 80093b4:	bfb8      	it	lt
 80093b6:	4618      	movlt	r0, r3
 80093b8:	e793      	b.n	80092e2 <_printf_i+0x13e>
 80093ba:	2301      	movs	r3, #1
 80093bc:	464a      	mov	r2, r9
 80093be:	4639      	mov	r1, r7
 80093c0:	4630      	mov	r0, r6
 80093c2:	47c0      	blx	r8
 80093c4:	3001      	adds	r0, #1
 80093c6:	d08a      	beq.n	80092de <_printf_i+0x13a>
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7eb      	b.n	80093a4 <_printf_i+0x200>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1a7      	bne.n	8009320 <_printf_i+0x17c>
 80093d0:	780b      	ldrb	r3, [r1, #0]
 80093d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093da:	e765      	b.n	80092a8 <_printf_i+0x104>
 80093dc:	0800a1ce 	.word	0x0800a1ce
 80093e0:	0800a1bd 	.word	0x0800a1bd

080093e4 <_putc_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460d      	mov	r5, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	4606      	mov	r6, r0
 80093ec:	b118      	cbz	r0, 80093f6 <_putc_r+0x12>
 80093ee:	6983      	ldr	r3, [r0, #24]
 80093f0:	b90b      	cbnz	r3, 80093f6 <_putc_r+0x12>
 80093f2:	f7ff fb45 	bl	8008a80 <__sinit>
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <_putc_r+0x60>)
 80093f8:	429c      	cmp	r4, r3
 80093fa:	d112      	bne.n	8009422 <_putc_r+0x3e>
 80093fc:	6874      	ldr	r4, [r6, #4]
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	3b01      	subs	r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	60a3      	str	r3, [r4, #8]
 8009406:	da16      	bge.n	8009436 <_putc_r+0x52>
 8009408:	69a2      	ldr	r2, [r4, #24]
 800940a:	4293      	cmp	r3, r2
 800940c:	db02      	blt.n	8009414 <_putc_r+0x30>
 800940e:	b2eb      	uxtb	r3, r5
 8009410:	2b0a      	cmp	r3, #10
 8009412:	d110      	bne.n	8009436 <_putc_r+0x52>
 8009414:	4622      	mov	r2, r4
 8009416:	4629      	mov	r1, r5
 8009418:	4630      	mov	r0, r6
 800941a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800941e:	f000 b85b 	b.w	80094d8 <__swbuf_r>
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <_putc_r+0x64>)
 8009424:	429c      	cmp	r4, r3
 8009426:	d101      	bne.n	800942c <_putc_r+0x48>
 8009428:	68b4      	ldr	r4, [r6, #8]
 800942a:	e7e8      	b.n	80093fe <_putc_r+0x1a>
 800942c:	4b07      	ldr	r3, [pc, #28]	; (800944c <_putc_r+0x68>)
 800942e:	429c      	cmp	r4, r3
 8009430:	bf08      	it	eq
 8009432:	68f4      	ldreq	r4, [r6, #12]
 8009434:	e7e3      	b.n	80093fe <_putc_r+0x1a>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	6022      	str	r2, [r4, #0]
 800943c:	701d      	strb	r5, [r3, #0]
 800943e:	b2e8      	uxtb	r0, r5
 8009440:	bd70      	pop	{r4, r5, r6, pc}
 8009442:	bf00      	nop
 8009444:	0800a16c 	.word	0x0800a16c
 8009448:	0800a18c 	.word	0x0800a18c
 800944c:	0800a14c 	.word	0x0800a14c

08009450 <__sread>:
 8009450:	b510      	push	{r4, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	f000 fa94 	bl	8009984 <_read_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	bfab      	itete	ge
 8009460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009462:	89a3      	ldrhlt	r3, [r4, #12]
 8009464:	181b      	addge	r3, r3, r0
 8009466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800946a:	bfac      	ite	ge
 800946c:	6563      	strge	r3, [r4, #84]	; 0x54
 800946e:	81a3      	strhlt	r3, [r4, #12]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__swrite>:
 8009472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	461f      	mov	r7, r3
 8009478:	898b      	ldrh	r3, [r1, #12]
 800947a:	05db      	lsls	r3, r3, #23
 800947c:	4605      	mov	r5, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4616      	mov	r6, r2
 8009482:	d505      	bpl.n	8009490 <__swrite+0x1e>
 8009484:	2302      	movs	r3, #2
 8009486:	2200      	movs	r2, #0
 8009488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948c:	f000 f9b8 	bl	8009800 <_lseek_r>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	4628      	mov	r0, r5
 80094a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	f000 b869 	b.w	800957c <_write_r>

080094aa <__sseek>:
 80094aa:	b510      	push	{r4, lr}
 80094ac:	460c      	mov	r4, r1
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 f9a5 	bl	8009800 <_lseek_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	bf15      	itete	ne
 80094bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094c6:	81a3      	strheq	r3, [r4, #12]
 80094c8:	bf18      	it	ne
 80094ca:	81a3      	strhne	r3, [r4, #12]
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__sclose>:
 80094ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d2:	f000 b8d3 	b.w	800967c <_close_r>
	...

080094d8 <__swbuf_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	460e      	mov	r6, r1
 80094dc:	4614      	mov	r4, r2
 80094de:	4605      	mov	r5, r0
 80094e0:	b118      	cbz	r0, 80094ea <__swbuf_r+0x12>
 80094e2:	6983      	ldr	r3, [r0, #24]
 80094e4:	b90b      	cbnz	r3, 80094ea <__swbuf_r+0x12>
 80094e6:	f7ff facb 	bl	8008a80 <__sinit>
 80094ea:	4b21      	ldr	r3, [pc, #132]	; (8009570 <__swbuf_r+0x98>)
 80094ec:	429c      	cmp	r4, r3
 80094ee:	d12a      	bne.n	8009546 <__swbuf_r+0x6e>
 80094f0:	686c      	ldr	r4, [r5, #4]
 80094f2:	69a3      	ldr	r3, [r4, #24]
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	071a      	lsls	r2, r3, #28
 80094fa:	d52e      	bpl.n	800955a <__swbuf_r+0x82>
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	b363      	cbz	r3, 800955a <__swbuf_r+0x82>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	1ac0      	subs	r0, r0, r3
 8009506:	6963      	ldr	r3, [r4, #20]
 8009508:	b2f6      	uxtb	r6, r6
 800950a:	4298      	cmp	r0, r3
 800950c:	4637      	mov	r7, r6
 800950e:	db04      	blt.n	800951a <__swbuf_r+0x42>
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f000 f94a 	bl	80097ac <_fflush_r>
 8009518:	bb28      	cbnz	r0, 8009566 <__swbuf_r+0x8e>
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	60a3      	str	r3, [r4, #8]
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	6022      	str	r2, [r4, #0]
 8009526:	701e      	strb	r6, [r3, #0]
 8009528:	6963      	ldr	r3, [r4, #20]
 800952a:	3001      	adds	r0, #1
 800952c:	4298      	cmp	r0, r3
 800952e:	d004      	beq.n	800953a <__swbuf_r+0x62>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d519      	bpl.n	800956a <__swbuf_r+0x92>
 8009536:	2e0a      	cmp	r6, #10
 8009538:	d117      	bne.n	800956a <__swbuf_r+0x92>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f000 f935 	bl	80097ac <_fflush_r>
 8009542:	b190      	cbz	r0, 800956a <__swbuf_r+0x92>
 8009544:	e00f      	b.n	8009566 <__swbuf_r+0x8e>
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <__swbuf_r+0x9c>)
 8009548:	429c      	cmp	r4, r3
 800954a:	d101      	bne.n	8009550 <__swbuf_r+0x78>
 800954c:	68ac      	ldr	r4, [r5, #8]
 800954e:	e7d0      	b.n	80094f2 <__swbuf_r+0x1a>
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <__swbuf_r+0xa0>)
 8009552:	429c      	cmp	r4, r3
 8009554:	bf08      	it	eq
 8009556:	68ec      	ldreq	r4, [r5, #12]
 8009558:	e7cb      	b.n	80094f2 <__swbuf_r+0x1a>
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f81f 	bl	80095a0 <__swsetup_r>
 8009562:	2800      	cmp	r0, #0
 8009564:	d0cc      	beq.n	8009500 <__swbuf_r+0x28>
 8009566:	f04f 37ff 	mov.w	r7, #4294967295
 800956a:	4638      	mov	r0, r7
 800956c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956e:	bf00      	nop
 8009570:	0800a16c 	.word	0x0800a16c
 8009574:	0800a18c 	.word	0x0800a18c
 8009578:	0800a14c 	.word	0x0800a14c

0800957c <_write_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4c07      	ldr	r4, [pc, #28]	; (800959c <_write_r+0x20>)
 8009580:	4605      	mov	r5, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	6022      	str	r2, [r4, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f7 f9dc 	bl	8000948 <_write>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_write_r+0x1e>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b103      	cbz	r3, 800959a <_write_r+0x1e>
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	20000860 	.word	0x20000860

080095a0 <__swsetup_r>:
 80095a0:	4b32      	ldr	r3, [pc, #200]	; (800966c <__swsetup_r+0xcc>)
 80095a2:	b570      	push	{r4, r5, r6, lr}
 80095a4:	681d      	ldr	r5, [r3, #0]
 80095a6:	4606      	mov	r6, r0
 80095a8:	460c      	mov	r4, r1
 80095aa:	b125      	cbz	r5, 80095b6 <__swsetup_r+0x16>
 80095ac:	69ab      	ldr	r3, [r5, #24]
 80095ae:	b913      	cbnz	r3, 80095b6 <__swsetup_r+0x16>
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7ff fa65 	bl	8008a80 <__sinit>
 80095b6:	4b2e      	ldr	r3, [pc, #184]	; (8009670 <__swsetup_r+0xd0>)
 80095b8:	429c      	cmp	r4, r3
 80095ba:	d10f      	bne.n	80095dc <__swsetup_r+0x3c>
 80095bc:	686c      	ldr	r4, [r5, #4]
 80095be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	0715      	lsls	r5, r2, #28
 80095c6:	d42c      	bmi.n	8009622 <__swsetup_r+0x82>
 80095c8:	06d0      	lsls	r0, r2, #27
 80095ca:	d411      	bmi.n	80095f0 <__swsetup_r+0x50>
 80095cc:	2209      	movs	r2, #9
 80095ce:	6032      	str	r2, [r6, #0]
 80095d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	4b25      	ldr	r3, [pc, #148]	; (8009674 <__swsetup_r+0xd4>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d101      	bne.n	80095e6 <__swsetup_r+0x46>
 80095e2:	68ac      	ldr	r4, [r5, #8]
 80095e4:	e7eb      	b.n	80095be <__swsetup_r+0x1e>
 80095e6:	4b24      	ldr	r3, [pc, #144]	; (8009678 <__swsetup_r+0xd8>)
 80095e8:	429c      	cmp	r4, r3
 80095ea:	bf08      	it	eq
 80095ec:	68ec      	ldreq	r4, [r5, #12]
 80095ee:	e7e6      	b.n	80095be <__swsetup_r+0x1e>
 80095f0:	0751      	lsls	r1, r2, #29
 80095f2:	d512      	bpl.n	800961a <__swsetup_r+0x7a>
 80095f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095f6:	b141      	cbz	r1, 800960a <__swsetup_r+0x6a>
 80095f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d002      	beq.n	8009606 <__swsetup_r+0x66>
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff f8f1 	bl	80087e8 <_free_r>
 8009606:	2300      	movs	r3, #0
 8009608:	6363      	str	r3, [r4, #52]	; 0x34
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	2300      	movs	r3, #0
 8009614:	6063      	str	r3, [r4, #4]
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f043 0308 	orr.w	r3, r3, #8
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	b94b      	cbnz	r3, 800963a <__swsetup_r+0x9a>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800962c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009630:	d003      	beq.n	800963a <__swsetup_r+0x9a>
 8009632:	4621      	mov	r1, r4
 8009634:	4630      	mov	r0, r6
 8009636:	f000 f919 	bl	800986c <__smakebuf_r>
 800963a:	89a2      	ldrh	r2, [r4, #12]
 800963c:	f012 0301 	ands.w	r3, r2, #1
 8009640:	d00c      	beq.n	800965c <__swsetup_r+0xbc>
 8009642:	2300      	movs	r3, #0
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6963      	ldr	r3, [r4, #20]
 8009648:	425b      	negs	r3, r3
 800964a:	61a3      	str	r3, [r4, #24]
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b953      	cbnz	r3, 8009666 <__swsetup_r+0xc6>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009658:	d1ba      	bne.n	80095d0 <__swsetup_r+0x30>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	0792      	lsls	r2, r2, #30
 800965e:	bf58      	it	pl
 8009660:	6963      	ldrpl	r3, [r4, #20]
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	e7f2      	b.n	800964c <__swsetup_r+0xac>
 8009666:	2000      	movs	r0, #0
 8009668:	e7f7      	b.n	800965a <__swsetup_r+0xba>
 800966a:	bf00      	nop
 800966c:	2000002c 	.word	0x2000002c
 8009670:	0800a16c 	.word	0x0800a16c
 8009674:	0800a18c 	.word	0x0800a18c
 8009678:	0800a14c 	.word	0x0800a14c

0800967c <_close_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4c06      	ldr	r4, [pc, #24]	; (8009698 <_close_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4605      	mov	r5, r0
 8009684:	4608      	mov	r0, r1
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	f7f7 fa7e 	bl	8000b88 <_close>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_close_r+0x1a>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	b103      	cbz	r3, 8009696 <_close_r+0x1a>
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20000860 	.word	0x20000860

0800969c <__sflush_r>:
 800969c:	898a      	ldrh	r2, [r1, #12]
 800969e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	4605      	mov	r5, r0
 80096a4:	0710      	lsls	r0, r2, #28
 80096a6:	460c      	mov	r4, r1
 80096a8:	d45a      	bmi.n	8009760 <__sflush_r+0xc4>
 80096aa:	684b      	ldr	r3, [r1, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc05      	bgt.n	80096bc <__sflush_r+0x20>
 80096b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc02      	bgt.n	80096bc <__sflush_r+0x20>
 80096b6:	2000      	movs	r0, #0
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096be:	2e00      	cmp	r6, #0
 80096c0:	d0f9      	beq.n	80096b6 <__sflush_r+0x1a>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096c8:	682f      	ldr	r7, [r5, #0]
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	d033      	beq.n	8009736 <__sflush_r+0x9a>
 80096ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	075a      	lsls	r2, r3, #29
 80096d4:	d505      	bpl.n	80096e2 <__sflush_r+0x46>
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	1ac0      	subs	r0, r0, r3
 80096da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096dc:	b10b      	cbz	r3, 80096e2 <__sflush_r+0x46>
 80096de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096e0:	1ac0      	subs	r0, r0, r3
 80096e2:	2300      	movs	r3, #0
 80096e4:	4602      	mov	r2, r0
 80096e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e8:	6a21      	ldr	r1, [r4, #32]
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b0      	blx	r6
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	d106      	bne.n	8009702 <__sflush_r+0x66>
 80096f4:	6829      	ldr	r1, [r5, #0]
 80096f6:	291d      	cmp	r1, #29
 80096f8:	d84b      	bhi.n	8009792 <__sflush_r+0xf6>
 80096fa:	4a2b      	ldr	r2, [pc, #172]	; (80097a8 <__sflush_r+0x10c>)
 80096fc:	40ca      	lsrs	r2, r1
 80096fe:	07d6      	lsls	r6, r2, #31
 8009700:	d547      	bpl.n	8009792 <__sflush_r+0xf6>
 8009702:	2200      	movs	r2, #0
 8009704:	6062      	str	r2, [r4, #4]
 8009706:	04d9      	lsls	r1, r3, #19
 8009708:	6922      	ldr	r2, [r4, #16]
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	d504      	bpl.n	8009718 <__sflush_r+0x7c>
 800970e:	1c42      	adds	r2, r0, #1
 8009710:	d101      	bne.n	8009716 <__sflush_r+0x7a>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b903      	cbnz	r3, 8009718 <__sflush_r+0x7c>
 8009716:	6560      	str	r0, [r4, #84]	; 0x54
 8009718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971a:	602f      	str	r7, [r5, #0]
 800971c:	2900      	cmp	r1, #0
 800971e:	d0ca      	beq.n	80096b6 <__sflush_r+0x1a>
 8009720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009724:	4299      	cmp	r1, r3
 8009726:	d002      	beq.n	800972e <__sflush_r+0x92>
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff f85d 	bl	80087e8 <_free_r>
 800972e:	2000      	movs	r0, #0
 8009730:	6360      	str	r0, [r4, #52]	; 0x34
 8009732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009736:	6a21      	ldr	r1, [r4, #32]
 8009738:	2301      	movs	r3, #1
 800973a:	4628      	mov	r0, r5
 800973c:	47b0      	blx	r6
 800973e:	1c41      	adds	r1, r0, #1
 8009740:	d1c6      	bne.n	80096d0 <__sflush_r+0x34>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0c3      	beq.n	80096d0 <__sflush_r+0x34>
 8009748:	2b1d      	cmp	r3, #29
 800974a:	d001      	beq.n	8009750 <__sflush_r+0xb4>
 800974c:	2b16      	cmp	r3, #22
 800974e:	d101      	bne.n	8009754 <__sflush_r+0xb8>
 8009750:	602f      	str	r7, [r5, #0]
 8009752:	e7b0      	b.n	80096b6 <__sflush_r+0x1a>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	690f      	ldr	r7, [r1, #16]
 8009762:	2f00      	cmp	r7, #0
 8009764:	d0a7      	beq.n	80096b6 <__sflush_r+0x1a>
 8009766:	0793      	lsls	r3, r2, #30
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	bf08      	it	eq
 800976c:	694b      	ldreq	r3, [r1, #20]
 800976e:	600f      	str	r7, [r1, #0]
 8009770:	bf18      	it	ne
 8009772:	2300      	movne	r3, #0
 8009774:	eba6 0807 	sub.w	r8, r6, r7
 8009778:	608b      	str	r3, [r1, #8]
 800977a:	f1b8 0f00 	cmp.w	r8, #0
 800977e:	dd9a      	ble.n	80096b6 <__sflush_r+0x1a>
 8009780:	4643      	mov	r3, r8
 8009782:	463a      	mov	r2, r7
 8009784:	6a21      	ldr	r1, [r4, #32]
 8009786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009788:	4628      	mov	r0, r5
 800978a:	47b0      	blx	r6
 800978c:	2800      	cmp	r0, #0
 800978e:	dc07      	bgt.n	80097a0 <__sflush_r+0x104>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a0:	4407      	add	r7, r0
 80097a2:	eba8 0800 	sub.w	r8, r8, r0
 80097a6:	e7e8      	b.n	800977a <__sflush_r+0xde>
 80097a8:	20400001 	.word	0x20400001

080097ac <_fflush_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	4605      	mov	r5, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	b1db      	cbz	r3, 80097ee <_fflush_r+0x42>
 80097b6:	b118      	cbz	r0, 80097c0 <_fflush_r+0x14>
 80097b8:	6983      	ldr	r3, [r0, #24]
 80097ba:	b90b      	cbnz	r3, 80097c0 <_fflush_r+0x14>
 80097bc:	f7ff f960 	bl	8008a80 <__sinit>
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <_fflush_r+0x48>)
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d109      	bne.n	80097da <_fflush_r+0x2e>
 80097c6:	686c      	ldr	r4, [r5, #4]
 80097c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097cc:	b17b      	cbz	r3, 80097ee <_fflush_r+0x42>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d6:	f7ff bf61 	b.w	800969c <__sflush_r>
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <_fflush_r+0x4c>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	d101      	bne.n	80097e4 <_fflush_r+0x38>
 80097e0:	68ac      	ldr	r4, [r5, #8]
 80097e2:	e7f1      	b.n	80097c8 <_fflush_r+0x1c>
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <_fflush_r+0x50>)
 80097e6:	429c      	cmp	r4, r3
 80097e8:	bf08      	it	eq
 80097ea:	68ec      	ldreq	r4, [r5, #12]
 80097ec:	e7ec      	b.n	80097c8 <_fflush_r+0x1c>
 80097ee:	2000      	movs	r0, #0
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	0800a16c 	.word	0x0800a16c
 80097f8:	0800a18c 	.word	0x0800a18c
 80097fc:	0800a14c 	.word	0x0800a14c

08009800 <_lseek_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4c07      	ldr	r4, [pc, #28]	; (8009820 <_lseek_r+0x20>)
 8009804:	4605      	mov	r5, r0
 8009806:	4608      	mov	r0, r1
 8009808:	4611      	mov	r1, r2
 800980a:	2200      	movs	r2, #0
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	f7f7 f9e1 	bl	8000bd6 <_lseek>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_lseek_r+0x1e>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	b103      	cbz	r3, 800981e <_lseek_r+0x1e>
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	20000860 	.word	0x20000860

08009824 <__swhatbuf_r>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	460e      	mov	r6, r1
 8009828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982c:	2900      	cmp	r1, #0
 800982e:	b090      	sub	sp, #64	; 0x40
 8009830:	4614      	mov	r4, r2
 8009832:	461d      	mov	r5, r3
 8009834:	da07      	bge.n	8009846 <__swhatbuf_r+0x22>
 8009836:	2300      	movs	r3, #0
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	89b3      	ldrh	r3, [r6, #12]
 800983c:	061a      	lsls	r2, r3, #24
 800983e:	d410      	bmi.n	8009862 <__swhatbuf_r+0x3e>
 8009840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009844:	e00e      	b.n	8009864 <__swhatbuf_r+0x40>
 8009846:	aa01      	add	r2, sp, #4
 8009848:	f000 f8ae 	bl	80099a8 <_fstat_r>
 800984c:	2800      	cmp	r0, #0
 800984e:	dbf2      	blt.n	8009836 <__swhatbuf_r+0x12>
 8009850:	9a02      	ldr	r2, [sp, #8]
 8009852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800985a:	425a      	negs	r2, r3
 800985c:	415a      	adcs	r2, r3
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	e7ee      	b.n	8009840 <__swhatbuf_r+0x1c>
 8009862:	2340      	movs	r3, #64	; 0x40
 8009864:	2000      	movs	r0, #0
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	b010      	add	sp, #64	; 0x40
 800986a:	bd70      	pop	{r4, r5, r6, pc}

0800986c <__smakebuf_r>:
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009870:	079d      	lsls	r5, r3, #30
 8009872:	4606      	mov	r6, r0
 8009874:	460c      	mov	r4, r1
 8009876:	d507      	bpl.n	8009888 <__smakebuf_r+0x1c>
 8009878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	2301      	movs	r3, #1
 8009882:	6163      	str	r3, [r4, #20]
 8009884:	b002      	add	sp, #8
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	ab01      	add	r3, sp, #4
 800988a:	466a      	mov	r2, sp
 800988c:	f7ff ffca 	bl	8009824 <__swhatbuf_r>
 8009890:	9900      	ldr	r1, [sp, #0]
 8009892:	4605      	mov	r5, r0
 8009894:	4630      	mov	r0, r6
 8009896:	f7fe fff5 	bl	8008884 <_malloc_r>
 800989a:	b948      	cbnz	r0, 80098b0 <__smakebuf_r+0x44>
 800989c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a0:	059a      	lsls	r2, r3, #22
 80098a2:	d4ef      	bmi.n	8009884 <__smakebuf_r+0x18>
 80098a4:	f023 0303 	bic.w	r3, r3, #3
 80098a8:	f043 0302 	orr.w	r3, r3, #2
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	e7e3      	b.n	8009878 <__smakebuf_r+0xc>
 80098b0:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <__smakebuf_r+0x7c>)
 80098b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	6020      	str	r0, [r4, #0]
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	6163      	str	r3, [r4, #20]
 80098c2:	9b01      	ldr	r3, [sp, #4]
 80098c4:	6120      	str	r0, [r4, #16]
 80098c6:	b15b      	cbz	r3, 80098e0 <__smakebuf_r+0x74>
 80098c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 f87d 	bl	80099cc <_isatty_r>
 80098d2:	b128      	cbz	r0, 80098e0 <__smakebuf_r+0x74>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	431d      	orrs	r5, r3
 80098e4:	81a5      	strh	r5, [r4, #12]
 80098e6:	e7cd      	b.n	8009884 <__smakebuf_r+0x18>
 80098e8:	08008a01 	.word	0x08008a01

080098ec <memcpy>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	1e43      	subs	r3, r0, #1
 80098f0:	440a      	add	r2, r1
 80098f2:	4291      	cmp	r1, r2
 80098f4:	d100      	bne.n	80098f8 <memcpy+0xc>
 80098f6:	bd10      	pop	{r4, pc}
 80098f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009900:	e7f7      	b.n	80098f2 <memcpy+0x6>

08009902 <memmove>:
 8009902:	4288      	cmp	r0, r1
 8009904:	b510      	push	{r4, lr}
 8009906:	eb01 0302 	add.w	r3, r1, r2
 800990a:	d803      	bhi.n	8009914 <memmove+0x12>
 800990c:	1e42      	subs	r2, r0, #1
 800990e:	4299      	cmp	r1, r3
 8009910:	d10c      	bne.n	800992c <memmove+0x2a>
 8009912:	bd10      	pop	{r4, pc}
 8009914:	4298      	cmp	r0, r3
 8009916:	d2f9      	bcs.n	800990c <memmove+0xa>
 8009918:	1881      	adds	r1, r0, r2
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	42d3      	cmn	r3, r2
 800991e:	d100      	bne.n	8009922 <memmove+0x20>
 8009920:	bd10      	pop	{r4, pc}
 8009922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009926:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800992a:	e7f7      	b.n	800991c <memmove+0x1a>
 800992c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009930:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009934:	e7eb      	b.n	800990e <memmove+0xc>

08009936 <_realloc_r>:
 8009936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009938:	4607      	mov	r7, r0
 800993a:	4614      	mov	r4, r2
 800993c:	460e      	mov	r6, r1
 800993e:	b921      	cbnz	r1, 800994a <_realloc_r+0x14>
 8009940:	4611      	mov	r1, r2
 8009942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009946:	f7fe bf9d 	b.w	8008884 <_malloc_r>
 800994a:	b922      	cbnz	r2, 8009956 <_realloc_r+0x20>
 800994c:	f7fe ff4c 	bl	80087e8 <_free_r>
 8009950:	4625      	mov	r5, r4
 8009952:	4628      	mov	r0, r5
 8009954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009956:	f000 f849 	bl	80099ec <_malloc_usable_size_r>
 800995a:	4284      	cmp	r4, r0
 800995c:	d90f      	bls.n	800997e <_realloc_r+0x48>
 800995e:	4621      	mov	r1, r4
 8009960:	4638      	mov	r0, r7
 8009962:	f7fe ff8f 	bl	8008884 <_malloc_r>
 8009966:	4605      	mov	r5, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	d0f2      	beq.n	8009952 <_realloc_r+0x1c>
 800996c:	4631      	mov	r1, r6
 800996e:	4622      	mov	r2, r4
 8009970:	f7ff ffbc 	bl	80098ec <memcpy>
 8009974:	4631      	mov	r1, r6
 8009976:	4638      	mov	r0, r7
 8009978:	f7fe ff36 	bl	80087e8 <_free_r>
 800997c:	e7e9      	b.n	8009952 <_realloc_r+0x1c>
 800997e:	4635      	mov	r5, r6
 8009980:	e7e7      	b.n	8009952 <_realloc_r+0x1c>
	...

08009984 <_read_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4c07      	ldr	r4, [pc, #28]	; (80099a4 <_read_r+0x20>)
 8009988:	4605      	mov	r5, r0
 800998a:	4608      	mov	r0, r1
 800998c:	4611      	mov	r1, r2
 800998e:	2200      	movs	r2, #0
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	f7f7 f8ae 	bl	8000af4 <_read>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_read_r+0x1e>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_read_r+0x1e>
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20000860 	.word	0x20000860

080099a8 <_fstat_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4c07      	ldr	r4, [pc, #28]	; (80099c8 <_fstat_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4605      	mov	r5, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	f7f7 f8f3 	bl	8000ba0 <_fstat>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_fstat_r+0x1c>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_fstat_r+0x1c>
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20000860 	.word	0x20000860

080099cc <_isatty_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4c06      	ldr	r4, [pc, #24]	; (80099e8 <_isatty_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4605      	mov	r5, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	f7f7 f8f2 	bl	8000bc0 <_isatty>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_isatty_r+0x1a>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_isatty_r+0x1a>
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20000860 	.word	0x20000860

080099ec <_malloc_usable_size_r>:
 80099ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f1a0 0004 	sub.w	r0, r0, #4
 80099f6:	bfbc      	itt	lt
 80099f8:	580b      	ldrlt	r3, [r1, r0]
 80099fa:	18c0      	addlt	r0, r0, r3
 80099fc:	4770      	bx	lr
	...

08009a00 <_init>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	bf00      	nop
 8009a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a06:	bc08      	pop	{r3}
 8009a08:	469e      	mov	lr, r3
 8009a0a:	4770      	bx	lr

08009a0c <_fini>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	bf00      	nop
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr
